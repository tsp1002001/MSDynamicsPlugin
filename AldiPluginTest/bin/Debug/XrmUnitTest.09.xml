<?xml version="1.0"?>
<doc>
    <assembly>
        <name>XrmUnitTest.09</name>
    </assembly>
    <members>
        <member name="T:DLaB.Common.Config">
            <summary>
            Config Helper Class
            </summary>
        </member>
        <member name="M:DLaB.Common.Config.GetAppSettingOrDefault``1(System.String,``0)">
            <summary>
            Attempts to read the setting from the config file, and Parse to get the value.
            If the Type doesn't contain a Parse, a cast is attempted.
            Any failure in the Parse will throw an exception.
            If the config value is null, then the default value will be used
            </summary>
            <typeparam name="T"></typeparam>
            <param name="appSetting"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Common.Config.GetAppSettingOrDefault``1(System.String,System.Func{``0})">
            <summary>
            Attempts to read the setting from the config file, and Parse to get the value.
            If the Type doesn't contain a Parse, a cast is attempted.
            Any failure in the Parse will throw an exception.
            If the config value is null, then the getDefault function will be used to retrieve the value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="appSetting"></param>
            <param name="getDefault"></param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Common.Config.GetAppSettingFractionOrDefault(System.String,System.Decimal)">
            <summary>
            Attempts to read the string setting from the config file, and convert it from a fraction to a decimal.
            Any failure in the Parse will throw an exception.
            If the config value is null, then the default value will be used
            </summary>
            <param name="appSetting"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Common.Config.GetAppSettingOrDefaultByKey``1(System.String,System.String,``0,DLaB.Common.ConfigKeyValueSplitInfo)">
            <summary>
            Attempts to read the setting from the config file, and Parse to get the value.
            If the Type doesn't contain a Parse, a cast is attempted.
            Any failure in the Parse will throw an exception.
            If the config value is null, then the default value will be used.
            The setting should be in the format {Key}:{Value}|{Key}:{Value}
            </summary>
            <typeparam name="T"></typeparam>
            <param name="appSetting">The application setting.</param>
            <param name="key">AppSetting Key attribute value.</param>
            <param name="defaultValue">The default value.</param>
            <param name="info">The settings by which to split the config value.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Common.Config.SubstringByString(System.String,System.String)">
            <summary>
            Returns a the substring after the index of the first occurence of the startstring.
            Example: "012345678910".SubstringByString("2"); returns "345678910"
            </summary>
            <param name="value">The value.</param>
            <param name="startString">The string that marks the start of the substring to be returned.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Common.Config.GetList``1(System.String,System.Collections.Generic.List{``0},DLaB.Common.ConfigValuesSplitInfo)">
            <summary>
            Attempts to read the setting from the config file and Parse to get the value.
            The value from the config if first split by the seperator
            </summary>
            <typeparam name="T"></typeparam>
            <param name="appSetting"></param>
            <param name="defaultValue"></param>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Common.Config.GetList``1(System.String,System.String,DLaB.Common.ConfigValuesSplitInfo)">
            <summary>
            Attempts to read the setting from the config file and Parse to get the value.
            The value from the config if first split by the seperator
            </summary>
            <typeparam name="T"></typeparam>
            <param name="appSetting"></param>
            <param name="defaultValue"></param>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Common.Config.GetList``1(System.String,System.Func{System.Collections.Generic.List{``0}},DLaB.Common.ConfigValuesSplitInfo)">
            <summary>
            Attempts to read the setting from the config file and Parse to get the value.
            The value from the config if first split by the seperator
            </summary>
            <typeparam name="T"></typeparam>
            <param name="appSetting"></param>
            <param name="getDefaultValue"></param>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Common.Config.GetDictionary``2(System.String,System.Func{System.Collections.Generic.Dictionary{``0,``1}},DLaB.Common.ConfigKeyValueSplitInfo)">
            <summary>
            Attempts to read the setting from the config file, and Parse into a Dictionary.
            If the Type doesn't contain a Parse, a cast is attempted.
            Any failure in the Parse will throw an exception.
            If the config value is null, then the default value will be used.
            The default setting should be in the format {Key}:{Value}|{Key}:{Value}
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="appSetting">The application setting.</param>
            <param name="getDefault">Function to get the default value.</param>
            <param name="info">The settings by which to split the config value.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Common.Config.GetDictionary``2(System.String,System.Collections.Generic.Dictionary{``0,``1},DLaB.Common.ConfigKeyValueSplitInfo)">
            <summary>
            Attempts to read the setting from the config file, and Parse into a Dictionary.
            If the Type doesn't contain a Parse, a cast is attempted.
            Any failure in the Parse will throw an exception.
            If the config value is null, then the default value will be used.
            The default setting should be in the format {Key}:{Value}|{Key}:{Value}
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="appSetting">The application setting.</param>
            <param name="defaultValue">The default value.</param>
            <param name="info">The settings by which to split the config value.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Common.Config.GetDictionary``2(System.String,System.String,DLaB.Common.ConfigKeyValueSplitInfo)">
            <summary>
            Attempts to read the setting from the config file, and Parse into a Dictionary.
            If the Type doesn't contain a Parse, a cast is attempted.
            Any failure in the Parse will throw an exception.
            If the config value is null, then the default value will be used.
            The default setting should be in the format {Key}:{Value}|{Key}:{Value}
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="appSetting">The application setting.</param>
            <param name="defaultValue">The default value.</param>
            <param name="info">The settings by which to split the config value.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Common.Config.GetDictionaryList``2(System.String,System.Collections.Generic.Dictionary{``0,System.Collections.Generic.List{``1}},DLaB.Common.ConfigKeyValuesSplitInfo)">
            <summary>
            Attempts to read the setting from the config file, and Parse into a Dictionary.
            If the Type doesn't contain a Parse, a cast is attempted.
            Any failure in the Parse will throw an exception.
            If the config value is null, then the default value will be used.
            The default setting should be in the format {Key}:{Value1},{value2}|{Key}:{Value1}
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="appSetting">The application setting.</param>
            <param name="defaultValue">The default value.</param>
            <param name="info">The settings by which to split the config value.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Common.Config.GetDictionaryList``2(System.String,System.String,DLaB.Common.ConfigKeyValuesSplitInfo)">
            <summary>
            Attempts to read the setting from the config file, and Parse into a Dictionary.
            If the Type doesn't contain a Parse, a cast is attempted.
            Any failure in the Parse will throw an exception.
            If the config value is null, then the default value will be used.
            The default setting should be in the format {Key}:{Value1},{value2}|{Key}:{Value1}
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="appSetting">The application setting.</param>
            <param name="defaultValue">The default value.</param>
            <param name="info">The settings by which to split the config value.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Common.Config.GetDictionaryList``2(System.String,System.Func{System.Collections.Generic.Dictionary{``0,System.Collections.Generic.List{``1}}},DLaB.Common.ConfigKeyValuesSplitInfo)">
            <summary>
            Attempts to read the setting from the config file, and Parse into a Dictionary.
            If the Type doesn't contain a Parse, a cast is attempted.
            Any failure in the Parse will throw an exception.
            If the config value is null, then the default value will be used.
            The default setting should be in the format {Key}:{Value1},{value2}|{Key}:{Value1}
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="appSetting">The application setting.</param>
            <param name="getDefault">Function to get the default value.</param>
            <param name="info">The settings by which to split the config value.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Common.Config.GetDictionaryHash``2(System.String,System.Collections.Generic.Dictionary{``0,System.Collections.Generic.HashSet{``1}},DLaB.Common.ConfigKeyValuesSplitInfo)">
            <summary>
            Attempts to read the setting from the config file, and Parse into a Dictionary.
            If the Type doesn't contain a Parse, a cast is attempted.
            Any failure in the Parse will throw an exception.
            If the config value is null, then the default value will be used.
            The default setting should be in the format {Key}:{Value1},{value2}|{Key}:{Value1}
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="appSetting">The application setting.</param>
            <param name="defaultValue">The default value.</param>
            <param name="info">The settings by which to split the config value.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Common.Config.GetDictionaryHash``2(System.String,System.String,DLaB.Common.ConfigKeyValuesSplitInfo)">
            <summary>
            Attempts to read the setting from the config file, and Parse into a Dictionary.
            If the Type doesn't contain a Parse, a cast is attempted.
            Any failure in the Parse will throw an exception.
            If the config value is null, then the default value will be used.
            The default setting should be in the format {Key}:{Value1},{value2}|{Key}:{Value1}
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="appSetting">The application setting.</param>
            <param name="defaultValue">The default value.</param>
            <param name="info">The settings by which to split the config value.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Common.Config.GetDictionaryHash``2(System.String,System.Func{System.Collections.Generic.Dictionary{``0,System.Collections.Generic.HashSet{``1}}},DLaB.Common.ConfigKeyValuesSplitInfo)">
            <summary>
            Attempts to read the setting from the config file, and Parse into a Dictionary.
            If the Type doesn't contain a Parse, a cast is attempted.
            Any failure in the Parse will throw an exception.
            If the config value is null, then the default value will be used.
            The default setting should be in the format {Key}:{Value1},{value2}|{Key}:{Value1}
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="appSetting">The application setting.</param>
            <param name="getDefault">Function to get the default value.</param>
            <param name="info">The settings by which to split the config value.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Common.Config.GetHashSet``1(System.String,System.Func{System.Collections.Generic.HashSet{``0}},DLaB.Common.ConfigValuesSplitInfo)">
            <summary>
            Config Value must be in the format "Value|Value|Value" by Default
            </summary>
            <typeparam name="T"></typeparam>
            <param name="appSetting">The application setting.</param>
            <param name="getDefault">The get default.</param>
            <param name="info">The information.</param>
            <returns></returns>
            <exception cref="T:System.FormatException"></exception>
        </member>
        <member name="M:DLaB.Common.Config.GetHashSet``1(System.String,System.Collections.Generic.HashSet{``0},DLaB.Common.ConfigValuesSplitInfo)">
            <summary>
            Config Value must be in the format "Value|Value|Value" by Default
            </summary>
            <typeparam name="T"></typeparam>
            <param name="appSetting"></param>
            <param name="defaultValue"></param>
            <param name="info">The settings by which to split the config value.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Common.Config.GetHashSet``1(System.String,System.String,DLaB.Common.ConfigValuesSplitInfo)">
            <summary>
            Config Value must be in the format "Value|Value|Value" by Default
            </summary>
            <typeparam name="T"></typeparam>
            <param name="appSetting"></param>
            <param name="defaultValue"></param>
            <param name="info">The settings by which to split the config value.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Common.Config.ToString``1(System.Collections.Generic.IEnumerable{``0},DLaB.Common.ConfigKeyValueSplitInfo,System.Func{``0,System.String})">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this given list to be stored as a string.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list">The list.</param>
            <param name="info">The information.</param>
            <param name="getString">The get string.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:DLaB.Common.Config.ToString``2(System.Collections.Generic.Dictionary{``0,``1},DLaB.Common.ConfigKeyValueSplitInfo,System.Func{``0,System.String},System.Func{``1,System.String})">
            <summary>
            Returns a <see cref="T:System.String" /> that represents the given dictionary object to be stored as a string
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="info">The information.</param>
            <param name="getKeyString">The get key string.</param>
            <param name="getValueString">The get value string.</param>
            <returns>
            A <see cref="T:System.String" /> that represents the given dictionary object to be stored as a string
            </returns>
        </member>
        <member name="M:DLaB.Common.Config.ToString``2(System.Collections.Generic.Dictionary{``0,System.Collections.Generic.List{``1}},DLaB.Common.ConfigKeyValuesSplitInfo,System.Func{``0,System.String},System.Func{``1,System.String})">
            <summary>
            Returns a <see cref="T:System.String" /> that represents the given dictionary object to be stored as a string
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="info">The information.</param>
            <param name="getKeyString">The get key string.</param>
            <param name="getValueString">The get value string.</param>
            <returns>
            A <see cref="T:System.String" /> that represents the given dictionary object to be stored as a string
            </returns>
        </member>
        <member name="M:DLaB.Common.Config.ToString``2(System.Collections.Generic.Dictionary{``0,System.Collections.Generic.HashSet{``1}},DLaB.Common.ConfigKeyValuesSplitInfo,System.Func{``0,System.String},System.Func{``1,System.String})">
            <summary>
            Returns a <see cref="T:System.String" /> that represents the given dictionary object to be stored as a string
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="info">The information.</param>
            <param name="getKeyString">The get key string.</param>
            <param name="getValueString">The get value string.</param>
            <returns>
            A <see cref="T:System.String" /> that represents the given dictionary object to be stored as a string
            </returns>
        </member>
        <member name="M:DLaB.Common.Config.ToString``1(System.Collections.Generic.HashSet{``0},DLaB.Common.ConfigKeyValueSplitInfo,System.Func{``0,System.String})">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this given hashset to be stored as a string.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="hashset">The hashset.</param>
            <param name="info">The information.</param>
            <param name="getString">The get string.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:DLaB.Common.Config.ToStringSorted``1(System.Collections.Generic.IEnumerable{``0},DLaB.Common.ConfigKeyValueSplitInfo,System.Func{``0,System.String},System.Func{System.Collections.Generic.IEnumerable{System.String},System.Linq.IOrderedEnumerable{System.String}})">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this given list to be stored as a string.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list">The list.</param>
            <param name="info">The information.</param>
            <param name="getString">The get string.</param>
            <param name="sort">The sort function to apply</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:DLaB.Common.Config.ToStringSorted``2(System.Collections.Generic.Dictionary{``0,``1},DLaB.Common.ConfigKeyValueSplitInfo,System.Func{``0,System.String},System.Func{``1,System.String},System.Func{System.Collections.Generic.IEnumerable{System.String},System.Linq.IOrderedEnumerable{System.String}})">
            <summary>
            Returns a <see cref="T:System.String" /> that represents the given dictionary object to be stored as a string
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="info">The information.</param>
            <param name="getKeyString">The get key string.</param>
            <param name="getValueString">The get value string.</param>
            <param name="sort">The sort function to apply</param>
            <returns>
            A <see cref="T:System.String" /> that represents the given dictionary object to be stored as a string
            </returns>
        </member>
        <member name="M:DLaB.Common.Config.ToStringSorted``2(System.Collections.Generic.Dictionary{``0,System.Collections.Generic.List{``1}},DLaB.Common.ConfigKeyValuesSplitInfo,System.Func{``0,System.String},System.Func{``1,System.String},System.Func{System.Collections.Generic.IEnumerable{System.String},System.Linq.IOrderedEnumerable{System.String}})">
            <summary>
            Returns a <see cref="T:System.String" /> that represents the given dictionary object to be stored as a string
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="info">The information.</param>
            <param name="getKeyString">The get key string.</param>
            <param name="getValueString">The get value string.</param>
            <param name="sort">The sort function to apply</param>
            <returns>
            A <see cref="T:System.String" /> that represents the given dictionary object to be stored as a string
            </returns>
        </member>
        <member name="M:DLaB.Common.Config.ToStringSorted``2(System.Collections.Generic.Dictionary{``0,System.Collections.Generic.HashSet{``1}},DLaB.Common.ConfigKeyValuesSplitInfo,System.Func{``0,System.String},System.Func{``1,System.String},System.Func{System.Collections.Generic.IEnumerable{System.String},System.Linq.IOrderedEnumerable{System.String}})">
            <summary>
            Returns a <see cref="T:System.String" /> that represents the given dictionary object to be stored as a string
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="info">The information.</param>
            <param name="getKeyString">The get key string.</param>
            <param name="getValueString">The get value string.</param>
            <param name="sort">The sort function to apply</param>
            <returns>
            A <see cref="T:System.String" /> that represents the given dictionary object to be stored as a string
            </returns>
        </member>
        <member name="M:DLaB.Common.Config.ToStringSorted``1(System.Collections.Generic.HashSet{``0},DLaB.Common.ConfigKeyValueSplitInfo,System.Func{``0,System.String},System.Func{System.Collections.Generic.IEnumerable{System.String},System.Linq.IOrderedEnumerable{System.String}})">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this given hashset to be stored as a string.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="hashset">The hashset.</param>
            <param name="info">The information.</param>
            <param name="getString">The get string.</param>
            <param name="sort">The sort function to apply</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:DLaB.Common.ConfigKeyValueSplitInfo">
            <summary>
            Settings used to control how a Key/Value config setting is parsed.  
            </summary>
        </member>
        <member name="F:DLaB.Common.ConfigKeyValueSplitInfo.KeyValueSeperator">
            <summary>
            The Default Key/Value Seperator
            </summary>
        </member>
        <member name="P:DLaB.Common.ConfigKeyValueSplitInfo.KeyValueSeperators">
            <summary>
            Gets or sets the key value seperators.
            </summary>
            <value>
            The key value seperators.
            </value>
        </member>
        <member name="P:DLaB.Common.ConfigKeyValueSplitInfo.ConvertKeysToLower">
            <summary>
            Gets or sets a value indicating whether [convert keys to lower].
            </summary>
            <value>
              <c>true</c> if [convert keys to lower]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:DLaB.Common.ConfigKeyValueSplitInfo.#ctor">
            <summary>
            Defaults to splitting entries by "|", and Key/values by ":", lower casing the keys.<para />
            For Example:<para />
            - Entry1Key:Entry1Value|Entry2Key:Entry2Value|Entry3Key:Entry3Value|Entry4Key:Entry4Value
            </summary>
        </member>
        <member name="T:DLaB.Common.ConfigKeyValuesSplitInfo">
            <summary>
            Settings used to control how a Key/List&lt;Value&gt; config setting is parsed.  
            </summary>
        </member>
        <member name="F:DLaB.Common.ConfigKeyValuesSplitInfo.EntryValuesSeparator">
            <summary>
            The Default Entry Values Separator
            </summary>
        </member>
        <member name="P:DLaB.Common.ConfigKeyValuesSplitInfo.EntryValuesSeparators">
            <summary>
            Gets or sets the entry values separators.
            </summary>
            <value>
            The entry values separators.
            </value>
        </member>
        <member name="M:DLaB.Common.ConfigKeyValuesSplitInfo.#ctor">
            <summary>
            Defaults to splitting entries by "|", Key/values by ":", and values by ",", lower casing the keys.<para />
            For Example:<para />
            - Entry1Key:Entry1Value|Entry2Key:Entry2Value|Entry3Key:Entry3Value|Entry4Key:Entry4Value
            </summary>
        </member>
        <member name="T:DLaB.Common.ConfigProvider">
            <summary>
            Allows for Injection Custom Config provider.  Defaults to ConfigurationManager.AppSettings
            </summary>
        </member>
        <member name="P:DLaB.Common.ConfigProvider.Instance">
            <summary>
            Gets the instance.
            </summary>
            <value>
            The instance.
            </value>
        </member>
        <member name="M:DLaB.Common.ConfigProvider.InitalizeProvider(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initalizes the provider.
            </summary>
            <param name="appSettings">The application settings.</param>
        </member>
        <member name="T:DLaB.Common.ConfigValuesSplitInfo">
            <summary>
            Settings used to control how a values config setting is parsed.  
            </summary>
        </member>
        <member name="F:DLaB.Common.ConfigValuesSplitInfo.EntrySeparator">
            <summary>
            The Default Entry Separator
            </summary>
        </member>
        <member name="P:DLaB.Common.ConfigValuesSplitInfo.EntrySeparators">
            <summary>
            Gets or sets the Entry separators.
            </summary>
            <value>
            The Entry separators.
            </value>
        </member>
        <member name="P:DLaB.Common.ConfigValuesSplitInfo.ConvertValuesToLower">
            <summary>
            Gets or sets a value indicating whether [convert values to lower].
            </summary>
            <value>
            <c>true</c> if [convert values to lower]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:DLaB.Common.ConfigValuesSplitInfo.#ctor">
            <summary>
            Defaults to splitting entries by "|".<para />
            For Example:<para />
            - Value1Key:Value1Value|Value2Key:Value2Value|Value3Key:Value3Value|Value4Key:Value4Value
            </summary>
        </member>
        <member name="T:DLaB.Common.ConfigValuesStringExtensions">
            <summary>
            Extension Methods to parse Strings
            </summary>
        </member>
        <member name="M:DLaB.Common.ConfigValuesStringExtensions.GetList``1(System.String,DLaB.Common.ConfigValuesSplitInfo)">
            <summary>
            Parses a string into a List of the given type.  Defaults to | as the separator
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Common.ConfigValuesStringExtensions.GetDictionary``2(System.String,DLaB.Common.ConfigKeyValueSplitInfo)">
            <summary>
            Parses a string into a Dictionary of the given type.  Defaults to | as the separator and : as the key value separator
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="config"></param>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Common.ConfigValuesStringExtensions.GetDictionaryList``2(System.String,DLaB.Common.ConfigKeyValuesSplitInfo)">
            <summary>
            Parses a string into a Dictionary of the given type.  Defaults to | as the separator and : as the key value separator and , as the value separator
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="config"></param>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Common.ConfigValuesStringExtensions.GetDictionaryHash``2(System.String,DLaB.Common.ConfigKeyValuesSplitInfo)">
            <summary>
            Parses a string into a Dictionary of the given type.  Defaults to | as the separator and : as the key value separator and , as the value separator
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="config"></param>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Common.ConfigValuesStringExtensions.GetHashSet``1(System.String,DLaB.Common.ConfigValuesSplitInfo)">
            <summary>
            Parses a string into a HashSet of the given type.  Defaults to | as the separator.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="T:DLaB.Common.EncodingUses">
            <summary>
            The different uses of encoding within the DLaB code base.
            </summary>
        </member>
        <member name="F:DLaB.Common.EncodingUses.Base64">
            <summary>
            Used for Base64 conversions
            </summary>
        </member>
        <member name="F:DLaB.Common.EncodingUses.Json">
            <summary>
            Used for JSON conversions
            </summary>
        </member>
        <member name="F:DLaB.Common.EncodingUses.Zip">
            <summary>
            Used for Zipping/Unzipping
            </summary>
        </member>
        <member name="T:DLaB.Common.IDLaBConfig">
            <summary>
            Implement this class to be able to provide config information to be used by the DLaB code base
            </summary>
        </member>
        <member name="M:DLaB.Common.IDLaBConfig.GetJsonSerializerSettings(System.Object,System.Text.Encoding)">
            <summary>
            Defines the DataContactJsonSerializerSettings class to use by default for the SerializeToJson and DeserializeJson extension methods if none is provided
            </summary>
            <param name="textOrValue">The text string when called from DeserializeJson and the value to serialize when called from SerializeToJson.</param>
            <param name="encoding">The encoding, either the passed in value, or the default value if none is given.</param>
        </member>
        <member name="M:DLaB.Common.IDLaBConfig.GetEncoding(DLaB.Common.EncodingUses,System.Object)">
            <summary>
            Defines the Encoding class to use by default for the given extension methods if none is provided
            </summary>
            <param name="use">The current usage of the Encoding.</param>
            <param name="textOrValue">The text string to encode from, or the object to encode to.</param>
        </member>
        <member name="T:DLaB.Common.DLaBConfig">
            <summary>
            Handles loading the DLaBConfig
            </summary>
        </member>
        <member name="P:DLaB.Common.DLaBConfig.Config">
            <summary>
            The Config, lazily loaded getting the first implementation of the interface.
            </summary>
        </member>
        <member name="T:DLaB.Common.Exceptions.DictionaryDuplicateKeyException">
            <summary>
            The exception that is thrown when an attempt is made to add a duplicate key to a dictionary.
            It's primary purpose is to provide a better error message than ArgumentException, An item with the smae key has already been added.
            </summary>
        </member>
        <member name="M:DLaB.Common.Exceptions.DictionaryDuplicateKeyException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DLaB.Common.Exceptions.DictionaryDuplicateKeyException"/> class.
            </summary>
        </member>
        <member name="M:DLaB.Common.Exceptions.DictionaryDuplicateKeyException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DLaB.Common.Exceptions.DictionaryDuplicateKeyException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:DLaB.Common.Exceptions.DictionaryDuplicateKeyException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:DLaB.Common.Exceptions.DictionaryDuplicateKeyException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="M:DLaB.Common.Exceptions.DictionaryDuplicateKeyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:DLaB.Common.Exceptions.DictionaryDuplicateKeyException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <remarks>
            A constructor is needed for serialization when an
            exception propagates from a remoting server to the client.
            </remarks>
        </member>
        <member name="T:DLaB.Common.Exceptions.EnumCaseUndefinedException`1">
            <summary>
            The exception that is thrown when a switch statement has been defined for an Enum, but the actual value has not been defined as a case.
            Example:
            	var c = BindingFlags.GetField;
                try{
                switch (c)
                {
                   case BindingFlags.Default:
                   break;
                   default:
                   throw new EnumCaseUndefinedException&lt;BindingFlags&gt;(c, "Unable to perform reflection operation");
                }
            </summary>
        </member>
        <member name="M:DLaB.Common.Exceptions.EnumCaseUndefinedException`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Exception"/> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error. </param>
        </member>
        <member name="M:DLaB.Common.Exceptions.EnumCaseUndefinedException`1.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Exception"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception. </param><param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. </param>
        </member>
        <member name="M:DLaB.Common.Exceptions.EnumCaseUndefinedException`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:DLaB.Common.Exceptions.EnumCaseUndefinedException`1"/> class.
            </summary>
            <param name="undefinedEnumValue">The undefined enum value.</param>
        </member>
        <member name="M:DLaB.Common.Exceptions.EnumCaseUndefinedException`1.#ctor(`0,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DLaB.Common.Exceptions.EnumCaseUndefinedException`1"/> class.
            </summary>
            <param name="undefinedEnumValue">The undefined enum value.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:DLaB.Common.Exceptions.EnumCaseUndefinedException`1.#ctor(`0,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:DLaB.Common.Exceptions.EnumCaseUndefinedException`1"/> class.
            </summary>
            <param name="undefinedEnumValue">The undefined enum value.</param>
            <param name="inner">The inner exception.</param>
        </member>
        <member name="M:DLaB.Common.Exceptions.EnumCaseUndefinedException`1.#ctor(`0,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:DLaB.Common.Exceptions.EnumCaseUndefinedException`1"/> class.
            </summary>
            <param name="undefinedEnumValue">The undefined enum value.</param>
            <param name="message">The message.</param>
            <param name="inner">The inner exception.</param>
        </member>
        <member name="M:DLaB.Common.Exceptions.EnumCaseUndefinedException`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:DLaB.Common.Exceptions.EnumCaseUndefinedException`1"/> class.
            </summary>
            <param name="undefinedEnumValue">The undefined enum value.</param>
        </member>
        <member name="M:DLaB.Common.Exceptions.EnumCaseUndefinedException`1.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DLaB.Common.Exceptions.EnumCaseUndefinedException`1"/> class.
            </summary>
            <param name="undefinedEnumValue">The undefined enum value.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:DLaB.Common.Exceptions.EnumCaseUndefinedException`1.#ctor(System.Int32,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:DLaB.Common.Exceptions.EnumCaseUndefinedException`1"/> class.
            </summary>
            <param name="undefinedEnumValue">The undefined enum value.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="M:DLaB.Common.Exceptions.EnumCaseUndefinedException`1.#ctor(System.Int32,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:DLaB.Common.Exceptions.EnumCaseUndefinedException`1"/> class.
            </summary>
            <param name="undefinedEnumValue">The undefined enum value.</param>
            <param name="message">The message.</param>
            <param name="inner">The inner exception.</param>
        </member>
        <member name="M:DLaB.Common.Exceptions.EnumCaseUndefinedException`1.GetMessage(System.Int32,System.String)">
            <summary>
            Gets the message.
            </summary>
            <param name="undefinedEnumValue">The undefined enum value.</param>
            <param name="message">The message.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Common.Exceptions.EnumCaseUndefinedException`1.GetMessage(`0,System.String)">
            <summary>
            Gets the message.
            </summary>
            <param name="undefinedEnumValue">The undefined enum value.</param>
            <param name="message">The message.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Common.Exceptions.EnumCaseUndefinedException`1.FormatMessage(System.String,System.Type,`0,System.Int32)">
            <summary>
            Formats the message.
            </summary>
            <param name="message">The message.</param>
            <param name="enumType">Type of the enum.</param>
            <param name="undefinedEnumValue">The undefined enum value.</param>
            <param name="undefinedEnumIntValue">The undefined enum int value.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Common.Exceptions.EnumCaseUndefinedException`1.IsEnum(System.Type,System.String@)">
            <summary>
            Determines whether the specified enum type is enum.
            </summary>
            <param name="enumType">Type of the enum.</param>
            <param name="message">The message.</param>
            <returns></returns>
        </member>
        <member name="T:DLaB.Common.Exceptions.TypeArgumentException">
            <summary>
            Exception thrown to indicate that an inappropriate type argument was used for
            a type parameter to a generic type or method.
            </summary>
        </member>
        <member name="M:DLaB.Common.Exceptions.TypeArgumentException.#ctor">
            <summary>
            Constructs a new instance of TypeArgumentException with no message.
            </summary>
        </member>
        <member name="M:DLaB.Common.Exceptions.TypeArgumentException.#ctor(System.String)">
            <summary>
            Constructs a new instance of TypeArgumentException with the given message.
            </summary>
            <param name="message">Message for the exception.</param>
        </member>
        <member name="M:DLaB.Common.Exceptions.TypeArgumentException.#ctor(System.String,System.Object[])">
            <summary>
            Constructs a new instance of TypeArgumentException with the given message.
            </summary>
            <param name="messageFormat">Message Format for the exception.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="M:DLaB.Common.Exceptions.TypeArgumentException.#ctor(System.String,System.Exception)">
            <summary>
            Constructs a new instance of TypeArgumentException with the given message and inner exception.
            </summary>
            <param name="message">Message for the exception.</param>
            <param name="inner">Inner exception.</param>
        </member>
        <member name="M:DLaB.Common.Exceptions.TypeArgumentException.#ctor(System.String,System.Exception,System.Object[])">
            <summary>
            Constructs a new instance of TypeArgumentException with the given message and inner exception.
            </summary>
            <param name="messageFormat">Message Format for the exception.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
            <param name="inner">Inner exception.</param>
        </member>
        <member name="M:DLaB.Common.Exceptions.TypeArgumentException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor provided for serialization purposes.
            </summary>
            <param name="info">Serialization information</param>
            <param name="context">Context</param>
        </member>
        <member name="T:DLaB.Common.Extensions">
            <summary>
            Extension Class
            </summary>
        </member>
        <member name="M:DLaB.Common.Extensions.Unzip(System.Byte[],System.Text.Encoding)">
            <summary>
            Unzips the specified zipped bytes using an in-memory GZipStream.
            </summary>
            <param name="zippedBytes">The zipped bytes to unzip.</param>
            <param name="encoding">The Encoding to use to parse the bytes.  Defaults to UTF8.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Common.Extensions.Zip(System.Byte[])">
            <summary>
            Zips the specified bytes using an in-memory GZipStream.
            </summary>
            <param name="bytes">The bytes.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Common.Extensions.ToConcurrentDictionary``2(System.Collections.Generic.IEnumerable{``1},System.Func{``1,``0})">
            <summary>
            Creates a concurrent dictionary from the source.
            </summary>
            <typeparam name="TKey">The Type of the key.</typeparam>
            <typeparam name="TElement">The Type of the element.</typeparam>
            <param name="source">The source.</param>
            <param name="keySelector">The key selector.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Common.Extensions.ToConcurrentDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
            <summary>
            Creates a concurrent dictionary list from the source.
            </summary>
            <typeparam name="TSource">The Type of the source.</typeparam>
            <typeparam name="TKey">The Type of the key.</typeparam>
            <typeparam name="TElement">The Type of the element.</typeparam>
            <param name="source">The source.</param>
            <param name="keySelector">The key selector.</param>
            <param name="elementSelector">The element selector.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Common.Extensions.ToConcurrentDictionaryList``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Creates a concurrent dictionary list from the source.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="source">The source.</param>
            <param name="keySelector">The key selector.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Common.Extensions.ToConcurrentDictionaryList``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
            <summary>
            Creates a concurrent dictionary list from the source.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TElement">The type of the element.</typeparam>
            <param name="source">The source.</param>
            <param name="keySelector">The key selector.</param>
            <param name="elementSelector">The element selector.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Common.Extensions.GetOrAddSafe``2(System.Collections.Concurrent.ConcurrentDictionary{``0,``1},System.Object,``0,System.Func{``0,``1})">
            <summary>
            Ensures that the value Factory Delegate only gets ran once.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TElement"></typeparam>
            <param name="source"></param>
            <param name="lockObj">An object to serve as the lock in a "Double-checked" lock if the value needs
            to be added to the dictionary</param>
            <param name="key"></param>
            <param name="valueFactory"></param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Common.Extensions.EnqueueRange``1(System.Collections.Concurrent.ConcurrentQueue{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds the range of items to the end of the queue.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="queue"></param>
            <param name="range"></param>
        </member>
        <member name="M:DLaB.Common.Extensions.AsUtc(System.DateTime)">
            <summary>
            recreates a new instance of the given date time, specified to be UTC
            </summary>
        </member>
        <member name="M:DLaB.Common.Extensions.AsUtc(System.Nullable{System.DateTime})">
            <summary>
            recreates a new instance of the given date time, specified to be UTC
            </summary>
        </member>
        <member name="M:DLaB.Common.Extensions.IsBetween(System.DateTime,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Inclusive IsBetween Check, using DefaultValue for Null
            </summary>
        </member>
        <member name="M:DLaB.Common.Extensions.Add``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1,System.Func{System.String})">
            <summary>
            Extension overload of Dictionary.Add to throw a more context specific exception message based on the key
            </summary>
            <typeparam name="TKey">The type of the keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of the values in the dictionary.</typeparam>
            <param name="source"></param>
            <param name="key">The key of the element To add.</param>
            <param name="value">The value of the element to add.  The value can be null for reference types.</param>
            <param name="getDupKeyErrorMessage">Delegate function used to populate the message property of the exception
            generated when an element is added to the dictionary whose key already exists.</param>
        </member>
        <member name="M:DLaB.Common.Extensions.ToDictionaryList``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Creates a dictionary list from the source.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="source">The source.</param>
            <param name="keySelector">The key selector.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Common.Extensions.ToDictionaryList``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
            <summary>
            Creates a dictionary list from the source.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TElement">The type of the element.</typeparam>
            <param name="source">The source.</param>
            <param name="keySelector">The key selector.</param>
            <param name="elementSelector">The element selector.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Common.Extensions.GetValue``2(System.Collections.Generic.Dictionary{``0,``1},``0)">
            <summary>
            Performs a try catch on the dictionary for the key, returning the found value, or the defaultValue if not found
            </summary>
            <typeparam name="TKey">Type of the Key in the Dictionary</typeparam>
            <typeparam name="TValue">Type of the Value in the Dictionary</typeparam>
            <param name="source"></param>
            <param name="key">The Key to look for</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Common.Extensions.GetValue``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1)">
            <summary>
            Performs a try catch on the dictionary for the key, returning the found value, or the defaultValue if not found
            </summary>
            <typeparam name="TKey">Type of the Key in the Dictionary</typeparam>
            <typeparam name="TValue">Type of the Value in the Dictionary</typeparam>
            <param name="source"></param>
            <param name="key">The Key to look for</param>
            <param name="defaultValue">The default value to return</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Common.Extensions.AddOrAppend``2(System.Collections.Generic.Dictionary{``0,System.Collections.Generic.HashSet{``1}},``0,``1)">
            <summary>
            Looks up the list for the given key, adding the value if the list is found, or creating a new list and adding
            the value to that list if the list is not found.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dict"></param>
            <param name="key">The key value to lookup and add the value to the list of</param>
            <param name="value">Value to add to the list</param>
        </member>
        <member name="M:DLaB.Common.Extensions.AddOrAppend``2(System.Collections.Generic.Dictionary{``0,System.Collections.Generic.HashSet{``1}},``0,``1[])">
            <summary>
            Looks up the list for the given key, adding the value if the list is found, or creating a new list and adding
            the value to that list if the list is not found.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dict"></param>
            <param name="key">The key value to lookup and add the value to the list of</param>
            <param name="value">Values to add to the list</param>
        </member>
        <member name="M:DLaB.Common.Extensions.AddOrAppend``2(System.Collections.Generic.Dictionary{``0,System.Collections.Generic.List{``1}},``0,``1)">
            <summary>
            Looks up the list for the given key, adding the value if the list is found, or creating a new list and adding
            the value to that list if the list is not found.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dict"></param>
            <param name="key">The key value to lookup and add the value to the list of</param>
            <param name="value">Value to add to the list</param>
        </member>
        <member name="M:DLaB.Common.Extensions.AddOrAppend``2(System.Collections.Generic.Dictionary{``0,System.Collections.Generic.List{``1}},``0,``1[])">
            <summary>
            Looks up the list for the given key, adding the value if the list is found, or creating a new list and adding
            the value to that list if the list is not found.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dict"></param>
            <param name="key">The key value to lookup and add the value to the list of</param>
            <param name="value">Values to add to the list</param>
        </member>
        <member name="M:DLaB.Common.Extensions.ToStringWithCallStack(System.Exception)">
            <summary>
            Checks the ToString results of the Exception and adds the stack trace if it isn't there
            </summary>
            <returns></returns>
        </member>
        <member name="M:DLaB.Common.Extensions.GetLowerCasePropertyName``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Gets the name of the lower case property.
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TProperty"></typeparam>
            <param name="exp">The exp.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Common.Extensions.DoesNotContain``1(System.Collections.Generic.ICollection{``0},``0)">
            <summary>
            Equivalent to !collection.Contains().  Purely for readability, especially if you have a negative collection ie. 
            if(status != null &amp;&amp; !notToCalcStatuses.Contains(status)) vs if(status != null &amp;&amp; notToCalcStatuses.DoesNotContain(status))
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collection"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Common.Extensions.ToCsv(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Joins the items in the list to create a csv using string.Join(", ", items)
            </summary>
            <param name="items">The items.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Common.Extensions.Batch``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Converts an IEnumerable into Batches
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collection">The collection.</param>
            <param name="batchSize">Size of the batch.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Common.Extensions.DistinctBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Allows a Key Selector to be used to create a HashSet and perform a Distinct without creating an Equality Comparer
            See http://stackoverflow.com/questions/1300088/distinct-with-lambda
            
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <param name="source"></param>
            <param name="keySelector"></param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Common.Extensions.IterateAndTrackExceptions``1(System.Collections.Generic.IEnumerable{``0},System.Text.StringBuilder,System.Action{``0})">
            <summary>
            Executes the given action against every item in the IEnumerable.  Any Exceptions are grouped by Exception Type
            and the first exception of each type is written to the StringBuilder along with the number of exceptions of that type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="items">Items to iterate over performing the action on</param>
            <param name="sb"></param>
            <param name="action">Action to perform on each item</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Common.Extensions.IterateAndDelegateExceptionHandling``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0},System.Action{``0,System.Exception})">
            <summary>
            Executes the given action against every item in the IEnumerable.  Any Exceptions are grouped by Exception Type
            and the first exception of each type is written to the StringBuilder along with the number of exceptions of that type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="items">Items to iterate over performing the action on</param>
            <param name="action">Action to perform on each item</param>
            <param name="exceptionHandler">Contains the item that caused the exception, and the exception</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Common.Extensions.ToObjectArray``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Creates an object array from the values.
            </summary>
            <typeparam name="T">The type of the array</typeparam>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Common.Extensions.BatchLessThanMaxLength(System.Collections.Generic.IEnumerable{System.String},System.Int32,System.String,System.Int32)">
            <summary>
            Batches the values into batches with the maximum length less than the max.  Useful when executing a command line that can only be a certain length, but there are a large number of arguments to potentially adds.
            </summary>
            <param name="values">The values.</param>
            <param name="maxLength">The maximum length, with the optional additional padding for each value.</param>
            <param name="errorFormat">The error format {0} is the value, {1} is the Max Length.</param>
            <param name="padding">The padding.</param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:DLaB.Common.Extensions.In``1(``0,``0[])">
            <summary>
            Checks whether the current value is in the list of values.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">The value.</param>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Common.Extensions.In``1(``0,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Checks whether the current value is in the list of values.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">The value.</param>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Common.Extensions.Serialize(System.Runtime.Serialization.IExtensibleDataObject,System.Boolean)">
            <summary>
            Serializes the specified obj, returning it's xml serialized value.
            </summary>
            <param name="obj">The obj.</param>
            <param name="indent"></param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Common.Extensions.ContainsCustomAttributeTypes(System.Reflection.MemberInfo,System.Type[])">
            <summary>
            Determines whether the Member Info contains all the specified custom attribute types.
            </summary>
            <param name="property">The property.</param>
            <param name="attributes">The attributes.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Common.Extensions.ThrowIfNull(System.Object,System.String)">
            <summary>
            Shortcut for throwing an ArgumentNullException
            </summary>
            <param name="data">The data.</param>
            <param name="name">The name.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:DLaB.Common.Extensions.EnqueueRange``1(System.Collections.Generic.Queue{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds the range of items to the end of the queue.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="queue"></param>
            <param name="range"></param>
        </member>
        <member name="M:DLaB.Common.Extensions.Contains(System.String,System.String,System.StringComparison)">
            <summary>
            Determines whether current string contains the specified value.
            </summary>
            <param name="source">The source.</param>
            <param name="value">The value.</param>
            <param name="comparisonType">Type of the comparison.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Common.Extensions.ContainsIgnoreCase(System.String,System.String)">
            <summary>
            Determines whether current string contains the specified value, ignoring case.
            </summary>
            <param name="source">The source.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Common.Extensions.DeserializeJson``1(System.String,System.Runtime.Serialization.Json.DataContractJsonSerializerSettings,System.Text.Encoding)">
            <summary>
            Deserializes the json.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="text">The text.</param>
            <param name="settings">The settings.</param>
            <param name="encoding">The encoding.  Defaults to Encoding.UTF8.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">text</exception>
        </member>
        <member name="M:DLaB.Common.Extensions.FromBase64(System.String,System.Text.Encoding)">
            <summary>
            Converts a string that is a base64 (UTF8 by default) encoded string.
            </summary>
            <param name="text">The text.</param>
            <param name="encoding">Default to UTF8</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Common.Extensions.Limit(System.String,System.Int32)">
            <summary>
            Limits the string to the specified maximum length.  All characters beyond the max are removed.
            </summary>
            <param name="source">The source.</param>
            <param name="maxLength">The maximum length.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Common.Extensions.ParseOrConvertString``1(System.String)">
            <summary>
            Parses or Convert the string into the give "T" type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="strValue">The string value.</param>
            <returns></returns>
            <exception cref="T:System.FormatException"></exception>
        </member>
        <member name="M:DLaB.Common.Extensions.ToSingleItemList(System.String)">
            <summary>
            Converts String to a Single Item List
            </summary>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Common.Extensions.NotIn(System.String,System.Object[])">
            <summary>
            Returns true if no parameters in the params array are equal to the value.
            </summary>
            <param name="value">The value.</param>
            <param name="values">Parameter values to search.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Common.Extensions.In(System.String,System.Object[])">
            <summary>
            Returns true if a  parameter in the params array is equal to the value.
            </summary>
            <param name="value">The value.</param>
            <param name="values">Parameter values to search.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Common.Extensions.NotIn(System.String,System.String[])">
            <summary>
            Returns true if no parameters in the params array are equal to the value.
            </summary>
            <param name="value">The value.</param>
            <param name="values">Parameter values to search.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Common.Extensions.In(System.String,System.String[])">
            <summary>
            Returns true if a parameter in the params array is equal to the value.
            </summary>
            <param name="value">The value.</param>
            <param name="values">Parameter values to search.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Common.Extensions.NotIn(System.String,System.StringComparison,System.Object[])">
            <summary>
            Returns true if no parameters in the params array are equal to the value.
            </summary>
            <param name="value">The value.</param>
            <param name="comparison">The comparison.</param>
            <param name="values">Parameter values to search.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Common.Extensions.In(System.String,System.StringComparison,System.Object[])">
            <summary>
            Returns true if a parameter in the params array is equal to the value.
            </summary>
            <param name="value">The value.</param>
            <param name="comparison">The comparison.</param>
            <param name="values">Parameter values to search.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Common.Extensions.NotIn(System.String,System.StringComparison,System.String[])">
            <summary>
            Returns true if no parameters in the params array are equal to the value.
            </summary>
            <param name="value">The value.</param>
            <param name="comparison">The comparison.</param>
            <param name="values">Parameter values to search.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Common.Extensions.In(System.String,System.StringComparison,System.String[])">
            <summary>
            Returns true if a parameter in the params array is equal to the value.
            </summary>
            <param name="value">The value.</param>
            <param name="comparison">The comparison.</param>
            <param name="values">Parameter values to search.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Common.Extensions.ParseInt(System.String)">
            <summary>
            Nullable int parse
            </summary>
            <param name="stringInt">The string int.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Common.Extensions.SubstringByString(System.String,System.String,System.StringComparison)">
            <summary>
            Returns a the substring after the index of the first occurence of the startString.
            Example: "012345678910".SubstringByString("2"); returns "345678910"
            </summary>
            <param name="value">The value.</param>
            <param name="startString">The string that marks the start of the substring to be returned.</param>
            <param name="comparison">The comparison method for finding the index of the endString.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Common.Extensions.SubstringByString(System.String,System.String,System.String,System.StringComparison)">
            <summary>
            Returns a the substring after the index of the first occurence of the startString and ending before the first instance of the end string.
            Example: "012345678910".SubstringByString("2", "8"); returns "34567"
            </summary>
            <param name="value">The value.</param>
            <param name="startString">The string that marks the start of the substring to be returned.</param>
            <param name="endString">The string that marks the end of the substring to be returned.</param>
            <param name="comparison">The comparison method for finding the index of the endString.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Common.Extensions.SubstringByString(System.String,System.String,System.String,System.Int32@,System.StringComparison)">
            <summary>
            Returns a the substring after the index of the first occurence of the startString and ending before the first instance of the endString.
            Example: "012345678910".SubstringByString("2", "8"); returns "34567"
            </summary>
            <param name="value">The value.</param>
            <param name="startString">The string that marks the start of the substring to be returned.</param>
            <param name="endString">The string that marks the end of the substring to be returned.</param>
            <param name="endIndex">The end index of the endString.  Returns -1 if endString is not found.</param>
            <param name="comparison">The comparison method for finding the index of the endString.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Common.Extensions.SubstringByString(System.String,System.Int32,System.String,System.StringComparison)">
            <summary>
            Returns a the substring starting with the index of the startIndex and ending before the first instance of the end string.
            Example: "012345678910".SubstringByString("2", "8"); returns "34567"
            </summary>
            <param name="value">The value.</param>
            <param name="startIndex">The start index of the substring.</param>
            <param name="endString">The string that marks the end of the substring to be returned.</param>
            <param name="comparison">The comparison method for finding the index of the endString.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Common.Extensions.SubstringByString(System.String,System.Int32,System.String,System.Int32@,System.StringComparison)">
            <summary>
            Returns a the substring starting with the index of the startIndex and ending before the first instance of the end string.
            Example: "012345678910".SubstringByString("2", "8"); returns "34567"
            </summary>
            <param name="value">The value.</param>
            <param name="startIndex">The start index of the substring.</param>
            <param name="endString">The string that marks the end of the substring to be returned.</param>
            <param name="endIndex">The end index of the endString.  Returns -1 if endString is not found.</param>
            <param name="comparison">The comparison method for finding the index of the endString.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Common.Extensions.SubstringAllByString(System.String,System.String,System.String,System.StringComparison,System.StringSplitOptions)">
            <summary>
            Loops through the string, retrieving sub strings for the values.  i.e. "_1_2_".SubstringAllByString("_","_") would return a list containing two items, "1" and "2"
            </summary>
            <param name="value">The value.</param>
            <param name="startString">The start string.</param>
            <param name="endString">The end string.</param>
            <param name="comparison">The comparison.</param>
            <param name="splitOptions">The split options.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Common.Extensions.SpaceOutCamelCase(System.String)">
            <summary>
            Inserts spaces before capital letters.  
            If more than two capital letters are in sequence, only the first letter will have a space pre appended
            examples:
            HelloWorld --> Hello World
            HelloWorldXML --> Hello World XML
            HelloAWorld --> Hello A World
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Common.Extensions.ToBase64(System.String,System.Text.Encoding,System.Boolean)">
            <summary>
            Converts a string to a base64 (UTF8 by default) encoded string.
            </summary>
            <param name="text">The text.</param>
            <param name="encoding">Default to UTF8</param>
            <param name="includePreamble">if set to <c>true</c> [include preamble] else don't.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Common.Extensions.Zip(System.String,System.Text.Encoding)">
            <summary>
            Zips the specified text using an in-memory GZipStream.
            </summary>
            <param name="text">The text to be Zipped.</param>
            <param name="encoding">The Encoding to be used.  Defaults to ASCII</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Common.Extensions.AppendLogLine(System.Text.StringBuilder,System.String)">
            <summary>
            Adds the current time "HH:MM:ss.fff - "  to the message, and appends a newline at the end
            </summary>
            <param name="sb"></param>
            <param name="message"></param>
        </member>
        <member name="M:DLaB.Common.Extensions.AppendLogLine(System.Text.StringBuilder,System.String,System.Object[])">
            <summary>
            Adds the current time "HH:MM:ss.fff - "  to the message, and appends a newline at the end.
            Also calls String.Format on the message and appends an Environment.NewLine to the end of the args array
            </summary>
            <param name="sb"></param>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:DLaB.Common.Extensions.GetClassAttribute``1(System.Type)">
            <summary>
            Gets the class level attribute based on type.
            </summary>
            <remarks>Taken from https://stackoverflow.com/questions/2656189/how-do-i-read-an-attribute-on-a-class-at-runtime </remarks>
            <typeparam name="TAttribute"></typeparam>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Common.Extensions.GetFirstImplementation(System.Type,System.Reflection.Assembly,System.Boolean)">
            <summary>
            Searches the current assembly for the first (defaults to public) class that implements the interface
            </summary>
            <param name="interfaceType">The Interface Type.</param>
            <param name="assembly">The Assembly to search, defaults to the Assembly of the given type.</param>
            <param name="forceIsPublic">If true only searches public Types.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Common.Extensions.SerializeToJson``1(``0,System.Runtime.Serialization.Json.DataContractJsonSerializerSettings,System.Text.Encoding)">
            <summary>
            Serializes the value to a json string.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">The Value to serialize to JSON</param>
            <param name="settings">The settings.</param>
            <param name="encoding">The encoding.  Defaults to Encoding.UTF8</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">text</exception>
        </member>
        <member name="T:DLaB.Common.ProcessExecutor">
            <summary>
            Executes Command Line calls, redirecting output to Console
            </summary>
        </member>
        <member name="M:DLaB.Common.ProcessExecutor.ExecuteCmd(System.String,System.String)">
            <summary>
            Executes the command.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="arguments">The arguments.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Common.ProcessExecutor.ExecuteCmd(DLaB.Common.ProcessExecutorInfo)">
            <summary>
            Executes the command.
            </summary>
            <param name="info">The information.</param>
            <returns></returns>
        </member>
        <member name="T:DLaB.Common.ProcessExecutorInfo">
            <summary>
            Settings to override default
            </summary>
        </member>
        <member name="P:DLaB.Common.ProcessExecutorInfo.Verb">
            <summary>Gets or sets the verb to use when opening the application or document specified by the <see cref="P:System.Diagnostics.ProcessStartInfo.FileName" /> property.</summary>
            <returns>The action to take with the file that the process opens. The default is an empty string (""), which signifies no action.</returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:DLaB.Common.ProcessExecutorInfo.Arguments">
            <summary>Gets or sets the set of command-line arguments to use when starting the application.</summary>
            <returns>A single string containing the arguments to pass to the target application specified in the <see cref="P:System.Diagnostics.ProcessStartInfo.FileName" /> property. The default is an empty string (""). On Windows Vista and earlier versions of the Windows operating system, the length of the arguments added to the length of the full path to the process must be less than 2080. On Windows 7 and later versions, the length must be less than 32699.Arguments are parsed and interpreted by the target application, so must align with the expectations of that application. For.NET applications as demonstrated in the Examples below, spaces are interpreted as a separator between multiple arguments. A single argument that includes spaces must be surrounded by quotation marks, but those quotation marks are not carried through to the target application. In include quotation marks in the final parsed argument, triple-escape each mark.</returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="P:DLaB.Common.ProcessExecutorInfo.CreateNoWindow">
            <summary>Gets or sets a value indicating whether to start the process in a new window.</summary>
            <returns>true if the process should be started without creating a new window to contain it; otherwise, false. The default is false.</returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:DLaB.Common.ProcessExecutorInfo.EnvironmentVariables">
            <summary>Gets search paths for files, directories for temporary files, application-specific options, and other similar information.</summary>
            <returns>A string dictionary that provides environment variables that apply to this process and child processes. The default is null.</returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="P:DLaB.Common.ProcessExecutorInfo.OnErrorReceived">
            <summary>
            Action to execute when any errors occur
            </summary>
            <value>
            The on error.
            </value>
        </member>
        <member name="P:DLaB.Common.ProcessExecutorInfo.OnOutputReceived">
            <summary>
            Action to execute when any output occur
            </summary>
            <value>
            The on error.
            </value>
        </member>
        <member name="P:DLaB.Common.ProcessExecutorInfo.RedirectStandardInput">
            <summary>Gets or sets a value indicating whether the input for an application is read from the <see cref="P:System.Diagnostics.Process.StandardInput" /> stream.</summary>
            <returns>true if input should be read from <see cref="P:System.Diagnostics.Process.StandardInput" />; otherwise, false. The default is false.</returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:DLaB.Common.ProcessExecutorInfo.RedirectStandardOutput">
            <summary>Gets or sets a value that indicates whether the textual output of an application is written to the <see cref="P:System.Diagnostics.Process.StandardOutput" /> stream.</summary>
            <returns>true if output should be written to <see cref="P:System.Diagnostics.Process.StandardOutput" />; otherwise, false. The default is false.</returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:DLaB.Common.ProcessExecutorInfo.RedirectStandardError">
            <summary>Gets or sets a value that indicates whether the error output of an application is written to the <see cref="P:System.Diagnostics.Process.StandardError" /> stream.</summary>
            <returns>true if error output should be written to <see cref="P:System.Diagnostics.Process.StandardError" />; otherwise, false. The default is false.</returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:DLaB.Common.ProcessExecutorInfo.StandardErrorEncoding">
            <summary>Gets or sets the preferred encoding for error output.</summary>
            <returns>An object that represents the preferred encoding for error output. The default is null.</returns>
        </member>
        <member name="P:DLaB.Common.ProcessExecutorInfo.StandardOutputEncoding">
            <summary>Gets or sets the preferred encoding for standard output.</summary>
            <returns>An object that represents the preferred encoding for standard output. The default is null.</returns>
        </member>
        <member name="P:DLaB.Common.ProcessExecutorInfo.UseShellExecute">
            <summary>Gets or sets a value indicating whether to use the operating system shell to start the process.</summary>
            <returns>true if the shell should be used when starting the process; false if the process should be created directly from the executable file. The default is true.</returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:DLaB.Common.ProcessExecutorInfo.UserName">
            <summary>Gets or sets the user name to be used when starting the process.</summary>
            <returns>The user name to use when starting the process.</returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="P:DLaB.Common.ProcessExecutorInfo.Password">
            <summary>Gets or sets a secure string that contains the user password to use when starting the process.</summary>
            <returns>The user password to use when starting the process.</returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="P:DLaB.Common.ProcessExecutorInfo.PasswordInClearText">
            <summary>Gets or sets the user password in clear text to use when starting the process.</summary>
            <returns>The user password in clear text.</returns>
        </member>
        <member name="P:DLaB.Common.ProcessExecutorInfo.Domain">
            <summary>Gets or sets a value that identifies the domain to use when starting the process. </summary>
            <returns>The Active Directory domain to use when starting the process. The domain property is primarily of interest to users within enterprise environments that use Active Directory.</returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="P:DLaB.Common.ProcessExecutorInfo.LoadUserProfile">
            <summary>Gets or sets a value that indicates whether the Windows user profile is to be loaded from the registry. </summary>
            <returns>true if the Windows user profile should be loaded; otherwise, false. The default is false.</returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="P:DLaB.Common.ProcessExecutorInfo.FileName">
            <summary>Gets or sets the application or document to start.</summary>
            <returns>The name of the application to start, or the name of a document of a file type that is associated with an application and that has a default open action available to it. The default is an empty string ("").</returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="P:DLaB.Common.ProcessExecutorInfo.WorkingDirectory">
            <summary>When the <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /> property is false, gets or sets the working directory for the process to be started. When <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /> is true, gets or sets the directory that contains the process to be started.</summary>
            <returns>When <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /> is true, the fully qualified name of the directory that contains the process to be started. When the <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /> property is false, the working directory for the process to be started. The default is an empty string ("").</returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="P:DLaB.Common.ProcessExecutorInfo.ErrorDialog">
            <summary>Gets or sets a value indicating whether an error dialog box is displayed to the user if the process cannot be started.</summary>
            <returns>true if an error dialog box should be displayed on the screen if the process cannot be started; otherwise, false. The default is false.</returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:DLaB.Common.ProcessExecutorInfo.ErrorDialogParentHandle">
            <summary>Gets or sets the window handle to use when an error dialog box is shown for a process that cannot be started.</summary>
            <returns>A pointer to the handle of the error dialog box that results from a process start failure.</returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:DLaB.Common.ProcessExecutorInfo.WindowStyle">
            <summary>Gets or sets the window state to use when the process is started.</summary>
            <returns>One of the enumeration values that indicates whether the process is started in a window that is maximized, minimized, normal (neither maximized nor minimized), or not visible. The default is Normal.</returns>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">The window style is not one of the <see cref="T:System.Diagnostics.ProcessWindowStyle" /> enumeration members. </exception>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:DLaB.Common.ProcessExecutorInfo.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DLaB.Common.ProcessExecutorInfo" /> class.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="arguments">The arguments.</param>
        </member>
        <member name="M:DLaB.Common.ProcessExecutorInfo.GetStartInfo">
            <summary>
            Gets the start information.
            </summary>
            <returns></returns>
        </member>
        <member name="T:DLaB.Common.TypeSafeEnumBase`1">
            <summary>
            Base class to Create Enums that are typed to something besides int, and allowed to be exapnded by other code bases
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:DLaB.Common.TypeSafeEnumBase`1.Name">
            <summary>
            The text name of the Enum.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:DLaB.Common.TypeSafeEnumBase`1.Value">
            <summary>
            The value of the Enum.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="M:DLaB.Common.TypeSafeEnumBase`1.#ctor(System.String,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:DLaB.Common.TypeSafeEnumBase`1"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:DLaB.Common.TypeSafeEnumBase`1.op_Implicit(DLaB.Common.TypeSafeEnumBase{`0})~`0">
            <summary>
            Performs an implicit conversion from <see cref="T:DLaB.Common.TypeSafeEnumBase`1"/> to the given type T.
            </summary>
            <param name="t">The t.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:DLaB.Common.TypeSafeEnumBase`1.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:DLaB.Common.VersionControl.ISourceControlProvider">
            <summary>
            Source Control Provider for Interacting with Source Control Versioning
            </summary>
        </member>
        <member name="M:DLaB.Common.VersionControl.ISourceControlProvider.Add(System.String)">
            <summary>
            Adds the file to be added to source control.
            </summary>
            <param name="filePath">The file path.</param>
        </member>
        <member name="M:DLaB.Common.VersionControl.ISourceControlProvider.Checkout(System.String[])">
            <summary>
            Checks the files out.  Returns the output text.
            </summary>
            <param name="fileNames">The file paths.</param>
        </member>
        <member name="M:DLaB.Common.VersionControl.ISourceControlProvider.UndoCheckoutIfUnchanged(System.String)">
            <summary>
            Returns true if the file was unchanged and an undo operation was performed
            </summary>
            <param name="filePath"></param>
        </member>
        <member name="M:DLaB.Common.VersionControl.ISourceControlProvider.CheckoutAndUpdateIfDifferent(System.String,System.String)">
            <summary>
            Returns true if the file was unchanged and so it was checked out
            </summary>
            <param name="filePath">The file path.</param>
            <param name="contents">The contents.</param>
            <returns></returns>
        </member>
        <member name="T:DLaB.Common.VersionControl.NoSourceControlProvider">
            <summary>
            Source Control Provider for Interacting with Source Control Versioning
            </summary>
        </member>
        <member name="M:DLaB.Common.VersionControl.NoSourceControlProvider.Add(System.String)">
            <summary>
            Adds the file to be added to source control.
            </summary>
            <param name="filePath">The file path.</param>
        </member>
        <member name="M:DLaB.Common.VersionControl.NoSourceControlProvider.Checkout(System.String[])">
            <summary>
            Checks the files out.  Returns the output text.
            </summary>
            <param name="fileNames">The file paths.</param>
        </member>
        <member name="M:DLaB.Common.VersionControl.NoSourceControlProvider.UndoCheckoutIfUnchanged(System.String)">
            <summary>
            Returns true if the file was unchanged and an undo operation was performed
            </summary>
            <param name="filePath"></param>
        </member>
        <member name="M:DLaB.Common.VersionControl.NoSourceControlProvider.CheckoutAndUpdateIfDifferent(System.String,System.String)">
            <summary>
            Returns true if the file was unchanged and so it was checked out
            </summary>
            <param name="filePath">The file path.</param>
            <param name="contents">The contents.</param>
            <returns></returns>
        </member>
        <member name="T:DLaB.Common.VersionControl.SourceControl">
            <summary>
            Helper Class to Checkout/Checking text to a Version Contorl System
            </summary>
        </member>
        <member name="M:DLaB.Common.VersionControl.SourceControl.SetProvider(DLaB.Common.VersionControl.ISourceControlProvider)">
            <summary>
            Sets the provider.
            </summary>
            <param name="provider">The provider.</param>
        </member>
        <member name="M:DLaB.Common.VersionControl.SourceControl.CheckoutAndUpdateFileIfDifferent(System.String,System.String)">
            <summary>
            Checkouts the and update file if different.
            </summary>
            <param name="filePath">The file path.</param>
            <param name="contents">The contents.</param>
            <exception cref="T:System.ArgumentException">File Path cannot contain a directory that is null or empty!</exception>
        </member>
        <member name="T:DLaB.Common.VersionControl.VsTfsSourceControlProvider">
            <summary>
            Class to handle Checkingout from TFS
            </summary>
        </member>
        <member name="M:DLaB.Common.VersionControl.VsTfsSourceControlProvider.#ctor(System.String,DLaB.Common.ProcessExecutorInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:DLaB.Common.VersionControl.VsTfsSourceControlProvider" /> class.
            </summary>
            <param name="tfPath">The tf path.</param>
            <param name="info">The default Process Executor Info information.</param>
        </member>
        <member name="M:DLaB.Common.VersionControl.VsTfsSourceControlProvider.Add(System.String)">
            <summary>
            Adds the file.
            </summary>
            <param name="filePath">The file path.</param>
            <exception cref="T:System.Exception">Unable to Add the file {filePath}</exception>
        </member>
        <member name="M:DLaB.Common.VersionControl.VsTfsSourceControlProvider.AreDifferent(System.String,System.String)">
            <summary>
            Determines whether the specified files are different.
            </summary>
            <param name="sourcePath">The source path.</param>
            <param name="diffPath">The difference path.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Common.VersionControl.VsTfsSourceControlProvider.Checkout(System.String[])">
            <summary>
            Checks the file(s) out.
            </summary>
            <param name="fileNames">The file names.</param>
            <returns></returns>
            <exception cref="T:System.Exception">Unable to check out file
            or
            File is read only, please checkout the file before running</exception>
        </member>
        <member name="M:DLaB.Common.VersionControl.VsTfsSourceControlProvider.CheckoutAndUpdateIfDifferent(System.String,System.String)">
            <summary>
            Returns true if the file was unchanged and so it was checked out
            </summary>
            <param name="filePath">The file path.</param>
            <param name="contents">The contents.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Common.VersionControl.VsTfsSourceControlProvider.Get(System.Boolean,System.String[])">
            <summary>
            Gets the specified files from the server, potentially overwriting it, even if it's checked out.
            </summary>
            <param name="overwrite">if set to <c>true</c> [overwrite].</param>
            <param name="fileNames">The file names.</param>
            <exception cref="T:System.Exception">Unable to determin if file is different than contents for the file  + sourcePath + Environment.NewLine + ex</exception>
        </member>
        <member name="M:DLaB.Common.VersionControl.VsTfsSourceControlProvider.UndoCheckoutIfUnchanged(System.String)">
            <summary>
            Returns true if the file was unchanged and an undo operation was performed
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Common.VersionControl.VsTfsSourceControlProvider.Undo(System.String)">
            <summary>
            Un-does the specified file path.
            </summary>
            <param name="filePath">The file path.</param>
            <exception cref="T:System.Exception">Unable to Undo Checkout If Unchanged for file  + filePath + Environment.NewLine + ex</exception>
        </member>
        <member name="T:DLaB.Xrm.ActiveAttributeType">
            <summary>
            Type of Active Attribute
            </summary>
        </member>
        <member name="F:DLaB.Xrm.ActiveAttributeType.None">
            <summary>
            Entity does not support an Active Attribute
            </summary>
        </member>
        <member name="F:DLaB.Xrm.ActiveAttributeType.IsDisabled">
            <summary>
            Entity uses an IsDisabled Attribute
            </summary>
        </member>
        <member name="F:DLaB.Xrm.ActiveAttributeType.StateCode">
            <summary>
            Entity uses a StateCode Attribute
            </summary>
        </member>
        <member name="T:DLaB.Xrm.ActivePropertyInfo`1">
            <summary>
            Determines the Active Attribute for the Entity
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:DLaB.Xrm.ActivePropertyInfo`1.ActiveAttribute">
            <summary>
            Gets or sets the active attribute type.
            </summary>
            <value>
            The active attribute type.
            </value>
        </member>
        <member name="P:DLaB.Xrm.ActivePropertyInfo`1.AttributeName">
            <summary>
            Gets or sets the name of the active attribute.
            </summary>
            <value>
            The name of the active attribute.
            </value>
        </member>
        <member name="P:DLaB.Xrm.ActivePropertyInfo`1.ActiveState">
            <summary>
            Gets or sets the state of the active.
            </summary>
            <value>
            The state of the active.
            </value>
        </member>
        <member name="P:DLaB.Xrm.ActivePropertyInfo`1.NotActiveState">
            <summary>
            Gets or sets the not active state code integer value of the entity.
            </summary>
            <value>
            The state of the not active.
            </value>
        </member>
        <member name="M:DLaB.Xrm.ActivePropertyInfo`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DLaB.Xrm.ActivePropertyInfo`1"/> class.
            </summary>
            <exception cref="T:DLaB.Common.Exceptions.TypeArgumentException">'Entity' is an invalid type for T.  Please use the LateBoundActivePropertyInfo.</exception>
        </member>
        <member name="M:DLaB.Xrm.ActivePropertyInfo`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DLaB.Xrm.ActivePropertyInfo`1"/> class.
            </summary>
            <param name="logicalName">Name of the logical.</param>
            <exception cref="T:System.ArgumentNullException">logicalName</exception>
        </member>
        <member name="M:DLaB.Xrm.ActivePropertyInfo`1.SetStateAttributesAndValue(System.String)">
            <summary>
            Sets the state attributes and value.
            </summary>
            <param name="logicalName">Name of the logical.</param>
        </member>
        <member name="M:DLaB.Xrm.ActivePropertyInfo`1.IsJoinEntity(System.String)">
            <summary>
            Determines whether [is join entity] [the specified logical name].
            </summary>
            <param name="logicalName">Name of the logical.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.ActivePropertyInfo`1.IsActive(Microsoft.Xrm.Sdk.IOrganizationService,System.Guid)">
            <summary>
            Determines whether the specified service is active.
            </summary>
            <param name="service">The service.</param>
            <param name="entityId">The entity identifier.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.ActivePropertyInfo`1.IsActive(DLaB.Xrm.ActivePropertyInfo{`0},`0)">
            <summary>
            Determines whether the specified information is active.
            </summary>
            <param name="info">The information.</param>
            <param name="entity">The entity.</param>
            <returns></returns>
            <exception cref="T:System.Exception">ActivePropertyInfo defines Attribute StateCode, but neither ActiveState or NotActiveState is popualted</exception>
            <exception cref="T:DLaB.Common.Exceptions.EnumCaseUndefinedException`1"></exception>
        </member>
        <member name="T:DLaB.Xrm.Comparers.ColumnSetComparer">
            <summary>
            Comparer for ColumnSets
            </summary>
        </member>
        <member name="M:DLaB.Xrm.Comparers.ColumnSetComparer.Equals(Microsoft.Xrm.Sdk.Query.ColumnSet,Microsoft.Xrm.Sdk.Query.ColumnSet)">
            <summary>
            Compares the two Column Sets
            </summary>
            <param name="cs1">The CS1.</param>
            <param name="cs2">The CS2.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Comparers.ColumnSetComparer.GetHashCode(Microsoft.Xrm.Sdk.Query.ColumnSet)">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <param name="cs">The cs.</param>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="T:DLaB.Xrm.Comparers.ConditionExpressionComparer">
            <summary>
            Comparer for Condition Expressions.
            </summary>
        </member>
        <member name="M:DLaB.Xrm.Comparers.ConditionExpressionComparer.Equals(Microsoft.Xrm.Sdk.Query.ConditionExpression,Microsoft.Xrm.Sdk.Query.ConditionExpression)">
            <summary>
            Compares the two conditions.
            </summary>
            <param name="condition1">The condition1.</param>
            <param name="condition2">The condition2.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Comparers.ConditionExpressionComparer.GetHashCode(Microsoft.Xrm.Sdk.Query.ConditionExpression)">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <param name="condition">The condition.</param>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="T:DLaB.Xrm.Comparers.EnumerableComparer`1">
            <summary>
            Taken from Stake Overflow question: http://stackoverflow.com/questions/50098/comparing-two-collections-for-equality-irrespective-of-the-order-of-items-in-them
            Checks for Value Comparison of a collection, allowing for the collection to not be in order, as long as they contain the same count.
            <para>The ability for it to accept an IEqualityComparer for type T was added.</para>
             </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:DLaB.Xrm.Comparers.EnumerableComparer`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:DLaB.Xrm.Comparers.EnumerableComparer`1"/> class.
            </summary>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="M:DLaB.Xrm.Comparers.EnumerableComparer`1.Equals(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Checks for the give nlists to be equal
            </summary>
            <param name="first">The first.</param>
            <param name="second">The second.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Comparers.EnumerableComparer`1.GetHashCode(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <param name="enumerable">The enumerable.</param>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="T:DLaB.Xrm.Comparers.FilterExpressionComparer">
            <summary>
            Comparer for FilterExpressions
            </summary>
        </member>
        <member name="M:DLaB.Xrm.Comparers.FilterExpressionComparer.Equals(Microsoft.Xrm.Sdk.Query.FilterExpression,Microsoft.Xrm.Sdk.Query.FilterExpression)">
            <summary>
            Compares the two filters
            </summary>
            <param name="filter1">The filter1.</param>
            <param name="filter2">The filter2.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Comparers.FilterExpressionComparer.GetHashCode(Microsoft.Xrm.Sdk.Query.FilterExpression)">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <param name="filter">The filter.</param>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="T:DLaB.Xrm.Comparers.HashCode">
            <summary>
            Taken from http://stackoverflow.com/a/18613926/227436 an answer for http://stackoverflow.com/questions/263400/what-is-the-best-algorithm-for-an-overridden-system-object-gethashcode
            Changed methods so it was a new, followed by Hash.
            Added overload for Comparers
            </summary>
        </member>
        <member name="M:DLaB.Xrm.Comparers.HashCode.op_Implicit(DLaB.Xrm.Comparers.HashCode)~System.Int32">
            <summary>
            Performs an implicit conversion from <see cref="T:DLaB.Xrm.Comparers.HashCode"/> to <see cref="T:System.Int32"/>.
            </summary>
            <param name="hashCode">The hash code.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:DLaB.Xrm.Comparers.HashCode.Hash``1(``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Creates a HashCode for the given type
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj">The object.</param>
            <param name="comparer">The comparer.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Comparers.HashCode.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="T:DLaB.Xrm.Comparers.LinkEntityComparer">
            <summary>
            Comparer for LinkEntities
            </summary>
        </member>
        <member name="M:DLaB.Xrm.Comparers.LinkEntityComparer.Equals(Microsoft.Xrm.Sdk.Query.LinkEntity,Microsoft.Xrm.Sdk.Query.LinkEntity)">
            <summary>
            Compares the two link entities.
            </summary>
            <param name="link1">The link1.</param>
            <param name="link2">The link2.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Comparers.LinkEntityComparer.GetHashCode(Microsoft.Xrm.Sdk.Query.LinkEntity)">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <param name="link">The link.</param>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="T:DLaB.Xrm.Comparers.OrderExpressionComparer">
            <summary>
            Comparer for OrderExpressions
            </summary>
        </member>
        <member name="M:DLaB.Xrm.Comparers.OrderExpressionComparer.Equals(Microsoft.Xrm.Sdk.Query.OrderExpression,Microsoft.Xrm.Sdk.Query.OrderExpression)">
            <summary>
            Compares the two Order Expressions
            </summary>
            <param name="order1">The order1.</param>
            <param name="order2">The order2.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Comparers.OrderExpressionComparer.GetHashCode(Microsoft.Xrm.Sdk.Query.OrderExpression)">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <param name="order">The order.</param>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="T:DLaB.Xrm.Comparers.PagingInfoComparer">
            <summary>
            Compares Paging Infos
            </summary>
        </member>
        <member name="M:DLaB.Xrm.Comparers.PagingInfoComparer.Equals(Microsoft.Xrm.Sdk.Query.PagingInfo,Microsoft.Xrm.Sdk.Query.PagingInfo)">
            <summary>
            Compares the two page infos
            </summary>
            <param name="page1">The page1.</param>
            <param name="page2">The page2.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Comparers.PagingInfoComparer.GetHashCode(Microsoft.Xrm.Sdk.Query.PagingInfo)">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <param name="info">The information.</param>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="T:DLaB.Xrm.Comparers.ProjectionEqualityComparer">
            <summary>
            Taken from http://stackoverflow.com/questions/716552/can-you-create-a-simple-equalitycomparert-using-a-lamba-expression,
            which Jon Skeet copied from his MiscUtil.
            </summary>
            
        </member>
        <member name="M:DLaB.Xrm.Comparers.ProjectionEqualityComparer.Create``2(System.Func{``0,``1})">
            <summary>
            Creates the comparer.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="projection">The projection.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Comparers.ProjectionEqualityComparer.Create``2(``0,System.Func{``0,``1})">
            <summary>
            Creates the comparer.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="ignored">The ignored.</param>
            <param name="projection">The projection.</param>
            <returns></returns>
        </member>
        <member name="T:DLaB.Xrm.Comparers.ProjectionEqualityComparer`1">
            <summary>
            Generic ProjectionEqualityComparer
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
        </member>
        <member name="M:DLaB.Xrm.Comparers.ProjectionEqualityComparer`1.Create``1(System.Func{`0,``0})">
            <summary>
            Creates the specified projection.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="projection">The projection.</param>
            <returns></returns>
        </member>
        <member name="T:DLaB.Xrm.Comparers.ProjectionEqualityComparer`2">
            <summary>
            Generic ProjectionEqualityComparer
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
        </member>
        <member name="M:DLaB.Xrm.Comparers.ProjectionEqualityComparer`2.#ctor(System.Func{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:DLaB.Xrm.Comparers.ProjectionEqualityComparer`2"/> class.
            </summary>
            <param name="projection">The projection.</param>
        </member>
        <member name="M:DLaB.Xrm.Comparers.ProjectionEqualityComparer`2.#ctor(System.Func{`0,`1},System.Collections.Generic.IEqualityComparer{`1})">
            <summary>
            Initializes a new instance of the <see cref="T:DLaB.Xrm.Comparers.ProjectionEqualityComparer`2"/> class.
            </summary>
            <param name="projection">The projection.</param>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="M:DLaB.Xrm.Comparers.ProjectionEqualityComparer`2.Equals(`0,`0)">
            <summary>
            Compares the two sources.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Comparers.ProjectionEqualityComparer`2.GetHashCode(`0)">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <param name="obj">The object.</param>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
            <exception cref="T:System.ArgumentNullException">obj</exception>
        </member>
        <member name="T:DLaB.Xrm.Comparers.QueryExpressionComparer">
            <summary>
            Class to allow for comparing QueryExpressions
            </summary>
        </member>
        <member name="M:DLaB.Xrm.Comparers.QueryExpressionComparer.Equals(Microsoft.Xrm.Sdk.Query.QueryExpression,Microsoft.Xrm.Sdk.Query.QueryExpression)">
            <summary>
            Compares qe1 to qe2
            </summary>
            <param name="qe1">The qe1.</param>
            <param name="qe2">The qe2.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Comparers.QueryExpressionComparer.GetHashCode(Microsoft.Xrm.Sdk.Query.QueryExpression)">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <param name="qe">The qe.</param>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="T:DLaB.Xrm.IDLaBXrmConfig">
            <summary>
            Implement this class to be able to provide config information to be used by the DLaB.Xrm code base.
            Currently this isn't needed, but may additional config at a later date.
            </summary>
        </member>
        <member name="T:DLaB.Xrm.IEntityHelperConfig">
            <summary>
            Implement this class to be able to provide config information to be used by the Entity Helper code base
            </summary>
        </member>
        <member name="M:DLaB.Xrm.IEntityHelperConfig.GetIrregularIdAttributeName(System.String)">
            <summary>
            Defines any id logical names that don't follow the standard conventions.
            </summary>
            <param name="logicalName">Logical Name of the Entity</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.IEntityHelperConfig.GetIrregularPrimaryFieldInfo(System.String,DLaB.Xrm.PrimaryFieldInfo)">
            <summary>
            Defines the primaryFieldInfo for any entities that don't follow the standard conventions.
            </summary>
            <param name="logicalName">Logical Name of the Entity</param>
            <param name="defaultInfo">Default Primary Field Info</param>
            <returns></returns>
        </member>
        <member name="T:DLaB.Xrm.DLaBXrmConfig">
            <summary>
            Searches the current assembly for the first public class that implements the request config interfaces searching for IDLaBXrmConfig first, then the specific interfaces later
            </summary>
        </member>
        <member name="T:DLaB.Xrm.EntityHelper">
            <summary>
            Utility class to get an Entity Type from a name, and visa-versa, and for determining Entity Id Attribute Name
            </summary>
        </member>
        <member name="M:DLaB.Xrm.EntityHelper.GetEntityLogicalName``1">
            <summary>
            Gets the entity logical name for the given type.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.EntityHelper.GetEntityLogicalName(System.Type)">
            <summary>
            Gets the entity logical name for the given type.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
            <exception cref="T:System.Exception">Type  + type.FullName +  does not contain an EntityLogicalName Field</exception>
        </member>
        <member name="M:DLaB.Xrm.EntityHelper.GetType``1(System.String)">
            <summary>
            Gets the type of the given entity, using the OrganizationServiceContext to determine the assembly to look for the Entity Type in.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entityLogicalName">Name of the entity logical.</param>
            <returns></returns>
            <exception cref="T:System.Exception">Must pass in a derived type from Microsoft.Xrm.Sdk.Client.OrganizationServiceContext</exception>
        </member>
        <member name="M:DLaB.Xrm.EntityHelper.GetType(System.Reflection.Assembly,System.String,System.String)">
            <summary>
            Gets the type for the given entity logical name.
            </summary>
            <param name="earlyBoundAssembly">The early bound assembly.</param>
            <param name="namespace">The namespace.</param>
            <param name="entityLogicalName">Name of the entity logical.</param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:DLaB.Xrm.EntityHelper.IsTypeDefined``1(System.String)">
            <summary>
            Determines whether entity defined by the logical name is defined as an early bound type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entityLogicalName">Name of the entity logical.</param>
            <returns></returns>
            <exception cref="T:System.Exception">Must pass in a derived type from Microsoft.Xrm.Sdk.Client.OrganizationServiceContext</exception>
        </member>
        <member name="M:DLaB.Xrm.EntityHelper.IsTypeDefined(System.Reflection.Assembly,System.String,System.String)">
            <summary>
            Determines whether entity defined by the logical name is defined as an early bound type.
            </summary>
            <param name="earlyBoundAssembly">The early bound assembly.</param>
            <param name="namespace">The namespace.</param>
            <param name="entityLogicalName">Name of the entity logical.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.EntityHelper.GetIdAttributeName(System.String,DLaB.Xrm.IEntityHelperConfig)">
            <summary>
            Returns the attribute name of the id of the entity using late bound approach
            </summary>
            <param name="logicalName"></param>
            <param name="config"></param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.EntityHelper.GetIdAttributeName``1">
            <summary>
            Returns the attribute name of the id of the entity
            </summary>
            <typeparam name="T">Entity Type to use Reflection to lookup the entity logical name for</typeparam>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.EntityHelper.GetIdAttributeName(System.Type)">
            <summary>
            Returns the attribute name of the id of the entity
            </summary>
            <param name="type">The Type of the Entity.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.EntityHelper.GetIrregularIdAttributeName(System.String,DLaB.Xrm.IEntityHelperConfig)">
            <summary>
            Returns the attribute name of the id of the entity if it doesn't follow the standard (logicalName + id) rule, or null
            </summary>
            <param name="logicalName"></param>
            <param name="config"></param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.EntityHelper.GetIrregularIdAttributeName``1(DLaB.Xrm.IEntityHelperConfig)">
            <summary>
            Returns the attribute name of the id of the entity if it doesn't follow the standard (logicalName + id) rule, or null
            </summary>
            <typeparam name="T">Entity Type to use Reflection to lookup the entity logical name for</typeparam>
            <param name="config">Interface for handling irregular primary attribute names.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.EntityHelper.GetPrimaryFieldInfo(System.String,DLaB.Xrm.IEntityHelperConfig)">
            <summary>
            Gets the Primary Field (name) info. 
            </summary>
            <param name="logicalName">Name of the logical.</param>
            <param name="config">Interface for handling irregular primary attribute names.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.EntityHelper.GetParentEntityAttributeName(System.Type,System.Type)">
            <summary>
            Gets the attribute name of the first attribute with the given Parent Type.
            If any of the possible attributes are CustomerId, customerId will be returned.
            </summary>
            <param name="childType">Type of the child.</param>
            <param name="parentType">Type of the parent.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.EntityHelper.GetParentEntityAttributeName``2">
            <summary>
            Gets the attribute name of the first attribute with the given parent type.
            If any of the possible attributes are CustomerId, customerId will be returned.
            </summary>
            <typeparam name="TChild">The type of the child.</typeparam>
            <typeparam name="TParent">The type of the parent.</typeparam>
            <returns></returns>
        </member>
        <member name="T:DLaB.Xrm.CrmSdk.ErrorCodes">
            <summary>
            Contains the Error Codes as defined via the SDK Sample
            </summary>
        </member>
        <member name="T:DLaB.Xrm.CrmSdk.ErrorCodes.ErrorType">
            <summary>
            Error Types
            </summary>
        </member>
        <member name="F:DLaB.Xrm.CrmSdk.ErrorCodes.ErrorType.SystemFailure">
            <summary>
            The system failure
            </summary>
        </member>
        <member name="F:DLaB.Xrm.CrmSdk.ErrorCodes.ErrorType.Timeout">
            <summary>
            The timeout
            </summary>
        </member>
        <member name="F:DLaB.Xrm.CrmSdk.ErrorCodes.ErrorType.ClientError">
            <summary>
            The client error
            </summary>
        </member>
        <member name="M:DLaB.Xrm.CrmSdk.ErrorCodes.GetErrorMessage(System.Int32)">
            <summary>
            Gets the error message.
            </summary>
            <param name="hResult">The h result.</param>
            <returns></returns>
        </member>
        <member name="T:DLaB.Xrm.Exceptions.EnumCaseUndefinedException`1">
            <summary>
            The exception that is thrown when a switch statement has been defined for an Enum, but the actual value has not been defined as a case.
            Example:
            	var c = BindingFlags.GetField;
                try{
                switch (c)
                {
                   case BindingFlags.Default:
                   break;
                   default:
                   throw new EnumCaseUndefinedException&lt;BindingFlags&gt;(c, "Unable to perform reflection operation");
                }
            </summary>
        </member>
        <member name="M:DLaB.Xrm.Exceptions.EnumCaseUndefinedException`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:DLaB.Xrm.Exceptions.EnumCaseUndefinedException`1"/> class.
            </summary>
            <param name="undefinedEnumValue">The undefined enum value.</param>
        </member>
        <member name="M:DLaB.Xrm.Exceptions.EnumCaseUndefinedException`1.#ctor(`0,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DLaB.Xrm.Exceptions.EnumCaseUndefinedException`1"/> class.
            </summary>
            <param name="undefinedEnumValue">The undefined enum value.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:DLaB.Xrm.Exceptions.EnumCaseUndefinedException`1.#ctor(`0,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:DLaB.Xrm.Exceptions.EnumCaseUndefinedException`1"/> class.
            </summary>
            <param name="undefinedEnumValue">The undefined enum value.</param>
            <param name="inner">The inner exception.</param>
        </member>
        <member name="M:DLaB.Xrm.Exceptions.EnumCaseUndefinedException`1.#ctor(`0,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:DLaB.Xrm.Exceptions.EnumCaseUndefinedException`1"/> class.
            </summary>
            <param name="undefinedEnumValue">The undefined enum value.</param>
            <param name="message">The message.</param>
            <param name="inner">The inner exception.</param>
        </member>
        <member name="M:DLaB.Xrm.Exceptions.EnumCaseUndefinedException`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:DLaB.Xrm.Exceptions.EnumCaseUndefinedException`1"/> class.
            </summary>
            <param name="undefinedEnumValue">The undefined enum value.</param>
        </member>
        <member name="M:DLaB.Xrm.Exceptions.EnumCaseUndefinedException`1.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DLaB.Xrm.Exceptions.EnumCaseUndefinedException`1"/> class.
            </summary>
            <param name="undefinedEnumValue">The undefined enum value.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:DLaB.Xrm.Exceptions.EnumCaseUndefinedException`1.#ctor(System.Int32,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:DLaB.Xrm.Exceptions.EnumCaseUndefinedException`1"/> class.
            </summary>
            <param name="undefinedEnumValue">The undefined enum value.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="M:DLaB.Xrm.Exceptions.EnumCaseUndefinedException`1.#ctor(System.Int32,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:DLaB.Xrm.Exceptions.EnumCaseUndefinedException`1"/> class.
            </summary>
            <param name="undefinedEnumValue">The undefined enum value.</param>
            <param name="message">The message.</param>
            <param name="inner">The inner exception.</param>
        </member>
        <member name="M:DLaB.Xrm.Exceptions.EnumCaseUndefinedException`1.#ctor(Microsoft.Xrm.Sdk.OptionSetValue)">
            <summary>
            Initializes a new instance of the <see cref="T:DLaB.Xrm.Exceptions.EnumCaseUndefinedException`1"/> class.
            </summary>
            <param name="undefinedEnumValue">The undefined enum value.</param>
        </member>
        <member name="M:DLaB.Xrm.Exceptions.EnumCaseUndefinedException`1.#ctor(Microsoft.Xrm.Sdk.OptionSetValue,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DLaB.Xrm.Exceptions.EnumCaseUndefinedException`1"/> class.
            </summary>
            <param name="undefinedEnumValue">The undefined enum value.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:DLaB.Xrm.Exceptions.EnumCaseUndefinedException`1.#ctor(Microsoft.Xrm.Sdk.OptionSetValue,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:DLaB.Xrm.Exceptions.EnumCaseUndefinedException`1"/> class.
            </summary>
            <param name="undefinedEnumValue">The undefined enum value.</param>
            <param name="inner">The inner exception.</param>
        </member>
        <member name="M:DLaB.Xrm.Exceptions.EnumCaseUndefinedException`1.#ctor(Microsoft.Xrm.Sdk.OptionSetValue,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:DLaB.Xrm.Exceptions.EnumCaseUndefinedException`1"/> class.
            </summary>
            <param name="undefinedEnumValue">The undefined enum value.</param>
            <param name="message">The message.</param>
            <param name="inner">The inner exception.</param>
        </member>
        <member name="T:DLaB.Xrm.Exceptions.InvalidPluginStepRegistrationException">
            <summary>
            The Exception that is thrown when a Pre/Post Image or attribute on the image isn't registered for the plugin
            </summary>
        </member>
        <member name="T:DLaB.Xrm.Exceptions.InvalidPluginStepRegistrationException.ImageCollection">
            <summary>
            Defines if the Image is a pre or post image
            </summary>
        </member>
        <member name="F:DLaB.Xrm.Exceptions.InvalidPluginStepRegistrationException.ImageCollection.Pre">
            <summary>
            Pre Image
            </summary>
        </member>
        <member name="F:DLaB.Xrm.Exceptions.InvalidPluginStepRegistrationException.ImageCollection.Post">
            <summary>
            Post Image
            </summary>
        </member>
        <member name="M:DLaB.Xrm.Exceptions.InvalidPluginStepRegistrationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DLaB.Xrm.Exceptions.InvalidPluginStepRegistrationException"/> class.
            </summary>
        </member>
        <member name="M:DLaB.Xrm.Exceptions.InvalidPluginStepRegistrationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DLaB.Xrm.Exceptions.InvalidPluginStepRegistrationException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:DLaB.Xrm.Exceptions.InvalidPluginStepRegistrationException.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:DLaB.Xrm.Exceptions.InvalidPluginStepRegistrationException"/> class.
            </summary>
            <param name="messageFormat">The message format.</param>
            <param name="messageFormatArgs">The message format arguments.</param>
        </member>
        <member name="M:DLaB.Xrm.Exceptions.InvalidPluginStepRegistrationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:DLaB.Xrm.Exceptions.InvalidPluginStepRegistrationException"/> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:DLaB.Xrm.Exceptions.InvalidPluginStepRegistrationException.ImageMissing(System.String,System.Nullable{DLaB.Xrm.Exceptions.InvalidPluginStepRegistrationException.ImageCollection})">
            <summary>
            Creates an InvalidPluginStepRegistrationException
            </summary>
            <param name="imageKeyName">Name of the image key.</param>
            <param name="image">The image.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Exceptions.InvalidPluginStepRegistrationException.ImageMissingRequiredAttribute(DLaB.Xrm.Exceptions.InvalidPluginStepRegistrationException.ImageCollection,System.String,System.String)">
            <summary>
            Creates an InvalidPluginStepRegistrationException
            </summary>
            <param name="image">The image.</param>
            <param name="imageKeyName">Name of the image key.</param>
            <param name="attributeName">Name of the attribute.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Exceptions.InvalidPluginStepRegistrationException.ImageMissingRequiredAttribute(Microsoft.Xrm.Sdk.IPluginExecutionContext,Microsoft.Xrm.Sdk.Entity,System.String)">
            <summary>
            Creates an InvalidPluginStepRegistrationException
            </summary>
            <param name="context">The context.</param>
            <param name="entity">The entity.</param>
            <param name="attributeName">Name of the attribute.</param>
            <returns></returns>
            <exception cref="T:System.Exception">Neither the PostEntityImages or PreEntityImages collections contain the given entity  + entity.GetNameId()</exception>
        </member>
        <member name="M:DLaB.Xrm.Exceptions.InvalidPluginStepRegistrationException.ImageMissingRequiredAttributes(DLaB.Xrm.Exceptions.InvalidPluginStepRegistrationException.ImageCollection,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a new InvalidPluginStepRegistrationException due to the given missing required attribute.
            </summary>
            <param name="image">The image.</param>
            <param name="imageKeyName">Name of the image key.</param>
            <param name="attributes">The attributes.</param>
            <returns></returns>
        </member>
        <member name="T:DLaB.Xrm.Exceptions.MissingAttributeException">
            <summary>
            Thrown when an Entity is expected to contain an Attribute, but the attribute isn't found
            </summary>
        </member>
        <member name="M:DLaB.Xrm.Exceptions.MissingAttributeException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DLaB.Xrm.Exceptions.MissingAttributeException"/> class.
            </summary>
        </member>
        <member name="M:DLaB.Xrm.Exceptions.MissingAttributeException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DLaB.Xrm.Exceptions.MissingAttributeException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:DLaB.Xrm.Exceptions.MissingAttributeException.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:DLaB.Xrm.Exceptions.MissingAttributeException"/> class.
            </summary>
            <param name="messageFormat">The message format.</param>
            <param name="messageFormatArgs">The message format arguments.</param>
        </member>
        <member name="M:DLaB.Xrm.Exceptions.MissingAttributeException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:DLaB.Xrm.Exceptions.MissingAttributeException"/> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:DLaB.Xrm.Exceptions.MissingAttributeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Without this constructor, deserialization will fail
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:DLaB.Xrm.ExtendedOrganizationService">
            <summary>
            An IOrganizationService Wrapper that utilizes ExtendedOrganizationServiceSettings and an ITracingService to potentially log every request, timing it as well as parsing the queries into Sql
            </summary>
        </member>
        <member name="M:DLaB.Xrm.ExtendedOrganizationService.#ctor(Microsoft.Xrm.Sdk.IOrganizationService,Microsoft.Xrm.Sdk.ITracingService,DLaB.Xrm.ExtendedOrganizationServiceSettings)">
            <summary>
            Constructor for determining if statements are timed and or logged.
            </summary>
            <param name="service">IOrganziationService to wrap.</param>
            <param name="trace">Tracing Service Required</param>
            <param name="settings">Settings</param>
        </member>
        <member name="M:DLaB.Xrm.ExtendedOrganizationService.Create(Microsoft.Xrm.Sdk.Entity)">
            <inheritdoc />
        </member>
        <member name="M:DLaB.Xrm.ExtendedOrganizationService.Retrieve(System.String,System.Guid,Microsoft.Xrm.Sdk.Query.ColumnSet)">
            <inheritdoc />
        </member>
        <member name="M:DLaB.Xrm.ExtendedOrganizationService.Update(Microsoft.Xrm.Sdk.Entity)">
            <inheritdoc />
        </member>
        <member name="M:DLaB.Xrm.ExtendedOrganizationService.Delete(System.String,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:DLaB.Xrm.ExtendedOrganizationService.Execute(Microsoft.Xrm.Sdk.OrganizationRequest)">
            <inheritdoc />
        </member>
        <member name="M:DLaB.Xrm.ExtendedOrganizationService.Associate(System.String,System.Guid,Microsoft.Xrm.Sdk.Relationship,Microsoft.Xrm.Sdk.EntityReferenceCollection)">
            <inheritdoc />
        </member>
        <member name="M:DLaB.Xrm.ExtendedOrganizationService.Disassociate(System.String,System.Guid,Microsoft.Xrm.Sdk.Relationship,Microsoft.Xrm.Sdk.EntityReferenceCollection)">
            <inheritdoc />
        </member>
        <member name="M:DLaB.Xrm.ExtendedOrganizationService.RetrieveMultiple(Microsoft.Xrm.Sdk.Query.QueryBase)">
            <inheritdoc />
        </member>
        <member name="M:DLaB.Xrm.ExtendedOrganizationService.GetDetailedMessage(Microsoft.Xrm.Sdk.OrganizationRequest)">
            <summary>
            Gets the detailed message for the request
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="T:DLaB.Xrm.ExtendedOrganizationServiceSettings">
            <summary>
            The Settings for the ExtendedOrganizationServiceSettings
            </summary>
        </member>
        <member name="P:DLaB.Xrm.ExtendedOrganizationServiceSettings.LogDetailedRequests">
            <summary>
            All Fetch Xml or QueryExpressions (SQL Equivalent) made with IOrganziationServices executed will be traced
            </summary>
        </member>
        <member name="P:DLaB.Xrm.ExtendedOrganizationServiceSettings.TimeRequests">
            <summary>
            All Requests made with IOrganizationServices will be timed.
            </summary>
        </member>
        <member name="P:DLaB.Xrm.ExtendedOrganizationServiceSettings.TimeStartMessageFormat">
            <summary>
            The format of the message to use when logging the start of a request.  Must include "{0}" for the name of the request.
            Defaults to "Starting Timer for {0}"
            </summary>
        </member>
        <member name="P:DLaB.Xrm.ExtendedOrganizationServiceSettings.TimeEndMessageFormat">
            <summary>
            The format of the message to use when logging the end of a request.  Must include "{0}" for the elapsed seconds of the request.
            Defaults to "Timer Ended ({0,7:F3} seconds)"
            </summary>
        </member>
        <member name="M:DLaB.Xrm.ExtendedOrganizationServiceSettings.#ctor">
            <inheritdoc />
        </member>
        <member name="T:DLaB.Xrm.ExtendedTracingService">
            <summary>
            Tracing Service guaranteed to not throw an exception
            </summary>
        </member>
        <member name="P:DLaB.Xrm.ExtendedTracingService.MaxTraceLength">
            <summary>
            The max length of the trace log.
            </summary>
        </member>
        <member name="M:DLaB.Xrm.ExtendedTracingService.#ctor(Microsoft.Xrm.Sdk.ITracingService,System.Int32)">
            <summary>
            Constructor.  
            </summary>
            <param name="service">The Real Trace Service to utilize</param>
            <param name="maxTraceLength">The max length of the trace log.</param>
        </member>
        <member name="M:DLaB.Xrm.ExtendedTracingService.Trace(System.String,System.Object[])">
            <inheritdoc />
        </member>
        <member name="M:DLaB.Xrm.ExtendedTracingService.RetraceMaxLength">
            <inheritdoc />
        </member>
        <member name="T:DLaB.Xrm.Extensions">
            <summary>
            Extension class for Xrm
            </summary>
            <summary>
            Extension class for Xrm
            </summary>
        </member>
        <member name="M:DLaB.Xrm.Extensions.AddChildLink(Microsoft.Xrm.Sdk.Query.LinkEntity,System.String,System.String)">
            <summary>
            Adds the new LinkEntity as a child to this LinkEntity, rather than this LinkEntity's LinkFrom Entity
            Assumes that the linkFromAttributeName and the linkToAttributeName are the same
            </summary>
            <param name="link"></param>
            <param name="linkToEntityName"></param>
            <param name="linkAttributesName"></param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.AddChildLink(Microsoft.Xrm.Sdk.Query.LinkEntity,System.String,System.String,Microsoft.Xrm.Sdk.Query.JoinOperator)">
            <summary>
            Adds the new LinkEntity as a child to this LinkEntity, rather than this LinkEntity's LinkFrom Entity
            Assumes that the linkFromAttributeName and the linkToAttributeName are the same
            </summary>
            <param name="link"></param>
            <param name="linkToEntityName"></param>
            <param name="linkAttributesName"></param>
            <param name="joinType"></param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.AddChildLink(Microsoft.Xrm.Sdk.Query.LinkEntity,System.String,System.String,System.String)">
            <summary>
            Adds the new LinkEntity as a child to this LinkEntity, rather than this LinkEntity's LinkFrom Entity
            </summary>
            <param name="link"></param>
            <param name="linkToEntityName"></param>
            <param name="linkFromAttributeName"></param>
            <param name="linkToAttributeName"></param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.AddChildLink(Microsoft.Xrm.Sdk.Query.LinkEntity,System.String,System.String,System.String,Microsoft.Xrm.Sdk.Query.JoinOperator)">
            <summary>
            Adds the new LinkEntity as a child to this LinkEntity, rather than this LinkEntity's LinkFrom Entity
            </summary>
            <param name="link"></param>
            <param name="linkToEntityName"></param>
            <param name="linkFromAttributeName"></param>
            <param name="linkToAttributeName"></param>
            <param name="joinType"></param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.AddLink(Microsoft.Xrm.Sdk.Query.LinkEntity,System.String,System.String)">
            <summary>
            Assumes that the linkFromAttributeName and the linkToAttributeName are the same
            </summary>
            <param name="link">The link.</param>
            <param name="linkToEntityName">Name of the link to entity.</param>
            <param name="linkAttributesName">Name of the link from and link to attribute.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.AddLink(Microsoft.Xrm.Sdk.Query.LinkEntity,System.String,System.String,Microsoft.Xrm.Sdk.Query.JoinOperator)">
            <summary>
            Assumes that the linkFromAttributeName and the linkToAttributeName are the same
            </summary>
            <param name="link">The link.</param>
            <param name="linkToEntityName">Name of the link to entity.</param>
            <param name="linkAttributesName">Name of the link from and link to attribute.</param>
            <param name="joinType">Type of the join to perform.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.AddLink``1(Microsoft.Xrm.Sdk.Query.LinkEntity,System.String)">
            <summary>
            Adds the type T as a child linked entity to the LinkEntity, additionally ensuring it is active.
            Assumes both entities have the same attribute name to link on.
            </summary>
            <typeparam name="T">The type of the entity that is to be linked</typeparam>
            <param name="link">The link.</param>
            <param name="linkAttributesName">Name of the link from and link to attribute.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.AddLink``1(Microsoft.Xrm.Sdk.Query.LinkEntity,System.String,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Adds the type T as a child linked entity to the LinkEntity, additionally ensuring it is active.
            Assumes both entities have the same attribute name to link on.
            </summary>
            <typeparam name="T">The type of the entity that is to be linked</typeparam>
            <param name="link">The link.</param>
            <param name="linkAttributesName">Name of the link from and link to attribute.</param>
            <param name="anonymousTypeInitializer">An Anonymous Type Initializer where the properties of the anonymous
            type are the column names to add</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.AddLink``1(Microsoft.Xrm.Sdk.Query.LinkEntity,System.String,Microsoft.Xrm.Sdk.Query.JoinOperator)">
            <summary>
            Adds the type T as a child linked entity, additionally ensuring it is active.
            Assumes both entities have the same attribute name to link on.
            </summary>
            <typeparam name="T">The type of the entity that is to me linked</typeparam>
            <param name="link">The link.</param>
            <param name="linkAttributesName">Name of the link from and link to attribute.</param>
            <param name="joinType">Type of the join to perform.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.AddLink``1(Microsoft.Xrm.Sdk.Query.LinkEntity,System.String,Microsoft.Xrm.Sdk.Query.JoinOperator,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Adds the type T as a child linked entity, additionally ensuring it is active.
            Assumes both entities have the same attribute name to link on.
            </summary>
            <typeparam name="T">The type of the entity that is to me linked</typeparam>
            <param name="link">The link.</param>
            <param name="linkAttributesName">Name of the link from and link to attribute.</param>
            <param name="joinType">Type of the join to perform.</param>
            <param name="anonymousTypeInitializer">An Anonymous Type Initializer where the properties of the anonymous
            type are the column names to add</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.AddLink``1(Microsoft.Xrm.Sdk.Query.LinkEntity,System.String,System.String)">
            <summary>
            Adds the type T as a child linked entity, additionally ensuring it is active.
            </summary>
            <typeparam name="T">The type of the entity that is to me linked</typeparam>
            <param name="link">The link.</param>
            <param name="linkFromAttributeName">Name of the link from attribute.</param>
            <param name="linkToAttributeName">Name of the link to attribute.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.AddLink``1(Microsoft.Xrm.Sdk.Query.LinkEntity,System.String,System.String,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Adds the type T as a child linked entity, additionally ensuring it is active.
            </summary>
            <typeparam name="T">The type of the entity that is to me linked</typeparam>
            <param name="link">The link.</param>
            <param name="linkFromAttributeName">Name of the link from attribute.</param>
            <param name="linkToAttributeName">Name of the link to attribute.</param>
            <param name="anonymousTypeInitializer">An Anonymous Type Initializer where the properties of the anonymous
            type are the column names to add</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.AddLink``1(Microsoft.Xrm.Sdk.Query.LinkEntity,System.String,System.String,Microsoft.Xrm.Sdk.Query.JoinOperator)">
            <summary>
            Adds the type T as a child linked entity, additionally ensuring it is active.
            </summary>
            <typeparam name="T">The type of Entity</typeparam>
            <param name="link">The link.</param>
            <param name="linkFromAttributeName">Name of the link from attribute.</param>
            <param name="linkToAttributeName">Name of the link to attribute.</param>
            <param name="joinType">Type of the join.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.AddLink``1(Microsoft.Xrm.Sdk.Query.LinkEntity,System.String,System.String,Microsoft.Xrm.Sdk.Query.JoinOperator,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Adds the type T as a child linked entity, additionally ensuring it is active.
            </summary>
            <typeparam name="T">The type of Entity</typeparam>
            <param name="link">The link.</param>
            <param name="linkFromAttributeName">Name of the link from attribute.</param>
            <param name="linkToAttributeName">Name of the link to attribute.</param>
            <param name="joinType">Type of the join.</param>
            <param name="anonymousTypeInitializer">An Anonymous Type Initializer where the properties of the anonymous
            type are the column names to add</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.AddLink(Microsoft.Xrm.Sdk.Query.QueryExpression,System.String,System.String)">
            <summary>
            Adds a LinkEntity to the Query Expression, returning it.
            </summary>
            <param name="qe">The qe.</param>
            <param name="linkToEntityName">Name of the link to entity.</param>
            <param name="linkAttributesName">Name of the link attributes.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.AddLink(Microsoft.Xrm.Sdk.Query.QueryExpression,System.String,System.String,Microsoft.Xrm.Sdk.Query.JoinOperator)">
            <summary>
            Adds a LinkEntity to the Query Expression, returning it.
            </summary>
            <param name="qe">The qe.</param>
            <param name="linkToEntityName">Name of the link to entity.</param>
            <param name="linkAttributesName">Name of the link attributes.</param>
            <param name="joinType">Type of the join.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.AddLink``1(Microsoft.Xrm.Sdk.Query.QueryExpression,System.String)">
            <summary>
            Adds the type T as a linked entity to the query expression, additionally ensuring it is active.
            Assumes both entities have the same attribute name to link on.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="qe"></param>
            <param name="linkAttributesName"></param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.AddLink``1(Microsoft.Xrm.Sdk.Query.QueryExpression,System.String,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Adds the type T as a linked entity to the query expression, additionally ensuring it is active.
            Assumes both entities have the same attribute name to link on.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="qe"></param>
            <param name="linkAttributesName"></param>
            <param name="anonymousTypeInitializer">An Anonymous Type Initializer where the properties of the anonymous
            type are the column names to add</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.AddLink``1(Microsoft.Xrm.Sdk.Query.QueryExpression,System.String,Microsoft.Xrm.Sdk.Query.JoinOperator)">
            <summary>
            Adds the type T as a linked entity, additionally ensuring it is active.
            Assumes both entities have the same attribute name to link on.
            </summary>
            <typeparam name="T">The type of the entity that is to be linked and asserted active.</typeparam>
            <param name="qe">The query expression.</param>
            <param name="linkAttributesName">Name of the link attributes.</param>
            <param name="joinType">Type of the join to perform.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.AddLink``1(Microsoft.Xrm.Sdk.Query.QueryExpression,System.String,Microsoft.Xrm.Sdk.Query.JoinOperator,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Adds the type T as a linked entity, additionally ensuring it is active.
            Assumes both entities have the same attribute name to link on.
            </summary>
            <typeparam name="T">The type of the entity that is to be linked and asserted active.</typeparam>
            <param name="qe">The query expression.</param>
            <param name="linkAttributesName">Name of the link attributes.</param>
            <param name="joinType">Type of the join to perform.</param>
            <param name="anonymousTypeInitializer">An Anonymous Type Initializer where the properties of the anonymous
            type are the column names to add</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.AddLink``1(Microsoft.Xrm.Sdk.Query.QueryExpression,System.String,System.String)">
            <summary>
            Adds the type T as a linked entity to the query expression, additionally ensuring it is active.
            </summary>
            <typeparam name="T">The type of the entity that is to be linked and asserted active.</typeparam>
            <param name="qe">The query expression.</param>
            <param name="linkFromAttributeName">Name of the link from attribute.</param>
            <param name="linkToAttributeName">Name of the link to attribute.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.AddLink``1(Microsoft.Xrm.Sdk.Query.QueryExpression,System.String,System.String,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Adds the type T as a linked entity to the query expression, additionally ensuring it is active.
            </summary>
            <typeparam name="T">The type of the entity that is to be linked and asserted active.</typeparam>
            <param name="qe">The query expression.</param>
            <param name="linkFromAttributeName">Name of the link from attribute.</param>
            <param name="linkToAttributeName">Name of the link to attribute.</param>
            <param name="anonymousTypeInitializer">An Anonymous Type Initializer where the properties of the anonymous
            type are the column names to add</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.AddLink``1(Microsoft.Xrm.Sdk.Query.QueryExpression,System.String,System.String,Microsoft.Xrm.Sdk.Query.JoinOperator)">
            <summary>
            Adds the type T as a linked entity, additionally ensuring it is active.
            </summary>
            <typeparam name="T">The type of the entity that is to be linked and asserted active.</typeparam>
            <param name="qe">The query expression.</param>
            <param name="linkFromAttributeName">Name of the link from attribute.</param>
            <param name="linkToAttributeName">Name of the link to attribute.</param>
            <param name="joinType">Type of the join to perform.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.AddLink``1(Microsoft.Xrm.Sdk.Query.QueryExpression,System.String,System.String,Microsoft.Xrm.Sdk.Query.JoinOperator,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Adds the type T as a linked entity, additionally ensuring it is active.
            </summary>
            <typeparam name="T">The type of the entity that is to be linked and asserted active.</typeparam>
            <param name="qe">The query expression.</param>
            <param name="linkFromAttributeName">Name of the link from attribute.</param>
            <param name="linkToAttributeName">Name of the link to attribute.</param>
            <param name="joinType">Type of the join to perform.</param>
            <param name="anonymousTypeInitializer">An Anonymous Type Initializer where the properties of the anonymous
            type are the column names to add</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.AddAliasedEntity(Microsoft.Xrm.Sdk.Entity,Microsoft.Xrm.Sdk.Entity)">
            <summary>
            Adds the aliased entity to the current entity.
            </summary>
            <param name="entity">The entity.</param>
            <param name="entityToAdd">The entity to add.</param>
        </member>
        <member name="M:DLaB.Xrm.Extensions.AddAliasedValue(Microsoft.Xrm.Sdk.Entity,System.String,System.String,System.Object,System.String)">
            <summary>
            Adds the value to the entity as an Aliased Value.  Helpful when you need to add attributes
            that are for other entities locally, in such a way that it looks like it was added by a link on a query
            expression
            </summary>
            <param name="entity"></param>
            <param name="logicalName">The logical name from which the aliased value would have come from</param>
            <param name="attributeName">The logical name of the attribute of the aliased value</param>
            <param name="value">The Value to store in the aliased value</param>
            <param name="formattedValue">The formatted value</param>
        </member>
        <member name="M:DLaB.Xrm.Extensions.AddAliasedValue(Microsoft.Xrm.Sdk.Entity,System.String,System.String,System.String,System.Object,System.String)">
            <summary>
            Adds the value to the entity as an Aliased Value.  Helpful when you need to add attributes
            that are for other entities locally, in such a way that it looks like it was added by a link on a query
            expression
            </summary>
            <param name="entity"></param>
            <param name="aliasName">Aliased Name of the Attribute</param>
            <param name="logicalName">The logical name from which the aliased value would have come from</param>
            <param name="attributeName">The logical name of the attribute of the aliased value</param>
            <param name="value">The Value to store in the aliased value</param>
            <param name="formattedValue">The formatted value</param>
        </member>
        <member name="M:DLaB.Xrm.Extensions.AddOrReplaceAliasedValue(Microsoft.Xrm.Sdk.Entity,System.String,System.String,System.Object,System.String)">
            <summary>
            Adds the value to the entity as an Aliased Value, or replaces an already existing value.  Helpful when you need to add attributes
            that are for other entities locally, in such a way that it looks like it was added by a link on a query
            expression
            </summary>
            <param name="entity"></param>
            <param name="logicalName">The logical name from which the aliased value would have come from</param>
            <param name="attributeName">The logical name of the attribute of the aliased value</param>
            <param name="value">The Value to store in the aliased value</param>
            <param name="formattedValue">The formatted value</param>
        </member>
        <member name="M:DLaB.Xrm.Extensions.GetAliasedEntity``1(Microsoft.Xrm.Sdk.Entity)">
            <summary>
            Gets the aliased entity from the current entity.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.GetAliasedEntity``1(Microsoft.Xrm.Sdk.Entity,System.String)">
            <summary>
            Gets the aliased entity from the current entity with the given entity name.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity">The entity.</param>
            <param name="aliasedEntityName">Name of the aliased entity.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.GetAliasedValue``1(Microsoft.Xrm.Sdk.Entity,System.String)">
            <summary>
            Returns the Aliased Value for a column specified in a Linked entity, returning the default value for 
            the type if it wasn't found
            </summary>
            <typeparam name="T">The type of the aliased attribute form the linked entity</typeparam>
            <param name="entity"></param>
            <param name="attributeName">The aliased attribute from the linked entity.  Can be prepended with the
            linked entities logical name and a period. ie "Contact.LastName"</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.HasAliasedAttribute(Microsoft.Xrm.Sdk.Entity,System.String)">
            <summary>
            Returns the Aliased Value for a column specified in a Linked entity
            </summary>
            <param name="entity"></param>
            <param name="attributeName">The aliased attribute from the linked entity.  Can be prepended with the
            linked entities logical name and a period. ie "Contact.LastName"</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.SplitAliasedAttributeEntityName(System.String@)">
            <summary>
            Handles splitting the attributeName if it is formatted as "EntityAliasedName.AttributeName",
            updating the attribute name and returning the aliased EntityName
            </summary>
            <param name="attributeName"></param>
        </member>
        <member name="M:DLaB.Xrm.Extensions.IsEqual(Microsoft.Xrm.Sdk.Query.ColumnSet,Microsoft.Xrm.Sdk.Query.ColumnSet)">
            <summary>
            Determines whether the specified column set is equal.
            </summary>
            <param name="cs">The cs.</param>
            <param name="columnSet">The column set.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.IsEqual(Microsoft.Xrm.Sdk.Query.FilterExpression,Microsoft.Xrm.Sdk.Query.FilterExpression)">
            <summary>
            Determines whether the specified filter is equal.
            </summary>
            <param name="fe">The fe.</param>
            <param name="filter">The filter.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.IsEqual(Microsoft.Xrm.Sdk.Query.PagingInfo,Microsoft.Xrm.Sdk.Query.PagingInfo)">
            <summary>
            Determines whether the specified paging info is equal.
            </summary>
            <param name="infoThis">The information this.</param>
            <param name="info">The paging info.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.IsEqual(Microsoft.Xrm.Sdk.Query.QueryExpression,Microsoft.Xrm.Sdk.Query.QueryExpression)">
            <summary>
            Determines whether the specified qe is equal.
            </summary>
            <param name="qeThis">The qe this.</param>
            <param name="qe">The qe.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.GetEntityOrDefault(Microsoft.Xrm.Sdk.IOrganizationService,System.String,System.Guid)">
            <summary>
            Gets the entity by id. Null is returned if it isn't found.
            </summary>
            <param name="service">The service.</param>
            <param name="logicalName">Logical name of the entity.</param>
            <param name="id">Id of the entity to search for.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.GetEntityOrDefault(Microsoft.Xrm.Sdk.IOrganizationService,System.String,System.Guid,Microsoft.Xrm.Sdk.Query.ColumnSet)">
            <summary>
            Gets the entity by id. Null is returned if it isn't found.
            </summary>
            <param name="service">The service.</param>
            <param name="logicalName">Logical name of the entity.</param>
            <param name="id">Id of the entity to search for.</param>
            <param name="columnSet">Columns to retrieve.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.GetEntityOrDefault``1(Microsoft.Xrm.Sdk.IOrganizationService,System.Guid)">
            <summary>
            Gets the first entity that matches the query expression.  Null is returned if none are found.
            </summary>
            <typeparam name="T">The Entity Type.</typeparam>
            <param name="service">The service.</param>
            <param name="id">Id of the entity to search for.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.GetEntityOrDefault``1(Microsoft.Xrm.Sdk.IOrganizationService,System.Guid,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Gets the first entity that matches the query expression.  Null is returned if none are found.
            </summary>
            <typeparam name="T">The Entity Type.</typeparam>
            <param name="service">The service.</param>
            <param name="id">Id of the entity to search for.</param>
            <param name="anonymousTypeInitializer">An Anonymous Type Initializer where the properties of the anonymous
            type are the column names to add.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.GetEntitiesById(Microsoft.Xrm.Sdk.IOrganizationService,System.String,System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Gets the first 5000 active entities with the given ids.
            </summary>
            <param name="service">The IOrganizationService.</param>
            <param name="logicalName">Logical name of the entity.</param>
            <param name="ids">Ids of the entity to search for.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.GetEntitiesById(Microsoft.Xrm.Sdk.IOrganizationService,System.String,System.Guid[])">
            <summary>
            Gets the first 5000 active entities with the given ids.
            </summary>
            <param name="service">The IOrganizationService.</param>
            <param name="logicalName">Logical name of the entity.</param>
            <param name="ids">Ids of the entity to search for.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.GetEntitiesById(Microsoft.Xrm.Sdk.IOrganizationService,System.String,Microsoft.Xrm.Sdk.Query.ColumnSet,System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Gets the first 5000 active entities (with the given subset of columns only) with the given ids.
            </summary>
            <param name="service">The IOrganizationService.</param>
            <param name="columnSet">Columns to retrieve.</param>
            <param name="logicalName">Logical name of the entity.</param>
            <param name="ids">Ids of the entity to search for.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.GetEntitiesById(Microsoft.Xrm.Sdk.IOrganizationService,System.String,Microsoft.Xrm.Sdk.Query.ColumnSet,System.Guid[])">
            <summary>
            Gets the first 5000 active entities (with the given subset of columns only) with the given ids.
            </summary>
            <param name="service">The IOrganizationService.</param>
            <param name="columnSet">Columns to retrieve.</param>
            <param name="logicalName">Logical name of the entity.</param>
            <param name="ids">Ids of the entity to search for.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.GetEntitiesById``1(Microsoft.Xrm.Sdk.IOrganizationService,System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Gets the first 5000 active entities with the given ids.
            </summary>
            <typeparam name="T">Type of Entity List to return</typeparam>
            <param name="service">The IOrganizationService.</param>
            <param name="ids">Ids of the entity to search for.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.GetEntitiesById``1(Microsoft.Xrm.Sdk.IOrganizationService,System.Guid[])">
            <summary>
            Gets the first 5000 active entities with the given ids.
            </summary>
            <typeparam name="T">Type of Entity List to return.</typeparam>
            <param name="service">The IOrganizationService.</param>
            <param name="ids">Ids of the entity to search for.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.GetEntitiesById``1(Microsoft.Xrm.Sdk.IOrganizationService,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Gets the first 5000 active entities (with the given subset of columns only) with the given ids.
            </summary>
            <typeparam name="T">Type of Entity List to return.</typeparam>
            <param name="service">The IOrganizationService.</param>
            <param name="anonymousTypeInitializer">An Anonymous Type Initializer where the properties of the anonymous
            type are the column names to add.</param>
            <param name="ids">Ids of the entity to search for.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.GetEntitiesById``1(Microsoft.Xrm.Sdk.IOrganizationService,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Guid[])">
            <summary>
            Gets the first 5000 active entities (with the given subset of columns only) with the given ids.
            </summary>
            <typeparam name="T">Type of Entity List to return.</typeparam>
            <param name="service">The IOrganizationService.</param>
            <param name="anonymousTypeInitializer">An Anonymous Type Initializer where the properties of the anonymous
            type are the column names to add.</param>
            <param name="ids">Ids of the entity to search for.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.GetEntitiesById``1(Microsoft.Xrm.Sdk.IOrganizationService,Microsoft.Xrm.Sdk.Query.ColumnSet,System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Gets the first 5000 active entities (with the given subset of columns only) with the given ids.
            </summary>
            <typeparam name="T">Type of Entity List to return.</typeparam>
            <param name="service">The IOrganizationService.</param>
            <param name="columnSet">Columns to retrieve</param>
            <param name="ids">Ids of the entity to search for.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.GetEntitiesById``1(Microsoft.Xrm.Sdk.IOrganizationService,Microsoft.Xrm.Sdk.Query.ColumnSet,System.Guid[])">
            <summary>
            Gets first 5000 Active Entities (with the given subset of columns only) 
            where the columnNameAndValue Pairs match.
            </summary>
            <typeparam name="T">Type of Entity List to return.</typeparam>
            <param name="service">The IOrganizationService.</param>
            <param name="columnSet">Columns to retrieve.</param>
            <param name="ids">Ids of the entity to search for.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.IsLocalOptionSetAttribute(Microsoft.Xrm.Sdk.Metadata.AttributeMetadata)">
            <summary>
            Determines whether the attribute is a local option set.
            </summary>
            <param name="attribute">The attribute.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.AddColumns``1(Microsoft.Xrm.Sdk.Query.ColumnSet,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Allows for adding column names in an early bound manner:
            columnSet.AddColumns&lt;Opportunity&gt;(i => new { i.OpportunityId, i.SalesStage, i.SalesStageCode });
            </summary>
            <typeparam name="T">An Entity Type</typeparam>
            <param name="columnSet">The ColumnSet</param>
            <param name="anonymousTypeInitializer">An Anonymous Type Initializer where the properties of the anonymous
            type are the column names to add</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.GetEntity``1(Microsoft.Xrm.Sdk.DataCollection{System.String,Microsoft.Xrm.Sdk.Entity},System.String,System.String)">
            <summary>
            If the imageName is populated, then if images collection contains the given imageName Key, the Value is cast to the Entity type T, else null is returned
            If the imageName is not populated but the default name is, then the defaultName is searched for in the images collection and if it has a value, it is cast to the Entity type T.
            Else, the first non-null value in the images collection is returned.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="images"></param>
            <param name="imageName">The name to Search For</param>
            <param name="defaultName">The Default Name to use</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.AsEntity``1(Microsoft.Xrm.Sdk.Entity)">
            <summary>
            Checks to see if the entity is already of the given type.
            If it is, it just returns the entity cast as the type, else ToEntity is called.
             the entity.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.AssertContainsAllNonNull(Microsoft.Xrm.Sdk.Entity,System.String[])">
            <summary>
            Checks to see if the Entity Contains the attribute names, and the value is not null.  Any missing/null attributes will result in an exception, listing the missing attributes.
            </summary>
            <param name="entity"></param>
            <param name="attributeNames"></param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.AssertContainsAllNonNull``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Checks to see if the Entity Contains the attribute names, and the value is not null.  Any missing/null attributes will result in an exception, listing the missing attributes.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
            <param name="anonymousTypeInitializer"></param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.ClearId(Microsoft.Xrm.Sdk.Entity)">
            <summary>
            Clears the id of an entity so it can be saved as a new entity
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:DLaB.Xrm.Extensions.CoalesceEntity``1(``0,Microsoft.Xrm.Sdk.Entity)">
            <summary>
            Adds the attributes from the given entity if they do not exist in the current
            </summary>
            <typeparam name="T">Entity Type</typeparam>
            <param name="baseEntity"></param>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.ContainsAllNonNull(Microsoft.Xrm.Sdk.Entity,System.String[])">
            <summary>
            Checks to see if the Entity Contains the attribute names, and the value is not null
            </summary>
            <param name="entity"></param>
            <param name="attributeNames"></param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.ContainsAllNonNull``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Checks to see if the Entity Contains the attribute names, and the value is not null
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
            <param name="anonymousTypeInitializer"></param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.ContainsAllNonNull(Microsoft.Xrm.Sdk.Entity,System.Collections.Generic.List{System.String}@,System.String[])">
            <summary>
            Checks to see if the Entity Contains the attribute names, and the value is not null
            </summary>
            <param name="entity"></param>
            <param name="nullAttributeNames"></param>
            <param name="attributeNames"></param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.ContainsAllNonNull``1(``0,System.Collections.Generic.List{System.String}@,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Checks to see if the Entity Contains the attribute names, and the value is not null
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
            <param name="nullAttributeNames"></param>
            <param name="anonymousTypeInitializer"></param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.ContainsAnyNonNull(Microsoft.Xrm.Sdk.Entity,System.String[])">
            <summary>
            Checks to see if the Entity Contains any of the attribute names, and the value is not null
            </summary>
            <param name="entity"></param>
            <param name="attributeNames"></param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.ContainsAnyNonNull``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Checks to see if the Entity Contains any of the attribute names, and the value is not null
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
            <param name="anonymousTypeInitializer"></param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.GetFormUrl(Microsoft.Xrm.Sdk.Entity,System.Uri)">
            <summary>
            Gets the url of the form.
            </summary>
            <param name="entity">The entity.</param>
            <param name="uri">The URI.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.GetFormattedAttributeValueOrNull(Microsoft.Xrm.Sdk.Entity,System.String)">
            <summary>
            Gets the formatted attribute value or null.
            </summary>
            <param name="entity">The entity.</param>
            <param name="attributeLogicalName">Name of the attribute logical.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.GetFormattedAttributeValue(Microsoft.Xrm.Sdk.Entity,System.String)">
            <summary>
            Returns Local Option Set text Only.  Not sure what else it does...
            </summary>
            <param name="entity"></param>
            <param name="attributeLogicalName"></param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.GetIdAttributeName(Microsoft.Xrm.Sdk.Entity)">
            <summary>
            Gets the name of the id attribute logical name.
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.GetIdOrDefault(Microsoft.Xrm.Sdk.Entity)">
            <summary>
            Returns the Id of the entity or Guid.Empty if it is null"
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.GetNameAttribute(Microsoft.Xrm.Sdk.Entity)">
            <summary>
            Returns the name of the Attribute that contains the default name of the entity
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.GetNameId(Microsoft.Xrm.Sdk.Entity)">
            <summary>
            Returns the Name and Id of the Current Entity in this format "Name (id)"
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.GetOrDefault``1(Microsoft.Xrm.Sdk.Entity,System.String)">
            <summary>
            Returns the value for the attribute, or the default value for the type if it does not exist in the entity.
            </summary>
            <typeparam name="T">The attribute type.</typeparam>
            <param name="entity">The entity.</param>
            <param name="attributeName">Name of the attribute.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.GetOrDefault``1(Microsoft.Xrm.Sdk.Entity,System.String,``0)">
            <summary>
            Returns the value for the attribute, or the default value for the type if it does not exist in the entity.
            </summary>
            <typeparam name="T">The attribute type.</typeparam>
            <param name="entity">The entity.</param>
            <param name="attributeName">Name of the attribute.</param>
            <param name="defaultValue">The value to use if the entity does not contain the attribute.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.ToEarlyBoundEntity``1(Microsoft.Xrm.Sdk.Entity)">
            <summary>
            Calls the Entity.ToEntity() method generically based on the logical name.  Useful for determining if an early bound entity implements a given type.
            </summary>
            <typeparam name="TEntityContext">The Context to use to determine the entity type.</typeparam>
            <param name="entity">The Entity</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.ToEarlyBoundEntity(Microsoft.Xrm.Sdk.Entity,System.Reflection.Assembly,System.String)">
            <summary>
            Calls the Entity.ToEntity() method generically based on the logical name.  Useful for determining if an early bound entity implements a given type.
            </summary>
            <param name="entity">The Entity</param>
            <param name="earlyBoundAssembly">The assembly to search</param>
            <param name="namespace">The namespace to search</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.ToEarlyBoundEntity(Microsoft.Xrm.Sdk.Entity,System.Type)">
            <summary>
            Calls the Entity.ToEntity() method generically based on the logical name.  Useful for determining if an early bound entity implements a given type.
            </summary>
            <param name="entity">The Entity</param>
            <param name="earlyBoundType">The Type to call the ToEntity generic method with.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.ToEntityInterface``2(Microsoft.Xrm.Sdk.Entity)">
            <summary>
            Attempts to cast the given entity to specified interface by first converting it to it's early bound entity type.
            </summary>
            <typeparam name="TInterface">The Interface to cast the early bound entity to</typeparam>
            <typeparam name="TEntityContext">The EntityContext To Use to lookup the early bound type.</typeparam>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.ToEntityInterface``1(Microsoft.Xrm.Sdk.Entity,System.Reflection.Assembly,System.String)">
            <summary>
            Attempts to cast the given entity to specified interface by first converting it to it's early bound entity type.
            </summary>
            <typeparam name="TInterface">The Interface to cast the early bound entity to</typeparam>
            <param name="earlyBoundAssembly">The early bound assembly.</param>
            <param name="namespace">The namespace.</param>
            <param name="entity"></param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:DLaB.Xrm.Extensions.ToEntityReference(Microsoft.Xrm.Sdk.Entity,System.String)">
            <summary>
            Creates the EntityReference from Entity, settings it's name
            </summary>
            <param name="entity"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.GetAttributeNamesArray``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Creates an array of attribute names array from an Anonymous Type Initializer.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="anonymousTypeInitializer">The anonymous type initializer.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">lambda must return an object initializer</exception>
        </member>
        <member name="M:DLaB.Xrm.Extensions.GetLogicalAttributeName``1(System.Reflection.MemberInfo)">
            <summary>
            Normally just returns the name of the property, in lowercase.  But Id must be looked up via reflection.
            </summary>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.ToSdkEntity(Microsoft.Xrm.Sdk.Entity)">
            <summary>
            Converts an early bound entity to the SDK entity, as well as all child entities in EntityCollection Attributes
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.Clone``1(``0)">
            <summary>
            Clone Entity (deep copy)
            </summary>
            <param name="source">source entity.</param>
            <returns>new cloned entity</returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.ToEntityList``1(Microsoft.Xrm.Sdk.EntityCollection)">
            <summary>
            Converts the entity collection into a list, casting each entity.
            </summary>
            <typeparam name="T">The type of Entity</typeparam>
            <param name="col">The collection to convert</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.GetDisplayNameWithLogical(Microsoft.Xrm.Sdk.Metadata.EntityMetadata)">
            <summary>
            Gets the text value of the di.
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.GetNameId(Microsoft.Xrm.Sdk.EntityReference)">
            <summary>
            Returns the Name and Id of an entity reference in this format "Name (id)"
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.GetIdOrDefault(Microsoft.Xrm.Sdk.EntityReference)">
            <summary>
            Returns the Id of the entity reference or Guid.Empty if it is null"
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.GetNameOrDefault(Microsoft.Xrm.Sdk.EntityReference)">
            <summary>
            Returns the Name of the entity reference or null if it is null"
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.NullSafeEquals(Microsoft.Xrm.Sdk.EntityReference,Microsoft.Xrm.Sdk.EntityReference)">
            <summary>
            Allows for Null safe Equals Comparison for more concise code.  i.e.<para />
            if(contact.NullSafeEquals(entity))<para />
            vs.<para />
            if(contact == value || contact != null amps;amps; contact.Equals(entity))
            </summary>
            <param name="entityReference"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.GetEntityName(Microsoft.Xrm.Sdk.Query.FetchExpression)">
            <summary>
            Get's the logical name of the primary entity for the fetch expression.
            </summary>
            <param name="fe"></param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.ActiveOnly``1(Microsoft.Xrm.Sdk.Query.FilterExpression)">
            <summary>
            Depending on the Type of T, adds the correct is active criteria Statement
            Note: Use AddLink&lt;T&gt; for Linked Entities
            </summary>
            <typeparam name="T">The Entity type.</typeparam>
            <param name="fe"></param>
        </member>
        <member name="M:DLaB.Xrm.Extensions.ActiveOnly(Microsoft.Xrm.Sdk.Query.FilterExpression,System.String)">
            <summary>
            Depending on the Type of T, adds the correct is active criteria Statement
            Note: Use AddLink&lt;T&gt; for Linked Entities
            </summary>
            <param name="fe"></param>
            <param name="logicalName">The logical name of the entity to have the active only enforced.</param>
        </member>
        <member name="M:DLaB.Xrm.Extensions.AddConditionEnforceAndFilterOperator(Microsoft.Xrm.Sdk.Query.FilterExpression,Microsoft.Xrm.Sdk.Query.ConditionExpression)">
            <summary>
            Adds the condition to the Filter Expression, and if the current filter expression's logical operator
            is an Or, it will move all of the current conditions into a child filter and create a new
            top level and filter
            </summary>
            <param name="criteria"></param>
            <param name="ce"></param>
        </member>
        <member name="M:DLaB.Xrm.Extensions.AddConditionsAnded(Microsoft.Xrm.Sdk.Query.FilterExpression,Microsoft.Xrm.Sdk.Query.ConditionExpression[])">
            <summary>
            Adds the conditions to the FilterExpression as normal if the FilterOperator is an And.
            If it is an Or, adds the conditions to a child FilterExpression, with a FilterOperator of And.
            </summary>
            <param name="criteria"></param>
            <param name="conditions"></param>
        </member>
        <member name="M:DLaB.Xrm.Extensions.StateIs(Microsoft.Xrm.Sdk.Query.FilterExpression,System.Object)">
            <summary>
            Adds a Condition expression to the filter expression to force the statecode to be a specific value.
            </summary>
            <param name="fe">The Filter Expression.</param>
            <param name="entityStateEnum">The entity state enum value.</param>
            <returns>The Filter expression with the ConditionExpression added</returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.InputContainsAllNonNull(Microsoft.Xrm.Sdk.IExecutionContext,System.String[])">
            <summary>
            Checks to see if the PluginExecutionContext.InputParameters Contains the attribute names, and the value is not null
            </summary>
            <param name="context">The context.</param>
            <param name="parameterNames">The parameter names.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.OutputContainsAllNonNull(Microsoft.Xrm.Sdk.IExecutionContext,System.String[])">
            <summary>
            Checks to see if the PluginExecutionContext.OutputParameters Contains the attribute names, and the value is not null
            </summary>
            <param name="context">The context.</param>
            <param name="parameterNames">The parameter names.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.SharedContainsAllNonNull(Microsoft.Xrm.Sdk.IExecutionContext,System.String[])">
            <summary>
            Checks to see if the PluginExecutionContext.SharedVariables Contains the attribute names, and the value is not null
            </summary>
            <param name="context">The context.</param>
            <param name="parameterNames">The parameter names.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.GetInputParameterValue``1(Microsoft.Xrm.Sdk.IExecutionContext,System.String)">
            <summary>
            Gets the parameter value from the PluginExecutionContext.InputParameters collection, cast to type 'T', or default(T) if the collection doesn't contain a parameter with the given name.
            </summary>
            <typeparam name="T">Type of the parameter to be returned</typeparam>
            <param name="context">The context.</param>
            <param name="parameterName">Name of the parameter.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.GetInputParameterValue(Microsoft.Xrm.Sdk.IExecutionContext,System.String)">
            <summary>
            Gets the parameter value from the ExecutionContext.InputParameters collection, or null if the collection doesn't contain a parameter with the given name.
            </summary>
            <param name="context">The context.</param>
            <param name="parameterName">Name of the parameter.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.GetOutputParameterValue``1(Microsoft.Xrm.Sdk.IExecutionContext,System.String)">
            <summary>
            Gets the parameter value from the OutputParameters collection, cast to type 'T', or default(T) if the collection doesn't contain a parameter with the given name.
            </summary>
            <typeparam name="T">Type of the parameter to be returned</typeparam>
            <param name="context">The context.</param>
            <param name="parameterName">Name of the parameter.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.GetOutputParameterValue(Microsoft.Xrm.Sdk.IExecutionContext,System.String)">
            <summary>
            Gets the parameter value from the OutputParameters collection, or null if the collection doesn't contain a parameter with the given name.
            </summary>
            <param name="context">The context.</param>
            <param name="parameterName">Name of the parameter.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.GetRequestParameters``1(Microsoft.Xrm.Sdk.IExecutionContext)">
            <summary>
            Populates a local version of the request using the parameters from the context.  This exposes (most of) the parameters of that particular request
            </summary>
            <typeparam name="T"></typeparam>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.GetResponseParameters``1(Microsoft.Xrm.Sdk.IExecutionContext)">
            <summary>
            Populates a local version of the response using the parameters from the context.  This exposes (most of) the parameters of that particular response
            </summary>
            <typeparam name="T"></typeparam>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.GetSharedVariable``1(Microsoft.Xrm.Sdk.IExecutionContext,System.String)">
            <summary>
            Gets the variable value from the SharedVariables collection, cast to type 'T', or default(T) if the collection doesn't contain a variable with the given name.
            </summary>
            <typeparam name="T">Type of the variable to be returned</typeparam>
            <param name="context">The context.</param>
            <param name="variableName">Name of the variable.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.GetSharedVariable(Microsoft.Xrm.Sdk.IExecutionContext,System.String)">
            <summary>
            Gets the variable value from the PluginExecutionContext.SharedVariables collection, or null if the collection doesn't contain a variable with the given name.
            </summary>
            <param name="context">The context.</param>
            <param name="variableName">Name of the variable.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.GetService``1(System.IServiceProvider)">
            <summary>
            Gets the service.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="provider">The provider.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.CreateOrganizationService(System.IServiceProvider,System.Nullable{System.Guid})">
            <summary>
            Creates an IOrganization Service using the default IOrganizationServiceFactory
            </summary>
            <param name="provider">The Provider.</param>
            <param name="userId">The UserId to create the service in context of.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.GetLocalOrDefaultText(Microsoft.Xrm.Sdk.Label,System.String)">
            <summary>
            Gets the local or default text.
            </summary>
            <param name="label">The label.</param>
            <param name="defaultIfNull">The default if null.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.StateIs(Microsoft.Xrm.Sdk.Query.LinkEntity,System.Object)">
            <summary>
            Adds a Condition expression to the LinkCriteria of the LinkEntity to force the statecode to be a specific value.
            </summary>
            <param name="link">The link.</param>
            <param name="entityStateEnum">The entity state enum.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.GetValueOrDefault(Microsoft.Xrm.Sdk.Money)">
            <summary>
            Returns the value of the Money, or 0 if it is null
            </summary>
            <param name="money"></param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.GetValueOrDefault(Microsoft.Xrm.Sdk.Money,System.Decimal)">
            <summary>
            Returns the value of the Money, or the default value if it is null
            </summary>
            <param name="money">The Money.</param>
            <param name="defaultValue">The value to default the Money's Value to if it is null.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.NullSafeEquals(Microsoft.Xrm.Sdk.Money,System.Decimal)">
            <summary>
            Allows for Null safe Equals Comparison for more concise code.  i.e.<para />
            if(contact.Salary.NullSafeEquals(1m))<para />
            vs.<para />
            if(contact.Salary != null &amp;&amp; contact.gendercode.Value == 1m)
            </summary>
            <param name="money"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.NullSafeEquals(Microsoft.Xrm.Sdk.Money,Microsoft.Xrm.Sdk.Money)">
            <summary>
            Allows for Null safe Equals Comparison for more concise code.  i.e.<para />
            if(contact.Salary.NullSafeEquals(salary))<para />
            vs.<para />
            if(contact.Salary == salary || contact.Salary != null amps;amps; contact.Salary.Value == salary.Value)
            </summary>
            <param name="money"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.GetValueOrDefault(Microsoft.Xrm.Sdk.OptionSetValue)">
            <summary>
            Returns the value of the OptionSetValue, or int.MinValue if it is null
            </summary>
            <param name="osv"></param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.GetValueOrDefault(Microsoft.Xrm.Sdk.OptionSetValue,System.Int32)">
            <summary>
            Returns the value of the OptionSetValue, or the defaultValue if it is null
            </summary>
            <param name="osv">The OptionSetValue.</param>
            <param name="defaultValue">The value to default the OptionSetValue's Value to if it is null.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.NullSafeEquals(Microsoft.Xrm.Sdk.OptionSetValue,System.Int32)">
            <summary>
            Allows for Null safe Equals Comparison for more concise code.  i.e.
            if(contact.GenderCode.NullSafeEquals(1))
            vs.
            if(contact.GenderCode != null &amp;&amp; contact.GenderCode.Value == 1)
            </summary>
            <param name="osv"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.NullSafeEquals(Microsoft.Xrm.Sdk.OptionSetValue,Microsoft.Xrm.Sdk.OptionSetValue)">
            <summary>
            Allows for Null safe Equals Comparison for more concise code.  i.e.
            if(contact.GenderCode.NullSafeEquals(genderCode))
            vs.
            if(contact.GenderCode == genderCode || contact.GenderCode != null amps;amps; contact.GenderCode.Value == genderCode.Value))
            </summary>
            <param name="osv"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.AddCreate``1(Microsoft.Xrm.Sdk.OrganizationRequestCollection,``0)">
            <summary>
            Adds a CreateRequest to the OrganizationRequestCollection.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="requests">The requests.</param>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:DLaB.Xrm.Extensions.AddDelete(Microsoft.Xrm.Sdk.OrganizationRequestCollection,Microsoft.Xrm.Sdk.EntityReference)">
            <summary>
            Adds a DeleteRequest to the OrganizationRequestCollection.
            </summary>
            <param name="requests">The requests.</param>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:DLaB.Xrm.Extensions.AddDelete``1(Microsoft.Xrm.Sdk.OrganizationRequestCollection,``0)">
            <summary>
            Adds a DeleteRequest to the OrganizationRequestCollection.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="requests">The requests.</param>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:DLaB.Xrm.Extensions.AddRetrieve``1(Microsoft.Xrm.Sdk.OrganizationRequestCollection,System.Guid)">
            <summary>
            Adds a RetrieveRequest to the OrganizationRequestCollection.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="requests">The requests.</param>
            <param name="id">The identifier.</param>
        </member>
        <member name="M:DLaB.Xrm.Extensions.AddRetrieve``1(Microsoft.Xrm.Sdk.OrganizationRequestCollection,System.Guid,Microsoft.Xrm.Sdk.Query.ColumnSet)">
            <summary>
            Adds a RetrieveRequest to the OrganizationRequestCollection.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="requests">The requests.</param>
            <param name="id">The identifier.</param>
            <param name="cs">The cs.</param>
        </member>
        <member name="M:DLaB.Xrm.Extensions.AddRetrieve``1(Microsoft.Xrm.Sdk.OrganizationRequestCollection,System.Guid,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Adds a RetrieveRequest to the OrganizationRequestCollection.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="requests">The requests.</param>
            <param name="id">The identifier.</param>
            <param name="anonymousTypeInitializer">The anonymous type initializer.</param>
        </member>
        <member name="M:DLaB.Xrm.Extensions.AddRetrieveMultiple(Microsoft.Xrm.Sdk.OrganizationRequestCollection,Microsoft.Xrm.Sdk.Query.QueryBase)">
            <summary>
            Adds a retrieve multiple request to the OrganizationRequestCollection.
            </summary>
            <param name="requests">The requests.</param>
            <param name="query">The query.</param>
        </member>
        <member name="M:DLaB.Xrm.Extensions.AddUpdate``1(Microsoft.Xrm.Sdk.OrganizationRequestCollection,``0)">
            <summary>
            Adds an update request to the OrganizationRequestCollection.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="requests">The requests.</param>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:DLaB.Xrm.Extensions.ContainsAllNonNull(Microsoft.Xrm.Sdk.ParameterCollection,System.String[])">
            <summary>
            Checks to see if the ParameterCollection Contains the attribute names, and the value is not null
            </summary>
            <param name="parameters"></param>
            <param name="attributeNames"></param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.GetParameterValue``1(Microsoft.Xrm.Sdk.ParameterCollection,System.String)">
            <summary>
            Gets the parameter value from the collection, cast to type 'T', or default(T) if the collection doesn't contain a parameter with the given name.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="parameters">The ParameterCollection.</param>
            <param name="parameterName">Name of the parameter.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.GetParameterValue(Microsoft.Xrm.Sdk.ParameterCollection,System.String)">
            <summary>
            Gets the parameter value from the collection, or null if the collection doesn't contain a parameter with the given name.
            </summary>
            <param name="parameters">The ParameterCollection.</param>
            <param name="parameterName">Name of the parameter.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">parameterName</exception>
        </member>
        <member name="M:DLaB.Xrm.Extensions.GetAttributeLogicalName(System.Reflection.PropertyInfo,System.Boolean)">
            <summary>
            Gets the logical attribute name of the given property.  Assumes that the property contains an AttributeLogicalNameAttribute
            </summary>
            <param name="property">The property.</param>
            <param name="throwIfNotFound">Throws an error if the property does not contain an AttributeLogicalNameAttribute</param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:DLaB.Xrm.Extensions.First(Microsoft.Xrm.Sdk.Query.QueryByAttribute)">
            <summary>
            Sets the Count and Page number of the query to return just the first entity.
            </summary>
            <param name="query">The query.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.Take(Microsoft.Xrm.Sdk.Query.QueryByAttribute,System.Int32)">
            <summary>
            Updates the Query to only return only the first entity that matches the query criteria.
            Shortcut for setting the Query's PageInfo.Count and PageInfo.PageNumber to 1.
            </summary>
            <param name="query">The query.</param>
            <param name="count">The count of entities to restrict the result of the query to.</param>
        </member>
        <member name="M:DLaB.Xrm.Extensions.First(Microsoft.Xrm.Sdk.Query.QueryBase)">
            <summary>
            Sets the Count and Page number of the query to return just the first entity.
            </summary>
            <param name="query">The query.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.Take(Microsoft.Xrm.Sdk.Query.QueryBase,System.Int32)">
            <summary>
            Updates the Query to only return only the first entity that matches the query criteria.
            Shortcut for setting the Query's PageInfo.Count and PageInfo.PageNumber to 1.
            </summary>
            <param name="qb">The query.</param>
            <param name="count">The count of entities to restrict the result of the query to.</param>
        </member>
        <member name="M:DLaB.Xrm.Extensions.ActiveOnly``1(Microsoft.Xrm.Sdk.Query.QueryExpression)">
            <summary>
            Depending on the Type of T, adds the correct is active criteria Statement
            Note: Does not work for Linked Entities
            </summary>
            <typeparam name="T"></typeparam>
            <param name="qe"></param>
        </member>
        <member name="M:DLaB.Xrm.Extensions.ActiveOnly(Microsoft.Xrm.Sdk.Query.QueryExpression,System.String)">
            <summary>
            Depending on the Type of T, adds the correct is active criteria Statement
            Note: Does not work for Linked Entities
            </summary>
            <param name="qe"></param>
            <param name="logicalName">The logical name of the entity to have the active only enforced.</param>
        </member>
        <member name="M:DLaB.Xrm.Extensions.First(Microsoft.Xrm.Sdk.Query.QueryExpression)">
            <summary>
            Sets the Count and Page number of the query to return just the first entity.
            </summary>
            <param name="query">The query.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.StateIs(Microsoft.Xrm.Sdk.Query.QueryExpression,System.Object)">
            <summary>
            Updates the QueryExpression to only return entities with the given state.
            </summary>
            <param name="qe">The qe.</param>
            <param name="entityStateEnum">The entity state enum.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.Take(Microsoft.Xrm.Sdk.Query.QueryExpression,System.Int32)">
            <summary>
            Updates the Query to only return only the first entity that matches the query criteria.
            Shortcut for setting the Query's PageInfo.Count and PageInfo.PageNumber to 1.
            </summary>
            <param name="qe">The query.</param>
            <param name="count">The count of entities to restrict the result of the query to.</param>
        </member>
        <member name="M:DLaB.Xrm.Extensions.DeserializeEntity``1(System.String)">
            <summary>
            Deserializes the string xml value to a specific entity type.
            </summary>
            <typeparam name="T">The type of entity to deserialize the xml to.</typeparam>
            <param name="xml">The xml to deserialize.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.DeserializeEntity(System.String)">
            <summary>
            Deserializes the string xml value to an Entity
            </summary>
            <param name="xml">The xml to deserialize.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.DeserializeDataObject``1(System.String)">
            <summary>
            Deserializes the string xml value to an IExtensibleDataObject
            </summary>
            <param name="xml"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.HasCondition(Microsoft.Xrm.Sdk.Query.FilterExpression,System.Object[])">
            <summary>
            Determines whether the specified entity name has condition.
            </summary>
            <param name="filter">The filter.</param>
            <param name="columnNameAndValuePairs">The column name and value pairs.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.HasCondition(Microsoft.Xrm.Sdk.Query.FilterExpression,Microsoft.Xrm.Sdk.Query.ConditionExpression)">
            <summary>
            Determines whether the current filter has the given condition.
            </summary>
            <param name="filter">The filter.</param>
            <param name="condition">The condition.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.GetEntityFilters(Microsoft.Xrm.Sdk.Query.LinkEntity,System.String)">
            <summary>
            Returns all Filters that are filtering on the given entity logical name
            </summary>
            <param name="link"></param>
            <param name="logicalName"></param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.HasCondition(Microsoft.Xrm.Sdk.Query.LinkEntity,System.Object[])">
            <summary>
            Determines whether the current entity link has all the conditions generated by the columnNameAndValuePairs.
            </summary>
            <param name="link">The link.</param>
            <param name="columnNameAndValuePairs">The column name and value pairs.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.HasCondition(Microsoft.Xrm.Sdk.Query.LinkEntity,Microsoft.Xrm.Sdk.Query.ConditionExpression)">
            <summary>
            Determines whether current LinkEntity has the given condition.
            </summary>
            <param name="link">The link.</param>
            <param name="condition">The condition.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.HasEntity(Microsoft.Xrm.Sdk.Query.LinkEntity,System.String)">
            <summary>
            Determines whether the specified logical name has entity.
            </summary>
            <param name="link">The link.</param>
            <param name="logicalName">Name of the logical.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.GetEntityFilters(Microsoft.Xrm.Sdk.Query.QueryExpression,System.String)">
            <summary>
            Returns all Filters that are filtering on the given entity logical name
            </summary>
            <param name="qe"></param>
            <param name="logicalName"></param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.HasCondition(Microsoft.Xrm.Sdk.Query.QueryExpression,System.Object[])">
            <summary>
            Determines whether the current QueryExpression has all conditions defined by the columnNameAndValuePairs.
            </summary>
            <param name="qe">The qe.</param>
            <param name="columnNameAndValuePairs">The column name and value pairs.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.HasCondition(Microsoft.Xrm.Sdk.Query.QueryExpression,Microsoft.Xrm.Sdk.Query.ConditionExpression)">
            <summary>
            Determines whether the current QueryExpression has the given condition.
            </summary>
            <param name="qe">The qe.</param>
            <param name="condition">The condition.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.HasEntity(Microsoft.Xrm.Sdk.Query.QueryExpression,System.String)">
            <summary>
            Determines whether the specified logical name has entity.
            </summary>
            <param name="qe">The qe.</param>
            <param name="logicalName">Name of the logical.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.HasConditionInWithValues(Microsoft.Xrm.Sdk.Query.FilterExpression,System.Object[])">
            <summary>
            Determines whether current filter has the in condition defined by the columnNameAndValuePairs
            </summary>
            <param name="filter">The filter.</param>
            <param name="columnNameAndValuePairs">The column name and value pairs.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">HasConditionInWithValues requires the first value in the columnNameAndValuePairs attribute to be the attribute name.;columnNameAndValuePairs</exception>
        </member>
        <member name="M:DLaB.Xrm.Extensions.HasConditionInWithValues(Microsoft.Xrm.Sdk.Query.LinkEntity,System.Object[])">
            <summary>
            Determines whether [has condition in with values] [the specified column name and value pairs].
            </summary>
            <param name="link">The link.</param>
            <param name="columnNameAndValuePairs">The column name and value pairs.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.HasConditionInWithValues(Microsoft.Xrm.Sdk.Query.QueryExpression,System.Object[])">
            <summary>
            Determines whether current query expression has the in condition defined by the columnNameAndValuePairs
            </summary>
            <param name="qe">The qe.</param>
            <param name="columnNameAndValuePairs">The column name and value pairs.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.Assign(Microsoft.Xrm.Sdk.IOrganizationService,Microsoft.Xrm.Sdk.EntityReference,Microsoft.Xrm.Sdk.EntityReference)">
            <summary>
            Assigns the supplied entity to the supplied user
            </summary>
            <param name="service"></param>
            <param name="target"></param>
            <param name="newOwner"></param>
        </member>
        <member name="M:DLaB.Xrm.Extensions.Assign(Microsoft.Xrm.Sdk.IOrganizationService,Microsoft.Xrm.Sdk.Entity,System.Guid)">
            <summary>
            Reassigns the owner of the entity to the new owner
            </summary>
            <param name="service"></param>
            <param name="itemToChangeOwnershipOf">Must have Logical Name and Id Populated</param>
            <param name="userId"></param>
        </member>
        <member name="M:DLaB.Xrm.Extensions.Assign(Microsoft.Xrm.Sdk.IOrganizationService,Microsoft.Xrm.Sdk.EntityReference,System.Guid)">
            <summary>
            Reassigns the owner of the entity to the new owner
            </summary>
            <param name="service"></param>
            <param name="itemToChangeOwnershipOf">Must have Logical Name and Id Populated</param>
            <param name="userId"></param>
        </member>
        <member name="M:DLaB.Xrm.Extensions.AssignTeam(Microsoft.Xrm.Sdk.IOrganizationService,Microsoft.Xrm.Sdk.Entity,System.Guid)">
            <summary>
            Reassigns the owner of the entity to the new owner
            </summary>
            <param name="service"></param>
            <param name="itemToChangeOwnershipOf">Must have Logical Name and Id Populated</param>
            <param name="teamId"></param>
        </member>
        <member name="M:DLaB.Xrm.Extensions.AssignTeam(Microsoft.Xrm.Sdk.IOrganizationService,Microsoft.Xrm.Sdk.EntityReference,System.Guid)">
            <summary>
            Reassigns the owner of the entity to the new owner
            </summary>
            <param name="service"></param>
            <param name="itemToChangeOwnershipOf">Must have Logical Name and Id Populated</param>
            <param name="teamId"></param>
        </member>
        <member name="M:DLaB.Xrm.Extensions.Associate(Microsoft.Xrm.Sdk.IOrganizationService,Microsoft.Xrm.Sdk.Entity,System.String,Microsoft.Xrm.Sdk.Entity[])">
            <summary>
            Associates one or more entities to an entity.
            </summary>
            <param name="service"></param>
            <param name="entity"></param>
            <param name="relationshipLogicalName"></param>
            <param name="entities"></param>
        </member>
        <member name="M:DLaB.Xrm.Extensions.Associate(Microsoft.Xrm.Sdk.IOrganizationService,Microsoft.Xrm.Sdk.EntityReference,System.String,Microsoft.Xrm.Sdk.EntityReference[])">
            <summary>
            Associates one or more entities to an entity.
            </summary>
            <param name="service"></param>
            <param name="entity"></param>
            <param name="relationshipLogicalName"></param>
            <param name="entities"></param>
        </member>
        <member name="M:DLaB.Xrm.Extensions.CreateWithSuppressDuplicateDetection(Microsoft.Xrm.Sdk.IOrganizationService,Microsoft.Xrm.Sdk.Entity)">
            <summary>
            Creates a record with SuppressDuplicateDetection Enabled to Ignore any potential Duplicates Created
            </summary>
            <param name="service"></param>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.Delete(Microsoft.Xrm.Sdk.IOrganizationService,Microsoft.Xrm.Sdk.Entity)">
            <summary>
            Deletes the specified entity
            </summary>
            <param name="service">The service.</param>
            <param name="entity">The entity to be deleted.</param>
        </member>
        <member name="M:DLaB.Xrm.Extensions.Delete(Microsoft.Xrm.Sdk.IOrganizationService,Microsoft.Xrm.Sdk.EntityReference)">
            <summary>
            Deletes the specified entity  
            </summary>
            <param name="service"></param>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.DeleteIfExists(Microsoft.Xrm.Sdk.IOrganizationService,Microsoft.Xrm.Sdk.Entity)">
            <summary>
            Attempts to delete the entity with the given id. If it doesn't exist, false is returned
            </summary>
            <param name="service">The service.</param>
            <param name="entity">The entity to delete if it exists.</param>
        </member>
        <member name="M:DLaB.Xrm.Extensions.DeleteIfExists(Microsoft.Xrm.Sdk.IOrganizationService,System.String,Microsoft.Xrm.Sdk.Query.FilterExpression)">
            <summary>
            Delete all active entities in the entity specified by the LogicalName and the Filter Expression
            </summary>
            <param name="service">The service.</param>
            <param name="logicalName">The logical name of the entity that will be deleted.</param>
            <param name="fe">The filter expression to use to determine what records to delete.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.DeleteIfExists(Microsoft.Xrm.Sdk.IOrganizationService,System.String,System.Guid)">
            <summary>
            Attempts to delete the entity with the given id. If it doesn't exist, false is returned
            </summary>
            <param name="service">The service.</param>
            <param name="entityName">Name of the entity.</param>
            <param name="id">The id of the entity to search and potentially delete.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.DeleteIfExists(Microsoft.Xrm.Sdk.IOrganizationService,Microsoft.Xrm.Sdk.Query.QueryExpression)">
            <summary>
            Delete all entities that are returned by the Query Expression.
            </summary>
            <param name="service">The Service</param>
            <param name="qe">The query expression used to define the set of entities to delete</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.DeleteIfExistsWithRetry(Microsoft.Xrm.Sdk.IOrganizationService,System.String,System.Guid,System.Int32)">
            <summary>
            There have been Generic SQL errors caused with calling this while using multi-threading.  This hopefully
            will fix that
            </summary>
            <param name="service">The service.</param>
            <param name="entityName">Name of the entity.</param>
            <param name="id">The id.</param>
            <param name="retryCount">The retry count.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.ExecuteMultiple(Microsoft.Xrm.Sdk.IOrganizationService,Microsoft.Xrm.Sdk.OrganizationRequestCollection,System.Boolean,System.Boolean)">
            <summary>
            Executes a batch of requests against the CRM Web Service using the ExecuteMultipleRequest command.
            </summary>
            <remarks>
            ExecuteMultipleRequest allows for a maximum of 1000 messages to be processed in a single batch job.
            </remarks>
            <param name="service">Organization Service proxy for connecting to the relevant CRM instance.</param>
            <param name="requestCollection">Collection of organization requests to execute against the CRM Web Services.</param>
            <param name="returnResponses">Indicates if responses should be returned for the action taken on each entity in the bulk operation.</param>
            <param name="continueOnError">Indicates if the batch job should continue if an error occurs for any of the entities being processed. Default is true.</param>
            <returns>Returns the <see cref="T:Microsoft.Xrm.Sdk.Messages.ExecuteMultipleResponse"/> containing responses and faults from the operation if the returnResponses parameter is set to true; otherwise returns null. Default is true.</returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.GetAllEntities``1(Microsoft.Xrm.Sdk.IOrganizationService,Microsoft.Xrm.Sdk.Query.QueryExpression,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Gets all entities using the Query Expression
            </summary>
            <typeparam name="T">Type of Entity List to return</typeparam>
            <param name="service">The service.</param>
            <param name="qe">Query Expression to Execute.</param>
            <param name="maxCount">The maximum number of entities to retrieve.  Use null for default.</param>
            <param name="pageSize">Number of records to return in each fetch.  Use null for default.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.GetAllEntities``1(Microsoft.Xrm.Sdk.IOrganizationService,DLaB.Xrm.TypedQueryExpression{``0},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Gets all entities using the Query Expression
            </summary>
            <typeparam name="T">Type of Entity List to return</typeparam>
            <param name="service">The service.</param>
            <param name="qe">Query Expression to Execute.</param>
            <param name="maxCount">The maximum number of entities to retrieve.  Use null for default.</param>
            <param name="pageSize">Number of records to return in each fetch.  Use null for default.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.GetCurrentlyExecutingUserInfo(Microsoft.Xrm.Sdk.IOrganizationService)">
            <summary>
            Returns the WhoAmIResponse to determine the current user's UserId, BusinessUnitId, and OrganizationId
            </summary>
            <param name="service"></param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.GetEntity``1(Microsoft.Xrm.Sdk.IOrganizationService,System.Guid)">
            <summary>
            Retrieves the Entity of the given type with the given Id, with all columns
            </summary>
            <typeparam name="T">An early bound Entity Type</typeparam>
            <param name="service">open IOrganizationService</param>
            <param name="id">Primary Key of Entity</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.GetEntity``1(Microsoft.Xrm.Sdk.IOrganizationService,System.Guid,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Retrieves the Entity of the given type with the given Id, with the given columns
            </summary>
            <typeparam name="T">An early bound Entity Type</typeparam>
            <param name="service">open IOrganizationService</param>
            <param name="id">Primary Key of Entity</param>
            <param name="anonymousTypeInitializer">An Anonymous Type Initializer where the properties of the anonymous
            type are the column names to add</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.GetEntity``1(Microsoft.Xrm.Sdk.IOrganizationService,System.Guid,Microsoft.Xrm.Sdk.Query.ColumnSet)">
            <summary>
            Retrieves the Entity of the given type with the given Id, with the given columns
            </summary>
            <typeparam name="T">An early bound Entity Type</typeparam>
            <param name="service">open IOrganizationService</param>
            <param name="id">Primary Key of Entity</param>
            <param name="columnSet">Columns to retrieve</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.GetEntityLogicalName(Microsoft.Xrm.Sdk.IOrganizationService,System.Int32,System.Boolean)">
            <summary>
            Gets the Entity Logical Name for the given object Type Code
            </summary>
            <param name="service"></param>
            <param name="objectTypeCode">The Object Type Code</param>
            <param name="useCache">Allows for caching the calls in a thread safe manner</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.GetEntities``1(Microsoft.Xrm.Sdk.IOrganizationService,Microsoft.Xrm.Sdk.Query.QueryBase)">
            <summary>
            Returns first 5000 entities using the Query Expression
            </summary>
            <typeparam name="T">Type of Entity List to return</typeparam>
            <param name="service">The service.</param>
            <param name="qb">Query to Execute.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.GetEntities``1(Microsoft.Xrm.Sdk.IOrganizationService,DLaB.Xrm.TypedQueryExpression{``0})">
            <summary>
            Returns first 5000 entities using the Query Expression
            </summary>
            <typeparam name="T">Type of Entity List to return</typeparam>
            <param name="service">The service.</param>
            <param name="qe">Query Expression to Execute.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.GetFirst``1(Microsoft.Xrm.Sdk.IOrganizationService,Microsoft.Xrm.Sdk.Query.QueryExpression)">
            <summary>
            Gets the first entity that matches the query expression.  An exception is thrown if none are found.
            </summary>
            <typeparam name="T">The Entity Type.</typeparam>
            <param name="service">The service.</param>
            <param name="qe">The query expression.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.GetFirst``1(Microsoft.Xrm.Sdk.IOrganizationService,DLaB.Xrm.TypedQueryExpression{``0})">
            <summary>
            Gets the first entity that matches the query expression.  An exception is thrown if none are found.
            </summary>
            <typeparam name="T">The Entity Type.</typeparam>
            <param name="service">The service.</param>
            <param name="qe">The query expression.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.GetFirstOrDefault(Microsoft.Xrm.Sdk.IOrganizationService,Microsoft.Xrm.Sdk.Query.QueryBase)">
            <summary>
            Gets the first entity that matches the query expression.  Null is returned if none are found.
            </summary>
            <param name="service">The service.</param>
            <param name="query">The query.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.GetFirstOrDefault``1(Microsoft.Xrm.Sdk.IOrganizationService,Microsoft.Xrm.Sdk.Query.FetchExpression)">
            <summary>
            Gets the first entity that is returned by the fetch expression.  Null is returned if none are found.
            </summary>
            <typeparam name="T">The Entity Type.</typeparam>
            <param name="service">The service.</param>
            <param name="fe">The fetch expression.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.GetFirstOrDefault``1(Microsoft.Xrm.Sdk.IOrganizationService,Microsoft.Xrm.Sdk.Query.QueryBase)">
            <summary>
            Gets the first entity that matches the query.  Null is returned if none are found.
            </summary>
            <typeparam name="T">The Entity Type.</typeparam>
            <param name="service">The service.</param>
            <param name="qb">The query.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.GetFirstOrDefault``1(Microsoft.Xrm.Sdk.IOrganizationService,DLaB.Xrm.TypedQueryExpression{``0})">
            <summary>
            Gets the first entity that matches the query expression.  Null is returned if none are found.
            </summary>
            <typeparam name="T">The Entity Type.</typeparam>
            <param name="service">The service.</param>
            <param name="qe">The query expression.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.GetUserLocalTime(Microsoft.Xrm.Sdk.IOrganizationService,System.Guid,System.Nullable{System.DateTime},System.Int32)">
            <summary>
            Gets the local time from the UTC time.
            </summary>
            <param name="service"></param>
            <param name="userId">The id of the user to lookup the timezone code user settings</param>
            <param name="utcTime">The given UTC time to find the user's local time for.  Defaults to DateTime.UtcNow</param>
            <param name="defaultTimeZoneCode">Default TimeZoneCode if the user has no TimeZoneCode defined.  Defaults to EDT.</param>
        </member>
        <member name="M:DLaB.Xrm.Extensions.RetrieveUserSettingsTimeZoneCode(Microsoft.Xrm.Sdk.IOrganizationService,System.Guid)">
            <summary>
            Retrieves the current users TimeZoneCode
            </summary>
        </member>
        <member name="M:DLaB.Xrm.Extensions.InitializeFrom(Microsoft.Xrm.Sdk.IOrganizationService,Microsoft.Xrm.Sdk.EntityReference,System.String,Microsoft.Crm.Sdk.Messages.TargetFieldType)">
            <summary>
            Utilizes the standard OOB Mappings from CRM to hydrate fields on child record from a parent.
            </summary>
            <param name="service">The service.</param>
            <param name="parentEntity">The Parent Entity.</param>
            <param name="childLogicalName">The logical name of the child</param>
            <param name="targetFieldType">The Target Field Type</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.InitializeFrom``1(Microsoft.Xrm.Sdk.IOrganizationService,Microsoft.Xrm.Sdk.EntityReference,Microsoft.Crm.Sdk.Messages.TargetFieldType)">
            <summary>
            Utilizes the standard OOB Mappings from CRM to hydrate fields on child record from a parent.
            </summary>
            <typeparam name="T">The Entity Type to Return</typeparam>
            <param name="service">The service.</param>
            <param name="parentEntity">The Parent Entity.</param>
            <param name="targetFieldType">The Target Field Type</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.SetState(Microsoft.Xrm.Sdk.IOrganizationService,Microsoft.Xrm.Sdk.EntityReference,System.Int32,System.Nullable{System.Int32})">
            <summary>
            Sets the state
            </summary>
            <param name="service">The service.</param>
            <param name="entity">The entity to set the state of.</param>
            <param name="state">The state to change the entity to.</param>
            <param name="status">The status to change the entity to.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.SetState(Microsoft.Xrm.Sdk.IOrganizationService,Microsoft.Xrm.Sdk.Entity,System.Int32,System.Nullable{System.Int32})">
            <summary>
            Sets the state
            </summary>
            <param name="service">The service.</param>
            <param name="entity">The entity to set the state of.</param>
            <param name="state">The state to change the entity to.</param>
            <param name="status">The status to change the entity to.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.SetState(Microsoft.Xrm.Sdk.IOrganizationService,System.String,System.Guid,System.Boolean)">
            <summary>
            Currently only tested against System Users.  Not sure if it will work with other entities
            May need to rename this to SetSystemUserState
            </summary>
            <param name="service">The service.</param>
            <param name="logicalName">logical name of the entity.</param>
            <param name="id">The id of the entity.</param>
            <param name="active">if set to <c>true</c> [active].</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.SetState(Microsoft.Xrm.Sdk.IOrganizationService,Microsoft.Xrm.Sdk.EntityReference,System.Boolean)">
            <summary>
            Currently only tested against System Users.  Not sure if it will work with other entities
            May need to rename this to SetSystemUserState
            </summary>
            <param name="service">The service.</param>
            <param name="entity">The entity.</param>
            <param name="active">if set to <c>true</c> [active].</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.TryDelete(Microsoft.Xrm.Sdk.IOrganizationService,System.String,System.Guid)">
            <summary>
            Attempts to delete the Entity, eating the error if it doesn't exist
            </summary>
            <param name="service">The service.</param>
            <param name="logicalName">Logical name of the entity.</param>
            <param name="id">The id.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.UpdateWithSuppressDuplicateDetection(Microsoft.Xrm.Sdk.IOrganizationService,Microsoft.Xrm.Sdk.Entity)">
            <summary>
            Creates a record with SuppressDuplicateDetection Enabled to Ignore any potential Duplicates Created
            </summary>
            <param name="service"></param>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.GetStatement(Microsoft.Xrm.Sdk.Query.ConditionExpression,System.String)">
            <summary>
            Gets the SQL like statement of the ConditionExpression
            </summary>
            <param name="ce">The ConditionExpression</param>
            <param name="entityName"></param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.GetStatement(Microsoft.Xrm.Sdk.Query.FilterExpression,System.String)">
            <summary>
            Returns a SQL-ish Representation of the filter
            </summary>
            <param name="filter"></param>
            <param name="entityName"></param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.GetSqlStatement(Microsoft.Xrm.Sdk.Query.QueryExpression)">
            <summary>
            Returns a SQL-ish representation of the QueryExpression's Criteria
            </summary>
            <param name="qe"></param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.WalkAllLinkedEntities(Microsoft.Xrm.Sdk.Query.QueryExpression)">
            <summary>
            Enumerates over all LinkEntities in the QueryExpression, in a depth-first search
            </summary>
            <param name="qe"></param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.WalkAllLinkedEntities(Microsoft.Xrm.Sdk.Query.LinkEntity)">
            <summary>
            Enumerates over all LinkEntities in the LinkEntity, in a depth-first search
            </summary>
            <param name="link"></param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.ToStringDebug(System.Byte[])">
            <summary>
            Returns the length of the number of byte array
            </summary>
            <param name="bits">The Byte Array.</param>
        </member>
        <member name="M:DLaB.Xrm.Extensions.ToStringDebug(System.Collections.Generic.Dictionary{System.String,System.String},DLaB.Xrm.StringDebugInfo)">
            <summary>
            Iterates and displays the values of the dictionary.
            </summary>
            <param name="dict">The dictionary.</param>
            <param name="info">Optional arguments.</param>
        </member>
        <member name="M:DLaB.Xrm.Extensions.ToStringAttributes(Microsoft.Xrm.Sdk.Entity,DLaB.Xrm.StringDebugInfo)">
            <summary>
            Iterates and displays the attributes listed in the entity's Attributes collection.
            </summary>
            <param name="entity">The entity.</param>
            <param name="info">Optional arguments.</param>
        </member>
        <member name="M:DLaB.Xrm.Extensions.ToStringDebug(Microsoft.Xrm.Sdk.Entity,DLaB.Xrm.StringDebugInfo)">
            <summary>
            Iterates and displays the attributes listed in the entity's Attributes collection as well as the Id and LogicalName.
            </summary>
            <param name="entity">The entity.</param>
            <param name="info">Optional arguments.</param>
        </member>
        <member name="M:DLaB.Xrm.Extensions.ToStringDebug(Microsoft.Xrm.Sdk.EntityCollection,DLaB.Xrm.StringDebugInfo)">
            <summary>
            Iterates and displays the entities in the entity collection.
            </summary>
            <param name="collection">The collection.</param>
            <param name="info">Optional arguments.</param>
        </member>
        <member name="M:DLaB.Xrm.Extensions.ToStringDebug(Microsoft.Xrm.Sdk.EntityImageCollection,System.String,DLaB.Xrm.StringDebugInfo)">
            <summary>
            Iterates and displays the entity images in the entity image collection.
            </summary>
            <param name="images">The images.</param>
            <param name="name">The name.</param>
            <param name="info">Optional arguments.</param>
        </member>
        <member name="M:DLaB.Xrm.Extensions.ToStringDebug(Microsoft.Xrm.Sdk.EntityReference)">
            <summary>
            Returns the Logical Name, Name, and Id of the EntityReference
            </summary>
            <param name="entity">The EntityReference.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.ToStringDebug(Microsoft.Xrm.Sdk.EntityReferenceCollection,DLaB.Xrm.StringDebugInfo)">
            <summary>
            Iterates and displays the entity references in the entity reference collection.
            </summary>
            <param name="collection">The collection.</param>
            <param name="info">Optional arguments.</param>
        </member>
        <member name="M:DLaB.Xrm.Extensions.ToStringDebug(System.Collections.IEnumerable,DLaB.Xrm.StringDebugInfo)">
            <summary>
            Iterates and displays the values in the IEnumerable.
            </summary>
            <param name="collection">The images.</param>
            <param name="info">Optional arguments.</param>
        </member>
        <member name="M:DLaB.Xrm.Extensions.ToStringDebug(Microsoft.Xrm.Sdk.IExecutionContext)">
            <summary>
            Returns an in depth view of the context
            </summary>
            <param name="context">The Context</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.ToStringDebug(Microsoft.Xrm.Sdk.ParameterCollection,System.String,DLaB.Xrm.StringDebugInfo)">
            <summary>
            Iterates and displays the parameters in the parameter collection.
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="name">The name.</param>
            <param name="info">Optional arguments.</param>
        </member>
        <member name="M:DLaB.Xrm.Extensions.ToStringDebug(Microsoft.Xrm.Sdk.IPluginExecutionContext)">
            <summary>
            Returns an in-depth view of the context
            </summary>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.WhereEqual(Microsoft.Xrm.Sdk.Query.FilterExpression,System.Object[])">
            <summary>
            Adds the column name and value pairs as conditions.  The columnNameAndValuePairs can contain a paired list of attribute names and their values,
            -or- ConditionExpressions
            </summary>
            <param name="filterExpression"></param>
            <param name="columnNameAndValuePairs">List of pairs that look like this:
            (string name of the column, value of the column) ie. "name", "John Doe" </param>
        </member>
        <member name="M:DLaB.Xrm.Extensions.GetOrFilter(Microsoft.Xrm.Sdk.Query.FilterExpression,System.Int32[])">
            <summary>
            Helper function to get the or filter based on the FilterExpression.  If it already is or, just return it.
            Else, return a new child or filter
            </summary>
            <param name="filterExpression"></param>
            <param name="ors"></param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.GetAllEntities(Microsoft.Xrm.Sdk.IOrganizationService,System.String,System.Object[])">
            <summary>
            Gets all Entities where the columnNameAndValue Pairs match
            </summary>
            <param name="service"></param>
            <param name="logicalName">LogicalName of the Entity.</param>
            <param name="columnNameAndValuePairs">List of pairs that look like this:
            (string name of the column, value of the column) ie. "name", "John Doe" </param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.GetAllEntities(Microsoft.Xrm.Sdk.IOrganizationService,System.String,Microsoft.Xrm.Sdk.Query.ColumnSet,System.Object[])">
            <summary>
            Gets all Entities where the columnNameAndValue Pairs match
            </summary>
            <param name="service"></param>
            <param name="logicalName">LogicalName of the Entity.</param>
            <param name="columnSet">Columns to retrieve</param>
            <param name="columnNameAndValuePairs">List of pairs that look like this:
            (string name of the column, value of the column) ie. "name", "John Doe" </param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.GetAllEntities``1(Microsoft.Xrm.Sdk.IOrganizationService,System.Object[])">
            <summary>
            Gets all Entities where the columnNameAndValue Pairs match
            </summary>
            <typeparam name="T">Type of Entity List to return</typeparam>
            <param name="service"></param>
            <param name="columnNameAndValuePairs">List of pairs that look like this:
            (string name of the column, value of the column) ie. "name", "John Doe" </param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.GetAllEntities``1(Microsoft.Xrm.Sdk.IOrganizationService,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object[])">
            <summary>
            Gets all Entities where the columnNameAndValue Pairs match
            </summary>
            <typeparam name="T">Type of Entity List to return</typeparam>
            <param name="service"></param>
            <param name="anonymousTypeInitializer">An Anonymous Type Initializer where the properties of the anonymous
            type are the column names to add</param>
            <param name="columnNameAndValuePairs">List of pairs that look like this:
            (string name of the column, value of the column) ie. "name", "John Doe" </param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.GetAllEntities``1(Microsoft.Xrm.Sdk.IOrganizationService,Microsoft.Xrm.Sdk.Query.ColumnSet,System.Object[])">
            <summary>
            Gets all Entities where the columnNameAndValue Pairs match
            </summary>
            <typeparam name="T">Type of Entity List to return</typeparam>
            <param name="service"></param>
            <param name="columnSet">Columns to retrieve</param>
            <param name="columnNameAndValuePairs">List of pairs that look like this:
            (string name of the column, value of the column) ie. "name", "John Doe" </param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.GetEntities(Microsoft.Xrm.Sdk.IOrganizationService,System.String,System.Object[])">
            <summary>
            Gets first 5000 Active Entities where the columnNameAndValue Pairs match
            </summary>
            <param name="service">The service.</param>
            <param name="logicalName">LogicalName of the Entity.</param>
            <param name="columnNameAndValuePairs">List of pairs that look like this:
            (string name of the column, value of the column) ie. "name", "John Doe"</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.GetEntities(Microsoft.Xrm.Sdk.IOrganizationService,System.String,Microsoft.Xrm.Sdk.Query.ColumnSet,System.Object[])">
            <summary>
            Gets first 5000 Active Entities (with the given subset of columns only) 
            where the columnNameAndValue Pairs match
            </summary>
            <param name="service"></param>
            <param name="logicalName">LogicalName of the Entity.</param>
            <param name="columnSet">Columns to retrieve</param>
            <param name="columnNameAndValuePairs">List of pairs that look like this:
            (string name of the column, value of the column) ie. "name", "John Doe" </param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.GetEntities``1(Microsoft.Xrm.Sdk.IOrganizationService,System.Object[])">
            <summary>
            Gets first 5000 Active Entities where the columnNameAndValue Pairs match
            </summary>
            <typeparam name="T">Type of Entity List to return</typeparam>
            <param name="service"></param>
            <param name="columnNameAndValuePairs">List of pairs that look like this:
            (string name of the column, value of the column) ie. "name", "John Doe" </param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.GetEntities``1(Microsoft.Xrm.Sdk.IOrganizationService,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object[])">
            <summary>
            Gets first 5000 Active Entities (with the given subset of columns only) 
            where the columnNameAndValue Pairs match
            </summary>
            <typeparam name="T">Type of Entity List to return</typeparam>
            <param name="service"></param>
            <param name="anonymousTypeInitializer">An Anonymous Type Initializer where the properties of the anonymous
            type are the column names to add</param>
            <param name="columnNameAndValuePairs">List of pairs that look like this:
            (string name of the column, value of the column) ie. "name", "John Doe" </param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.GetEntities``1(Microsoft.Xrm.Sdk.IOrganizationService,Microsoft.Xrm.Sdk.Query.ColumnSet,System.Object[])">
            <summary>
            Gets first 5000 Active Entities (with the given subset of columns only) 
            where the columnNameAndValue Pairs match
            </summary>
            <typeparam name="T">Type of Entity List to return</typeparam>
            <param name="service"></param>
            <param name="columnSet">Columns to retrieve</param>
            <param name="columnNameAndValuePairs">List of pairs that look like this:
            (string name of the column, value of the column) ie. "name", "John Doe" </param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.GetFirst(Microsoft.Xrm.Sdk.IOrganizationService,System.String,System.Object[])">
            <summary>
            Retrieves the first Active entity where the columnNameAndValue Pairs match
            </summary>
            <param name="service">open IOrganizationService</param>
            <param name="logicalName">LogicalName of the Entity.</param>
            <param name="columnNameAndValuePairs">List of pairs that look like this:
            (string name of the column, value of the column) ie. "name","John Doe" goes to entity.name = "John Doe"</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.GetFirst(Microsoft.Xrm.Sdk.IOrganizationService,System.String,Microsoft.Xrm.Sdk.Query.ColumnSet,System.Object[])">
            <summary>
            Retrieves the first Active entity (with the given subset of columns only)
            where the columnNameAndValue Pairs match
            </summary>
            <param name="service">The service.</param>
            <param name="logicalName">LogicalName of the Entity.</param>
            <param name="columnSet">Columns to retrieve</param>
            <param name="columnNameAndValuePairs">List of pairs that look like this:
            (string name of the column, value of the column) ie. "name","John Doe" goes to entity.name = "John Doe"</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.GetFirst``1(Microsoft.Xrm.Sdk.IOrganizationService,System.Object[])">
            <summary>
            Retrieves the first Active entity where the columnNameAndValue Pairs match
            </summary>
            <typeparam name="T">An early bound Entity Type</typeparam>
            <param name="service">open IOrganizationService</param>
            <param name="columnNameAndValuePairs">List of pairs that look like this:
            (string name of the column, value of the column) ie. "name","John Doe" goes to entity.name = "John Doe"
            </param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.GetFirst``1(Microsoft.Xrm.Sdk.IOrganizationService,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object[])">
            <summary>
            Retrieves the first Active entity (with the given subset of columns only) 
            where the columnNameAndValue Pairs match
            </summary>
            <typeparam name="T">An early bound Entity Type</typeparam>
            <param name="service"></param>
            <param name="anonymousTypeInitializer">An Anonymous Type Initializer where the properties of the anonymous
            type are the column names to add</param>
            <param name="columnNameAndValuePairs">List of pairs that look like this:
            (string name of the column, value of the column) ie. "name","John Doe" goes to entity.name = "John Doe"
            </param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.GetFirst``1(Microsoft.Xrm.Sdk.IOrganizationService,Microsoft.Xrm.Sdk.Query.ColumnSet,System.Object[])">
            <summary>
            Retrieves the first Active entity (with the given subset of columns only) 
            where the columnNameAndValue Pairs match
            </summary>
            <typeparam name="T">An early bound Entity Type</typeparam>
            <param name="service"></param>
            <param name="columnSet">Columns to retrieve</param>
            <param name="columnNameAndValuePairs">List of pairs that look like this:
            (string name of the column, value of the column) ie. "name","John Doe" goes to entity.name = "John Doe"
            </param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.GetFirstOrDefault(Microsoft.Xrm.Sdk.IOrganizationService,System.String,System.Object[])">
            <summary>
            Retrieves the first Active entity where the columnNameAndValue Pairs match
            </summary>
            <param name="service">open IOrganizationService</param>
            <param name="logicalName">Logical Name of the Entity:</param>
            <param name="columnNameAndValuePairs"></param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.GetFirstOrDefault(Microsoft.Xrm.Sdk.IOrganizationService,System.String,Microsoft.Xrm.Sdk.Query.ColumnSet,System.Object[])">
            <summary>
            Retrieves the first Active entity (with the given subset of columns only) 
            where the columnNameAndValue Pairs match
            </summary>
            <param name="service"></param>
            <param name="logicalName"></param>
            <param name="columnSet">Columns to retrieve</param>
            <param name="columnNameAndValuePairs">List of pairs that look like this:
            (string name of the column, value of the column) ie. "name","John Doe" goes to entity.name = "John Doe"
            </param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.GetFirstOrDefault``1(Microsoft.Xrm.Sdk.IOrganizationService,System.Object[])">
            <summary>
            Retrieves the first Active entity where the columnNameAndValue Pairs match
            </summary>
            <typeparam name="T">An early bound Entity Type</typeparam>
            <param name="service">open IOrganizationService</param>
            <param name="columnNameAndValuePairs">List of pairs that look like this:
            (string name of the column, value of the column) ie. "name","John Doe" goes to entity.name = "John Doe"
            </param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.GetFirstOrDefault``1(Microsoft.Xrm.Sdk.IOrganizationService,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object[])">
            <summary>
            Retrieves the first Active entity (with the given subset of columns only) 
            where the columnNameAndValue Pairs match
            </summary>
            <typeparam name="T">An early bound Entity Type</typeparam>
            <param name="service"></param>
            <param name="anonymousTypeInitializer">An Anonymous Type Initializer where the properties of the anonymous
            type are the column names to add</param>
            <param name="columnNameAndValuePairs">List of pairs that look like this:
            (string name of the column, value of the column) ie. "name","John Doe" goes to entity.name = "John Doe"
            </param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.GetFirstOrDefault``1(Microsoft.Xrm.Sdk.IOrganizationService,Microsoft.Xrm.Sdk.Query.ColumnSet,System.Object[])">
            <summary>
            Retrieves the first Active entity (with the given subset of columns only) 
            where the columnNameAndValue Pairs match
            </summary>
            <typeparam name="T">An early bound Entity Type</typeparam>
            <param name="service"></param>
            <param name="columnSet">Columns to retrieve</param>
            <param name="columnNameAndValuePairs">List of pairs that look like this:
            (string name of the column, value of the column) ie. "name","John Doe" goes to entity.name = "John Doe"
            </param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.GetOrCreateEntity``1(Microsoft.Xrm.Sdk.IOrganizationService,System.Object[])">
            <summary>
            Retrieves the entity from CRM where the columnNameAndValuePairs match.  If it doesn't exist, it creates it
            populating the entity with the columnNameAndValuePairs
            </summary>
            <typeparam name="T"></typeparam>
            <param name="service"></param>
            <param name="columnNameAndValuePairs">List of pairs that look like this:
            (string name of the column, value of the column) ie. "name","John Doe" goes to entity.name = "John Doe"
            </param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.GetOrCreateEntity``1(Microsoft.Xrm.Sdk.IOrganizationService,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object[])">
            <summary>
            Retrieves the entity from CRM where the columnNameAndValuePairs match.  If it doesn't exist, it creates it
            populating the entity with the columnNameAndValuePairs
            </summary>
            <typeparam name="T"></typeparam>
            <param name="service"></param>
            <param name="anonymousTypeInitializer">An Anonymous Type Initializer where the properties of the anonymous
            type are the column names to add</param>
            <param name="columnNameAndValuePairs">List of pairs that look like this:
            (string name of the column, value of the column) ie. "name","John Doe" goes to entity.name = "John Doe"
            </param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.GetOrCreateEntity``1(Microsoft.Xrm.Sdk.IOrganizationService,Microsoft.Xrm.Sdk.Query.ColumnSet,System.Object[])">
            <summary>
            Retrieves the entity from CRM where the columnNameAndValuePairs match.  If it doesn't exist, it creates it
            populating the entity with the columnNameAndValuePairs
            </summary>
            <typeparam name="T"></typeparam>
            <param name="service"></param>
            <param name="columnSet"></param>
            <param name="columnNameAndValuePairs">List of pairs that look like this:
            (string name of the column, value of the column) ie. "name","John Doe" goes to entity.name = "John Doe"
            </param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.WhereEqual(Microsoft.Xrm.Sdk.Query.LinkEntity,System.Object[])">
            <summary>
            Adds the column name and value pairs to the linkCriteria of the given LinkEntity
            </summary>
            <param name="linkEntity"></param>
            <param name="columnNameAndValuePairs">List of pairs that look like this:
            (string name of the column, value of the column) ie. "name", "John Doe" </param>
        </member>
        <member name="M:DLaB.Xrm.Extensions.AddRetrieveMultiple``1(Microsoft.Xrm.Sdk.OrganizationRequestCollection,System.Object[])">
            <summary>
            Adds a retrieve multiple request to the current OrganizationRequestCollection.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="requests">The requests.</param>
            <param name="columnNameAndValuePairs">The column name and value pairs.</param>
        </member>
        <member name="M:DLaB.Xrm.Extensions.AddRetrieveMultiple``1(Microsoft.Xrm.Sdk.OrganizationRequestCollection,Microsoft.Xrm.Sdk.Query.ColumnSet,System.Object[])">
            <summary>
            Adds a retrieve multiple request to the current OrganizationRequestCollection.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="requests">The requests.</param>
            <param name="columnSet">The column set.</param>
            <param name="columnNameAndValuePairs">The column name and value pairs.</param>
        </member>
        <member name="M:DLaB.Xrm.Extensions.AddRetrieveMultiple``1(Microsoft.Xrm.Sdk.OrganizationRequestCollection,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object[])">
            <summary>
            Adds a retrieve multiple request to the current OrganizationRequestCollection.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="requests">The requests.</param>
            <param name="anonymousTypeInitializer">The anonymous type initializer.</param>
            <param name="columnNameAndValuePairs">The column name and value pairs.</param>
        </member>
        <member name="M:DLaB.Xrm.Extensions.WhereEqual(Microsoft.Xrm.Sdk.Query.QueryExpression,System.Object[])">
            <summary>
            Adds the column name and value pairs to the criteria of the given QueryExpression
            </summary>
            <param name="query"></param>
            <param name="columnNameAndValuePairs">List of pairs that look like this:
            (string name of the column, value of the column) ie. "name", "John Doe" </param>
        </member>
        <member name="M:DLaB.Xrm.Extensions.WhereIn(Microsoft.Xrm.Sdk.Query.FilterExpression,System.String,System.Collections.IEnumerable)">
            <summary>
            Adds an In Condition to the FilterExpression
            </summary>
            <param name="filterExpression">The FilterExpression to apply the In Constraints to.</param>
            <param name="columnName">The name of the column to perform the in against.</param>
            <param name="values">An IEnumerable of values to search for being in the column name.</param>
        </member>
        <member name="M:DLaB.Xrm.Extensions.WhereIn(Microsoft.Xrm.Sdk.Query.FilterExpression,System.String,System.Object[])">
            <summary>
            Adds an In Condition to the FilterExpression
            </summary>
            <param name="filterExpression">The FilterExpression to apply the In Constraints to.</param>
            <param name="columnName">The name of the column to perform the in against.</param>
            <param name="values">The list of values to search for being in the column name.</param>
        </member>
        <member name="M:DLaB.Xrm.Extensions.WhereIn(Microsoft.Xrm.Sdk.Query.FilterExpression,System.String,System.String)">
            <summary>
            Adds an In Condition to the FilterExpression.  Since a string is also IEnumerable, this method is required
            to wrap the string in to an object array for the correct method overloading resolution
            </summary>
            <param name="filterExpression">The FilterExpression to apply the In Constraints to.</param>
            <param name="columnName">The name of the column to perform the in against.</param>
            <param name="value">The single value to search for being in the column name.</param>
        </member>
        <member name="M:DLaB.Xrm.Extensions.AddWhereInCondition(Microsoft.Xrm.Sdk.Query.FilterExpression,System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="filterExpression">The FilterExpression to apply the In Constraints to.</param>
            <param name="columnName"></param>
            <param name="values"></param>
        </member>
        <member name="M:DLaB.Xrm.Extensions.GetAllEntitiesIn``1(Microsoft.Xrm.Sdk.IOrganizationService,System.String,System.Collections.IEnumerable)">
            <summary>
            Gets all Active Entities where the values are in the columnName
            </summary>
            <typeparam name="T">Type of Entity List to return.</typeparam>
            <param name="service"></param>
            <param name="columnName">The name of the column to perform the in against.</param>
            <param name="values">The list of values to search for being in the column name.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.GetAllEntitiesIn``1(Microsoft.Xrm.Sdk.IOrganizationService,System.String,System.Object[])">
            <summary>
            Gets all Active Entities where the values are in the columnName
            </summary>
            <typeparam name="T">Type of Entity List to return.</typeparam>
            <param name="service"></param>
            <param name="columnName">The name of the column to perform the in against.</param>
            <param name="values">The list of values to search for being in the column name.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.GetAllEntitiesIn``1(Microsoft.Xrm.Sdk.IOrganizationService,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String,System.Collections.IEnumerable)">
            <summary>
            Gets all Active Entities (with the given subset of columns only) 
            where the values are in the columnName
            </summary>
            <typeparam name="T">Type of Entity List to return.</typeparam>
            <param name="service"></param>
            <param name="anonymousTypeInitializer">An Anonymous Type Initializer where the properties of the anonymous
            type are the column names to add.</param>
            <param name="columnName">The name of the column to perform the in against.</param>
            <param name="values">The list of values to search for being in the column name.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.GetAllEntitiesIn``1(Microsoft.Xrm.Sdk.IOrganizationService,Microsoft.Xrm.Sdk.Query.ColumnSet,System.String,System.Collections.IEnumerable)">
            <summary>
            Gets all Active Entities (with the given subset of columns only) 
            where the values are in the columnName
            </summary>
            <typeparam name="T">Type of Entity List to return.</typeparam>
            <param name="service"></param>
            <param name="columnSet">Columns to Return.</param>
            <param name="columnName">The name of the column to perform the in against.</param>
            <param name="values">The list of values to search for being in the column name.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.GetAllEntitiesIn``1(Microsoft.Xrm.Sdk.IOrganizationService,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String,System.Object[])">
            <summary>
            Gets all Active Entities (with the given subset of columns only) 
            where the values are in the columnName
            </summary>
            <typeparam name="T">Type of Entity List to return.</typeparam>
            <param name="service"></param>
            <param name="anonymousTypeInitializer">An Anonymous Type Initializer where the properties of the anonymous
            type are the column names to add.</param>
            <param name="columnName">The name of the column to perform the in against.</param>
            <param name="values">The list of values to search for being in the column name.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.GetAllEntitiesIn``1(Microsoft.Xrm.Sdk.IOrganizationService,Microsoft.Xrm.Sdk.Query.ColumnSet,System.String,System.Object[])">
            <summary>
            Gets all Active Entities (with the given subset of columns only) 
            where the values are in the columnName
            </summary>
            <typeparam name="T">Type of Entity List to return.</typeparam>
            <param name="service"></param>
            <param name="columnSet">Columns to Return.</param>
            <param name="columnName">The name of the column to perform the in against.</param>
            <param name="values">The list of values to search for being in the column name.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.GetEntitiesIn(Microsoft.Xrm.Sdk.IOrganizationService,System.String,System.String,System.Collections.IEnumerable)">
            <summary>
            Gets first 5000 Active Entities where the values are in the columnName
            </summary>
            <param name="service"></param>
            <param name="logicalName">The LogicalName of the Entity to query.</param>
            <param name="columnName">The name of the column to perform the in against.</param>
            <param name="values">The list of values to search for being in the column name.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.GetEntitiesIn(Microsoft.Xrm.Sdk.IOrganizationService,System.String,System.String,System.Object[])">
            <summary>
            Gets first 5000 Active Entities where the values are in the columnName
            </summary>
            <param name="service"></param>
            <param name="logicalName">The LogicalName of the Entity to query.</param>
            <param name="columnName">The name of the column to perform the in against.</param>
            <param name="values">The list of values to search for being in the column name.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.GetEntitiesIn(Microsoft.Xrm.Sdk.IOrganizationService,System.String,Microsoft.Xrm.Sdk.Query.ColumnSet,System.String,System.Collections.IEnumerable)">
            <summary>
            Gets first 5000 Active Entities (with the given subset of columns only) 
            where the values are in the columnName
            </summary>
            <param name="service"></param>
            <param name="logicalName">The LogicalName of the Entity to query.</param>
            <param name="columnSet">Columns to Return.</param>
            <param name="columnName">The name of the column to perform the in against.</param>
            <param name="values">The list of values to search for being in the column name.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.GetEntitiesIn(Microsoft.Xrm.Sdk.IOrganizationService,System.String,Microsoft.Xrm.Sdk.Query.ColumnSet,System.String,System.Object[])">
            <summary>
            Gets first 5000 Active Entities (with the given subset of columns only) 
            where the values are in the columnName
            </summary>
            <param name="service"></param>
            <param name="logicalName">The LogicalName of the Entity to query.</param>
            <param name="columnSet">Columns to Return.</param>
            <param name="columnName">The name of the column to perform the in against.</param>
            <param name="values">The list of values to search for being in the column name.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.GetEntitiesIn``1(Microsoft.Xrm.Sdk.IOrganizationService,System.String,System.Collections.IEnumerable)">
            <summary>
            Gets first 5000 Active Entities where the values are in the columnName
            </summary>
            <typeparam name="T">Type of Entity List to return.</typeparam>
            <param name="service"></param>
            <param name="columnName">The name of the column to perform the in against.</param>
            <param name="values">The list of values to search for being in the column name.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.GetEntitiesIn``1(Microsoft.Xrm.Sdk.IOrganizationService,System.String,System.Object[])">
            <summary>
            Gets first 5000 Active Entities where the values are in the columnName
            </summary>
            <typeparam name="T">Type of Entity List to return.</typeparam>
            <param name="service"></param>
            <param name="columnName">The name of the column to perform the in against.</param>
            <param name="values">The list of values to search for being in the column name.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.GetEntitiesIn``1(Microsoft.Xrm.Sdk.IOrganizationService,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String,System.Collections.IEnumerable)">
            <summary>
            Gets first 5000 Active Entities (with the given subset of columns only) 
            where the values are in the columnName
            </summary>
            <typeparam name="T">Type of Entity List to return.</typeparam>
            <param name="service"></param>
            <param name="anonymousTypeInitializer">An Anonymous Type Initializer where the properties of the anonymous
            type are the column names to add.</param>
            <param name="columnName">The name of the column to perform the in against.</param>
            <param name="values">The list of values to search for being in the column name.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.GetEntitiesIn``1(Microsoft.Xrm.Sdk.IOrganizationService,Microsoft.Xrm.Sdk.Query.ColumnSet,System.String,System.Collections.IEnumerable)">
            <summary>
            Gets first 5000 Active Entities (with the given subset of columns only) 
            where the values are in the columnName
            </summary>
            <typeparam name="T">Type of Entity List to return.</typeparam>
            <param name="service"></param>
            <param name="columnSet">Columns to Return.</param>
            <param name="columnName">The name of the column to perform the in against.</param>
            <param name="values">The list of values to search for being in the column name.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.GetEntitiesIn``1(Microsoft.Xrm.Sdk.IOrganizationService,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String,System.Object[])">
            <summary>
            Gets first 5000 Active Entities (with the given subset of columns only) 
            where the values are in the columnName
            </summary>
            <typeparam name="T">Type of Entity List to return.</typeparam>
            <param name="service"></param>
            <param name="anonymousTypeInitializer">An Anonymous Type Initializer where the properties of the anonymous
            type are the column names to add.</param>
            <param name="columnName">The name of the column to perform the in against.</param>
            <param name="values">The list of values to search for being in the column name.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.GetEntitiesIn``1(Microsoft.Xrm.Sdk.IOrganizationService,Microsoft.Xrm.Sdk.Query.ColumnSet,System.String,System.Object[])">
            <summary>
            Gets first 5000 Active Entities (with the given subset of columns only) 
            where the values are in the columnName
            </summary>
            <typeparam name="T">Type of Entity List to return.</typeparam>
            <param name="service"></param>
            <param name="columnSet">Columns to Return.</param>
            <param name="columnName">The name of the column to perform the in against.</param>
            <param name="values">The list of values to search for being in the column name.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.GetFirstOrDefaultIn``1(Microsoft.Xrm.Sdk.IOrganizationService,System.String,System.Collections.IEnumerable)">
            <summary>
            Retrieves the first active entity (with the given subset of columns only) 
            where the values are in the columnName
            </summary>
            <typeparam name="T">An early bound Entity Type.</typeparam>
            <param name="service"></param>
            <param name="columnName">The name of the column to perform the in against.</param>
            <param name="values">The list of values to search for being in the column name.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.GetFirstOrDefaultIn``1(Microsoft.Xrm.Sdk.IOrganizationService,System.String,System.Object[])">
            <summary>
            Retrieves the first active entity (with the given subset of columns only) 
            where the values are in the columnName
            </summary>
            <typeparam name="T">An early bound Entity Type.</typeparam>
            <param name="service"></param>
            <param name="columnName">The name of the column to perform the in against.</param>
            <param name="values">The list of values to search for being in the column name.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.GetFirstOrDefaultIn``1(Microsoft.Xrm.Sdk.IOrganizationService,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String,System.Collections.IEnumerable)">
            <summary>
            Retrieves the first active entity (with the given subset of columns only) 
            where the values are in the columnName
            </summary>
            <typeparam name="T">An early bound Entity Type.</typeparam>
            <param name="service"></param>
            <param name="anonymousTypeInitializer">An Anonymous Type Initializer where the properties of the anonymous
            type are the column names to add.</param>
            <param name="columnName">The name of the column to perform the in against.</param>
            <param name="values">The list of values to search for being in the column name.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.GetFirstOrDefaultIn``1(Microsoft.Xrm.Sdk.IOrganizationService,Microsoft.Xrm.Sdk.Query.ColumnSet,System.String,System.Collections.IEnumerable)">
            <summary>
            Retrieves the first active entity (with the given subset of columns only) 
            where the values are in the columnName
            </summary>
            <typeparam name="T">An early bound Entity Type.</typeparam>
            <param name="service"></param>
            <param name="columnSet">Columns to Return.</param>
            <param name="columnName">The name of the column to perform the in against.</param>
            <param name="values">The list of values to search for being in the column name.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.GetFirstOrDefaultIn``1(Microsoft.Xrm.Sdk.IOrganizationService,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String,System.Object[])">
            <summary>
            Retrieves the first active entity (with the given subset of columns only) 
            where the values are in the columnName
            </summary>
            <typeparam name="T">An early bound Entity Type</typeparam>
            <param name="service"></param>
            <param name="anonymousTypeInitializer">An Anonymous Type Initializer where the properties of the anonymous
            type are the column names to add.</param>
            <param name="columnName">The name of the column to perform the in against.</param>
            <param name="values">The list of values to search for being in the column name.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.GetFirstOrDefaultIn``1(Microsoft.Xrm.Sdk.IOrganizationService,Microsoft.Xrm.Sdk.Query.ColumnSet,System.String,System.Object[])">
            <summary>
            Retrieves the first active entity (with the given subset of columns only) 
            where the values are in the columnName
            </summary>
            <typeparam name="T">An early bound Entity Type</typeparam>
            <param name="service"></param>
            <param name="columnSet">Columns to Return.</param>
            <param name="columnName">The name of the column to perform the in against.</param>
            <param name="values">The list of values to search for being in the column name.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Extensions.WhereIn(Microsoft.Xrm.Sdk.Query.LinkEntity,System.String,System.Collections.IEnumerable)">
            <summary>
            Adds an In Condition to the LinkEntity LinkCriteria
            </summary>
            <param name="linkEntity"></param>
            <param name="columnName">The name of the column to perform the in against.</param>
            <param name="values">The list of values to search for being in the column name.</param>
        </member>
        <member name="M:DLaB.Xrm.Extensions.WhereIn(Microsoft.Xrm.Sdk.Query.LinkEntity,System.String,System.Object[])">
            <summary>
            Adds an In Condition to the LinkEntity LinkCriteria
            </summary>
            <param name="linkEntity"></param>
            <param name="columnName">The name of the column to perform the in against.</param>
            <param name="values">The list of values to search for being in the column name.</param>
        </member>
        <member name="M:DLaB.Xrm.Extensions.WhereIn(Microsoft.Xrm.Sdk.Query.QueryExpression,System.String,System.Collections.IEnumerable)">
            <summary>
            Adds an In Condition to the QueryExpression Criteria
            </summary>
            <param name="query"></param>
            <param name="columnName">The name of the column to perform the in against.</param>
            <param name="values">The list of values to search for being in the column name.</param>
        </member>
        <member name="M:DLaB.Xrm.Extensions.WhereIn(Microsoft.Xrm.Sdk.Query.QueryExpression,System.String,System.Object[])">
            <summary>
            Adds an In Condition to the QueryExpression Criteria
            </summary>
            <param name="query"></param>
            <param name="columnName">The name of the column to perform the in against.</param>
            <param name="values">The list of values to search for being in the column name.</param>
        </member>
        <member name="T:DLaB.Xrm.OptimisticConcurrencyExtensions">
            <summary>
            Extensions for handling Optimistic Concurrency that was first used in CRM 2015.1
            </summary>
        </member>
        <member name="M:DLaB.Xrm.OptimisticConcurrencyExtensions.OptimisticUpdate``1(Microsoft.Xrm.Sdk.IOrganizationService,``0,System.Func{``0,``0},System.Func{Microsoft.Xrm.Sdk.IOrganizationService,``0})">
            <summary>
            Preforms an Optimistic Update.  If the entity's RowVersion doesn't match, the exception will be caught, and a reconciliation will be attempted before re-updating, indefinitely.
            Return null from reconcileEntity to skip cancel update
            Returns the entity whose Update Succeeded or null if the reconcileEntity function returned a null.
            </summary>
            <typeparam name="T">The entity type</typeparam>
            <param name="service">The service.</param>
            <param name="entity">The entity.</param>
            <param name="reconcileEntity">Function that accepts the latest version of the entity from the server as a property, and returns what the updated version should now be.</param>
            <param name="retrieveEntity">Function used to get the entity if the RowVersion doesn't match.  Defaults to getting the entity with all columns returned.</param>
            <exception cref="T:System.Exception">No row version is set!  Unable to preform OptimisticUpdate</exception>
        </member>
        <member name="T:DLaB.Xrm.StringDebugInfo">
            <summary>
            Used to control indenting/formatting of StringDebug/ToStringAttributes Methods
            </summary>
        </member>
        <member name="P:DLaB.Xrm.StringDebugInfo.IndentSpaces">
            <summary>
            Number of Spaces of the current indent.
            </summary>
        </member>
        <member name="P:DLaB.Xrm.StringDebugInfo.TabWidth">
            <summary>
            Width of a single Tab.
            </summary>
        </member>
        <member name="P:DLaB.Xrm.StringDebugInfo.SingleLine">
            <summary>
            If the ToString should output on a single line.
            </summary>
        </member>
        <member name="P:DLaB.Xrm.StringDebugInfo.Indent">
            <summary>
            Indent string.
            </summary>
        </member>
        <member name="P:DLaB.Xrm.StringDebugInfo.Tab">
            <summary>
            Tab string.
            </summary>
        </member>
        <member name="F:DLaB.Xrm.StringDebugInfo.Default">
            <summary>
            Default StringDebugInfo.
            </summary>
        </member>
        <member name="M:DLaB.Xrm.StringDebugInfo.#ctor(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Creates a new StringDebugInfo
            </summary>
            <param name="indentSpaces">Number of Spaces of the Indent.</param>
            <param name="tabWidth">Number of Spaces of a Tab.</param>
            <param name="singleLine">If the ToStringDebug should be a single line.</param>
        </member>
        <member name="M:DLaB.Xrm.StringDebugInfo.IncreaseIndent(System.Int32)">
            <summary>
            Increases the number of Tabs to increase the Current indent
            </summary>
            <param name="tabs"></param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.StringDebugInfo.WithNoTab">
            <summary>
            Returns a StringDebugInfo with no tabs.
            </summary>
            <returns></returns>
        </member>
        <member name="T:DLaB.Xrm.IExtendedExecutionContext">
            <summary>
            BaseIExtendedExecutionContext interface
            </summary>
        </member>
        <member name="P:DLaB.Xrm.IExtendedExecutionContext.InitiatingUserOrganizationService">
            <summary>
            The IOrganizationService of the plugin, Impersonated as the user that triggered the services using the InitiatingUserId.
            </summary>
        </member>
        <member name="P:DLaB.Xrm.IExtendedExecutionContext.IsAsync">
            <summary>
            Returns true if the execution context is asynchronous (Mode = 1)
            </summary>
        </member>
        <member name="P:DLaB.Xrm.IExtendedExecutionContext.IsSync">
            <summary>
            Returns true if the execution context is synchronous (Mode = 0)
            </summary>
        </member>
        <member name="P:DLaB.Xrm.IExtendedExecutionContext.OrganizationService">
            <summary>
            The IOrganizationService of the plugin, Impersonated as the user that plugin is registered to run as, using the PluginExecutionContext.UserId.
            </summary>
        </member>
        <member name="P:DLaB.Xrm.IExtendedExecutionContext.ServiceFactory">
            <summary>
            The IOrganizationServiceFactory of the plugin.
            </summary>
        </member>
        <member name="P:DLaB.Xrm.IExtendedExecutionContext.SystemOrganizationService">
            <summary>
            The IOrganizationService of the plugin, using the System User by not specifying a UserId.
            </summary>
        </member>
        <member name="P:DLaB.Xrm.IExtendedExecutionContext.TracingService">
            <summary>
            The ITracingService of the plugin.
            </summary>
        </member>
        <member name="M:DLaB.Xrm.IExtendedExecutionContext.LogException(System.Exception)">
            <summary>
            Logs the exception.
            </summary>
            <param name="ex">The exception.</param>
        </member>
        <member name="M:DLaB.Xrm.IExtendedExecutionContext.TraceContext">
            <summary>
            Traces the entire context.
            </summary>
        </member>
        <member name="M:DLaB.Xrm.IExtendedExecutionContext.TraceTime(System.String,System.Object[])">
            <summary>
            Traces the time from call to dispose.  Designed to be used in a using statement
            </summary>
            <param name="format">The format.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="T:DLaB.Xrm.IMaxLengthTracingService">
            <summary>
            Interface to handle tracing to a trace log that has a max length of characters.  
            </summary>
        </member>
        <member name="M:DLaB.Xrm.IMaxLengthTracingService.RetraceMaxLength">
            <summary>
            If the max length of the trace has been exceeded, the most important parts of the trace are retraced.
            If the max length of the trace has not been exceeded, then nothing is done.
            </summary>
        </member>
        <member name="T:DLaB.Xrm.LateBoundActivePropertyInfo">
            <summary>
            Determines the Active Attribute for the Latebound Entity
            </summary>
        </member>
        <member name="M:DLaB.Xrm.LateBoundActivePropertyInfo.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DLaB.Xrm.LateBoundActivePropertyInfo"/> class.
            </summary>
            <param name="logicalName">Name of the logical.</param>
        </member>
        <member name="M:DLaB.Xrm.LateBoundActivePropertyInfo.IsActive(Microsoft.Xrm.Sdk.IOrganizationService,Microsoft.Xrm.Sdk.Entity)">
            <summary>
            Determines whether the specified entity is active.
            </summary>
            <param name="service">The service.</param>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.LateBoundActivePropertyInfo.IsActive(Microsoft.Xrm.Sdk.IOrganizationService,System.String,System.Guid)">
            <summary>
            Determines whether the specified entity is active.
            </summary>
            <param name="service">The service.</param>
            <param name="logicalName">Name of the logical.</param>
            <param name="entityId">The entity identifier.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.LateBoundActivePropertyInfo.IsActive(Microsoft.Xrm.Sdk.IOrganizationService,System.Guid)">
            <summary>
            Determines whether the specified service is active.
            </summary>
            <param name="service">The service.</param>
            <param name="entityId">The entity identifier.</param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">IsActive(IOrganizationService,Guid) signature is not supported for LateBound</exception>
        </member>
        <member name="T:DLaB.Xrm.LateBoundQuerySettings">
            <summary>
            Query Settings that are not bound to a specific Entity Type
            </summary>
        </member>
        <member name="M:DLaB.Xrm.LateBoundQuerySettings.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DLaB.Xrm.LateBoundQuerySettings"/> class.
            </summary>
            <param name="logicalName">Name of the logical.</param>
        </member>
        <member name="T:DLaB.Xrm.Plugin.DLaBExtendedPluginContextBase">
            <summary>
            The Implementation of the IExtendedPluginContext
            </summary>
        </member>
        <member name="P:DLaB.Xrm.Plugin.DLaBExtendedPluginContextBase.PluginExecutionContext">
            <summary>
            Gets or sets the plugin execution context.
            </summary>
            <value>
            The plugin execution context.
            </value>
        </member>
        <member name="P:DLaB.Xrm.Plugin.DLaBExtendedPluginContextBase.Mode">
            <summary>
            Gets the mode.
            </summary>
            <value>
            The mode.
            </value>
        </member>
        <member name="P:DLaB.Xrm.Plugin.DLaBExtendedPluginContextBase.Depth">
            <summary>
            Gets the depth.
            </summary>
            <value>
            The depth.
            </value>
        </member>
        <member name="P:DLaB.Xrm.Plugin.DLaBExtendedPluginContextBase.MessageName">
            <summary>
            Gets the name of the message.
            </summary>
            <value>
            The name of the message.
            </value>
        </member>
        <member name="P:DLaB.Xrm.Plugin.DLaBExtendedPluginContextBase.PrimaryEntityName">
            <summary>
            Gets the name of the primary entity.
            </summary>
            <value>
            The name of the primary entity.
            </value>
        </member>
        <member name="P:DLaB.Xrm.Plugin.DLaBExtendedPluginContextBase.RequestId">
            <summary>
            Gets the request identifier.
            </summary>
            <value>
            The request identifier.
            </value>
        </member>
        <member name="P:DLaB.Xrm.Plugin.DLaBExtendedPluginContextBase.SecondaryEntityName">
            <summary>
            Gets the name of the secondary entity.
            </summary>
            <value>
            The name of the secondary entity.
            </value>
        </member>
        <member name="P:DLaB.Xrm.Plugin.DLaBExtendedPluginContextBase.InputParameters">
            <summary>
            Gets the input parameters.
            </summary>
            <value>
            The input parameters.
            </value>
        </member>
        <member name="P:DLaB.Xrm.Plugin.DLaBExtendedPluginContextBase.OutputParameters">
            <summary>
            Gets the output parameters.
            </summary>
            <value>
            The output parameters.
            </value>
        </member>
        <member name="P:DLaB.Xrm.Plugin.DLaBExtendedPluginContextBase.SharedVariables">
            <summary>
            Gets the shared variables.
            </summary>
            <value>
            The shared variables.
            </value>
        </member>
        <member name="P:DLaB.Xrm.Plugin.DLaBExtendedPluginContextBase.UserId">
            <summary>
            Gets the user identifier.
            </summary>
            <value>
            The user identifier.
            </value>
        </member>
        <member name="P:DLaB.Xrm.Plugin.DLaBExtendedPluginContextBase.InitiatingUserId">
            <summary>
            Gets the initiating user identifier.
            </summary>
            <value>
            The initiating user identifier.
            </value>
        </member>
        <member name="P:DLaB.Xrm.Plugin.DLaBExtendedPluginContextBase.BusinessUnitId">
            <summary>
            Gets the business unit identifier.
            </summary>
            <value>
            The business unit identifier.
            </value>
        </member>
        <member name="P:DLaB.Xrm.Plugin.DLaBExtendedPluginContextBase.OrganizationId">
            <summary>
            Gets the organization identifier.
            </summary>
            <value>
            The organization identifier.
            </value>
        </member>
        <member name="P:DLaB.Xrm.Plugin.DLaBExtendedPluginContextBase.OrganizationName">
            <summary>
            Gets the name of the organization.
            </summary>
            <value>
            The name of the organization.
            </value>
        </member>
        <member name="P:DLaB.Xrm.Plugin.DLaBExtendedPluginContextBase.PrimaryEntityId">
            <summary>
            Gets the primary entity identifier.
            </summary>
            <value>
            The primary entity identifier.
            </value>
        </member>
        <member name="P:DLaB.Xrm.Plugin.DLaBExtendedPluginContextBase.PreEntityImages">
            <summary>
            Gets the pre entity images.
            </summary>
            <value>
            The pre entity images.
            </value>
        </member>
        <member name="P:DLaB.Xrm.Plugin.DLaBExtendedPluginContextBase.PostEntityImages">
            <summary>
            Gets the post entity images.
            </summary>
            <value>
            The post entity images.
            </value>
        </member>
        <member name="P:DLaB.Xrm.Plugin.DLaBExtendedPluginContextBase.OwningExtension">
            <summary>
            Gets the owning extension.
            </summary>
            <value>
            The owning extension.
            </value>
        </member>
        <member name="P:DLaB.Xrm.Plugin.DLaBExtendedPluginContextBase.CorrelationId">
            <summary>
            Gets the correlation identifier.
            </summary>
            <value>
            The correlation identifier.
            </value>
        </member>
        <member name="P:DLaB.Xrm.Plugin.DLaBExtendedPluginContextBase.IsExecutingOffline">
            <summary>
            Gets a value indicating whether this instance is executing offline.
            </summary>
            <value>
            <c>true</c> if this instance is executing offline; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:DLaB.Xrm.Plugin.DLaBExtendedPluginContextBase.IsOfflinePlayback">
            <summary>
            Gets a value indicating whether this instance is offline playback.
            </summary>
            <value>
            <c>true</c> if this instance is offline playback; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:DLaB.Xrm.Plugin.DLaBExtendedPluginContextBase.IsInTransaction">
            <summary>
            Gets a value indicating whether this instance is in transaction.
            </summary>
            <value>
            <c>true</c> if this instance is in transaction; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:DLaB.Xrm.Plugin.DLaBExtendedPluginContextBase.OperationId">
            <summary>
            Gets the operation identifier.
            </summary>
            <value>
            The operation identifier.
            </value>
        </member>
        <member name="P:DLaB.Xrm.Plugin.DLaBExtendedPluginContextBase.OperationCreatedOn">
            <summary>
            Gets the operation created on.
            </summary>
            <value>
            The operation created on.
            </value>
        </member>
        <member name="P:DLaB.Xrm.Plugin.DLaBExtendedPluginContextBase.Stage">
            <summary>
            Gets the stage.
            </summary>
            <value>
            The stage.
            </value>
        </member>
        <member name="P:DLaB.Xrm.Plugin.DLaBExtendedPluginContextBase.ParentContext">
            <summary>
            Gets the parent context.
            </summary>
            <value>
            The parent context.
            </value>
        </member>
        <member name="P:DLaB.Xrm.Plugin.DLaBExtendedPluginContextBase.IsolationMode">
            <summary>
            Gets the isolation mode of the plugin assembly.
            </summary>
            <value>
            The isolation mode of the plugin assembly.
            </value>
        </member>
        <member name="P:DLaB.Xrm.Plugin.DLaBExtendedPluginContextBase.IsAsync">
            <summary>
            Returns true if the execution context is asynchronous (Mode = 1)
            </summary>
        </member>
        <member name="P:DLaB.Xrm.Plugin.DLaBExtendedPluginContextBase.IsSync">
            <summary>
            Returns true if the execution context is synchronous (Mode = 0)
            </summary>
        </member>
        <member name="P:DLaB.Xrm.Plugin.DLaBExtendedPluginContextBase.ServiceProvider">
            <summary>
            Gets or sets the service provider.
            </summary>
            <value>
            The service provider.
            </value>
        </member>
        <member name="P:DLaB.Xrm.Plugin.DLaBExtendedPluginContextBase.Event">
            <summary>
            The current event the plugin is executing for.
            </summary>
        </member>
        <member name="P:DLaB.Xrm.Plugin.DLaBExtendedPluginContextBase.InitiatingUserOrganizationService">
            <summary>
            The IOrganizationService of the plugin, Impersonated as the user that the plugin is was initiated by
            </summary>
        </member>
        <member name="P:DLaB.Xrm.Plugin.DLaBExtendedPluginContextBase.OrganizationService">
            <inheritdoc />
            <summary>
            The IOrganizationService of the plugin, Impersonated as the user that the plugin is registered to run as.
            </summary>
        </member>
        <member name="P:DLaB.Xrm.Plugin.DLaBExtendedPluginContextBase.PluginTypeName">
             <summary>
             The IPluginExecutionContext of the plugin.
             </summary>
            internal IPluginExecutionContext PluginExecutionContext { get; private set; }
            <summary>
            The Type.FullName of the plugin.
            </summary>
            
        </member>
        <member name="P:DLaB.Xrm.Plugin.DLaBExtendedPluginContextBase.PrimaryEntity">
            <summary>
            Pulls the PrimaryEntityName, and PrimaryEntityId from the context and returns it as an Entity Reference
            </summary>
            <value>
            The primary entity.
            </value>
        </member>
        <member name="P:DLaB.Xrm.Plugin.DLaBExtendedPluginContextBase.ServiceFactory">
            <summary>
            Service Factory
            </summary>
        </member>
        <member name="P:DLaB.Xrm.Plugin.DLaBExtendedPluginContextBase.SystemOrganizationService">
            <summary>
            The IOrganizationService of the plugin, using the System User
            </summary>
        </member>
        <member name="P:DLaB.Xrm.Plugin.DLaBExtendedPluginContextBase.TracingService">
            <summary>
            The ITracingService of the plugin.
            </summary>
        </member>
        <member name="T:DLaB.Xrm.Plugin.DLaBExtendedPluginContextBase.PluginImageNames">
            <summary>
            Struct for the Standard Plugin Image Names
            </summary>
        </member>
        <member name="F:DLaB.Xrm.Plugin.DLaBExtendedPluginContextBase.PluginImageNames.PreImage">
            <summary>
            The default pre image
            </summary>
        </member>
        <member name="F:DLaB.Xrm.Plugin.DLaBExtendedPluginContextBase.PluginImageNames.PostImage">
            <summary>
            The default post image
            </summary>
        </member>
        <member name="M:DLaB.Xrm.Plugin.DLaBExtendedPluginContextBase.#ctor(System.IServiceProvider,DLaB.Xrm.Plugin.IRegisteredEventsPlugin,DLaB.Xrm.Plugin.IExtendedPluginContextInitializer)">
            <summary>
            Initializes a new instance of the <see cref="T:DLaB.Xrm.Plugin.DLaBExtendedPluginContextBase"/> class.
            </summary>
            <param name="serviceProvider">The service provider.</param>
            <param name="plugin">The plugin.</param>
            <param name="settings">Settings used to control services of context</param>
            <exception cref="T:System.ArgumentNullException">
            serviceProvider
            or
            plugin
            </exception>
        </member>
        <member name="M:DLaB.Xrm.Plugin.DLaBExtendedPluginContextBase.InitializePluginProperties(DLaB.Xrm.Plugin.IRegisteredEventsPlugin)">
            <summary>
            Initializes the plugin properties.
            </summary>
            <param name="plugin">The plugin.</param>
        </member>
        <member name="M:DLaB.Xrm.Plugin.DLaBExtendedPluginContextBase.LogException(System.Exception)">
            <summary>
            Logs the exception.
            </summary>
            <param name="ex">The exception.</param>
        </member>
        <member name="M:DLaB.Xrm.Plugin.DLaBExtendedPluginContextBase.Trace(System.String,System.Object[])">
            <summary>
            Traces the specified message.  By default, is guaranteed to not throw an exception.
            </summary>
            <param name="format">The message format.</param>
            <param name="args">Optional Args</param>
        </member>
        <member name="M:DLaB.Xrm.Plugin.DLaBExtendedPluginContextBase.TraceContext">
            <summary>
            Traces the entire context.
            </summary>
        </member>
        <member name="M:DLaB.Xrm.Plugin.DLaBExtendedPluginContextBase.TraceTime(System.String,System.Object[])">
            <summary>
            Traces the time from call to dispose.  Designed to be used in a using statement
            </summary>
            <param name="format">The format.</param>
            <param name="args">The arguments.</param>
            <returns></returns>
        </member>
        <member name="T:DLaB.Xrm.Plugin.DLaBExtendedPluginContextSettings">
            <summary>
            Settings to be used for the DLaBExtendedPluginContext
            </summary>
        </member>
        <member name="P:DLaB.Xrm.Plugin.DLaBExtendedPluginContextSettings.OrganizationServiceSettings">
            <summary>
            Settings for the IOrganization Service
            </summary>
        </member>
        <member name="P:DLaB.Xrm.Plugin.DLaBExtendedPluginContextSettings.MaxTraceLength">
            <summary>
            The max length of the trace log.
            </summary>
        </member>
        <member name="M:DLaB.Xrm.Plugin.DLaBExtendedPluginContextSettings.#ctor">
            <summary>
            Creates a DLaBExtendedPluginContextSettings
            </summary>
        </member>
        <member name="M:DLaB.Xrm.Plugin.DLaBExtendedPluginContextSettings.InitializeServiceFactory(System.IServiceProvider,Microsoft.Xrm.Sdk.ITracingService)">
            <summary>
            Allows for defining the IOrganizationServiceFactory
            </summary>
            <param name="serviceProvider">Service Provider</param>
            <param name="tracingService">Tracing Service</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Plugin.DLaBExtendedPluginContextSettings.InitializeTracingService(System.IServiceProvider)">
            <summary>
            Allows for defining the ITracingService
            </summary>
            <param name="serviceProvider">Service Provider</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Plugin.DLaBExtendedPluginContextSettings.InitializeIOrganizationService(Microsoft.Xrm.Sdk.IOrganizationServiceFactory,System.Nullable{System.Guid},Microsoft.Xrm.Sdk.ITracingService)">
            <summary>
            Allows for defining the initialization of IOrganizationServices
            </summary>
            <param name="factory">Factory</param>
            <param name="userId">User Id</param>
            <param name="tracingService">Tracing Service</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Plugin.DLaBExtendedPluginContextSettings.InitializePluginExecutionContext(System.IServiceProvider,Microsoft.Xrm.Sdk.ITracingService)">
            <summary>
            Allows for defining the IPluginExecutionContext
            </summary>
            <param name="serviceProvider">Service Provider</param>
            <param name="tracingService">Tracing Service</param>
            <returns></returns>
        </member>
        <member name="T:DLaB.Xrm.Plugin.DLaBGenericPluginBase`1">
            <inheritdoc />
            <summary>
            Plugin Base.  Allows for Registered Events, preventing infinite loops, and auto logging
            </summary>
        </member>
        <member name="F:DLaB.Xrm.Plugin.DLaBGenericPluginBase`1.TracePreContext">
            <summary>
            Key to look for in the Security Settings for Tracing the Pre Context
            </summary>
        </member>
        <member name="F:DLaB.Xrm.Plugin.DLaBGenericPluginBase`1.TracePrePostContext">
            <summary>
            Key to look for in the Security Settings for Tracing the Pre and Post Context
            </summary>
        </member>
        <member name="F:DLaB.Xrm.Plugin.DLaBGenericPluginBase`1.TracePostContext">
            <summary>
            Key to look for in the Security Settings for Tracing the Post Context
            </summary>
        </member>
        <member name="P:DLaB.Xrm.Plugin.DLaBGenericPluginBase`1.RegisteredEvents">
            <inheritdoc />
        </member>
        <member name="P:DLaB.Xrm.Plugin.DLaBGenericPluginBase`1.SecureConfig">
            <summary>
            Gets or sets the secure configuration.
            </summary>
            <value>
            The secure configuration.
            </value>
        </member>
        <member name="P:DLaB.Xrm.Plugin.DLaBGenericPluginBase`1.UnsecureConfig">
            <summary>
            Gets or sets the unsecure configuration.
            </summary>
            <value>
            The unsecure configuration.
            </value>
        </member>
        <member name="M:DLaB.Xrm.Plugin.DLaBGenericPluginBase`1.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the GenericPluginBase class.
            </summary>
            <param name="unsecureConfig"></param>
            <param name="secureConfig"></param>
        </member>
        <member name="M:DLaB.Xrm.Plugin.DLaBGenericPluginBase`1.CreatePluginContext(System.IServiceProvider)">
            <summary>
            Creates the local plugin context.
            </summary>
            <param name="serviceProvider">The service provider.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Plugin.DLaBGenericPluginBase`1.ExecuteInternal(`0)">
            <summary>
            The default method to be executed by the plugin.  The Registered Event could specify a different method.
            </summary>
            <param name="context">The plugin context.</param>
        </member>
        <member name="M:DLaB.Xrm.Plugin.DLaBGenericPluginBase`1.CreateEvents">
            <summary>
            Create the Registered Events for the plugin to operate on.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Plugin.DLaBGenericPluginBase`1.Initialize(System.IServiceProvider)">
            <summary>
            Called once directly before the plugin instance is executed for the first time.
            </summary>
        </member>
        <member name="M:DLaB.Xrm.Plugin.DLaBGenericPluginBase`1.Execute(System.IServiceProvider)">
            <summary>
            Executes the plug-in.
            </summary>
            <param name="serviceProvider">The service provider.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <remarks>
            For improved performance, Microsoft Dynamics CRM caches plug-in instances.
            The plug-in's Execute method should be written to be stateless as the constructor
            is not called for every invocation of the plug-in. Also, multiple system threads
            could execute the plug-in at the same time. All per invocation state information
            is stored in the context. This means that you should not use class level fields/properties in plug-ins.
            </remarks>
        </member>
        <member name="M:DLaB.Xrm.Plugin.DLaBGenericPluginBase`1.ExecuteExceptionHandler(System.Exception,`0)">
            <summary>
            Method that gets called when an exception occurs in the Execute method.  Return true if the exception should be rethrown.
            This prevents losing the stack trace by rethrowing the originally caught error.
            </summary>
            <param name="ex"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Plugin.DLaBGenericPluginBase`1.PreExecute(System.IServiceProvider)">
            <summary>
            Method that gets called before the Execute
            </summary>
            <param name="serviceProvider">The service provider.</param>
        </member>
        <member name="M:DLaB.Xrm.Plugin.DLaBGenericPluginBase`1.PostExecute(DLaB.Xrm.Plugin.IExtendedPluginContext)">
            <summary>
            Method that gets called in the finally block of the Execute
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:DLaB.Xrm.Plugin.DLaBGenericPluginBase`1.SkipExecution(`0)">
            <summary>
            Method that gets called directly before Execute(context).  Returning true will skip the Execute(context) from getting called.  
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Plugin.DLaBGenericPluginBase`1.ExecuteRegisteredEvent(`0)">
            <summary>
            Traces the Execution of the registered event of the context.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:DLaB.Xrm.Plugin.DLaBGenericPluginBase`1.PreventRecursiveCall(DLaB.Xrm.Plugin.IExtendedPluginContext)">
            <summary>
            Allows Plugin to trigger itself.  Delete Messge Types always return False since you can't delete something twice, all other message types return true if the execution key is found in the shared parameters.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Plugin.DLaBGenericPluginBase`1.IsPreContextTraced(`0)">
            <summary>
            Determines if the Context should be traced Pre Execution of the plugin logic
            </summary>
        </member>
        <member name="M:DLaB.Xrm.Plugin.DLaBGenericPluginBase`1.IsPostContextTraced(`0)">
            <summary>
            Determines if the Context should be traced Post Execution of the plugin logic
            </summary>
        </member>
        <member name="T:DLaB.Xrm.Plugin.DLaBPluginBase">
            <summary>
            An abstract base Plugin that implments the DLaBGenericPluginBase.
            </summary>
        </member>
        <member name="M:DLaB.Xrm.Plugin.DLaBPluginBase.#ctor(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:DLaB.Xrm.Plugin.DLaBPluginBase.CreatePluginContext(System.IServiceProvider)">
            <inheritdoc />
        </member>
        <member name="T:DLaB.Xrm.Plugin.ExtendedContextCreator`1">
            <summary>
            Default Implmentation
            </summary>
        </member>
        <member name="M:DLaB.Xrm.Plugin.ExtendedContextCreator`1.Create(System.IServiceProvider)">
            <inheritdoc />
        </member>
        <member name="T:DLaB.Xrm.Plugin.Extensions">
            <summary>
            Extension Class for Plugins
            </summary>
        </member>
        <member name="M:DLaB.Xrm.Plugin.Extensions.AddEvent(System.Collections.Generic.List{DLaB.Xrm.Plugin.RegisteredEvent},DLaB.Xrm.Plugin.PipelineStage,DLaB.Xrm.Plugin.MessageType)">
            <summary>
            Defaults the execute method to be InternalExecute and run against all entities.
            </summary>
            <param name="events"></param>
            <param name="stage"></param>
            <param name="message"></param>
        </member>
        <member name="M:DLaB.Xrm.Plugin.Extensions.AddEvent(System.Collections.Generic.List{DLaB.Xrm.Plugin.RegisteredEvent},DLaB.Xrm.Plugin.PipelineStage,DLaB.Xrm.Plugin.MessageType,System.Action{DLaB.Xrm.Plugin.IExtendedPluginContext})">
            <summary>
            Runs against all entities.
            </summary>
            <param name="events"></param>
            <param name="stage"></param>
            <param name="message"></param>
            <param name="execute"></param>
        </member>
        <member name="M:DLaB.Xrm.Plugin.Extensions.AddEvent(System.Collections.Generic.List{DLaB.Xrm.Plugin.RegisteredEvent},DLaB.Xrm.Plugin.PipelineStage,System.String,DLaB.Xrm.Plugin.MessageType)">
            <summary>
            Defaults the execute method to be InternalExecute and runs against the specified entity.
            </summary>
            <param name="events"></param>
            <param name="stage"></param>
            <param name="entityLogicalName"></param>
            <param name="message"></param>
        </member>
        <member name="M:DLaB.Xrm.Plugin.Extensions.AddEvent(System.Collections.Generic.List{DLaB.Xrm.Plugin.RegisteredEvent},DLaB.Xrm.Plugin.PipelineStage,System.String,DLaB.Xrm.Plugin.MessageType,System.Action{DLaB.Xrm.Plugin.IExtendedPluginContext})">
            <summary>
            Runs against the specified entity
            </summary>
            <param name="events"></param>
            <param name="stage"></param>
            <param name="entityLogicalName"></param>
            <param name="message"></param>
            <param name="execute"></param>
        </member>
        <member name="M:DLaB.Xrm.Plugin.Extensions.AddEvents(System.Collections.Generic.List{DLaB.Xrm.Plugin.RegisteredEvent},DLaB.Xrm.Plugin.PipelineStage,DLaB.Xrm.Plugin.MessageType[])">
            <summary>
            Defaults the execute method to be InternalExecute and run against all entities.
            </summary>
            <param name="events"></param>
            <param name="stage"></param>
            <param name="messages"></param>
        </member>
        <member name="M:DLaB.Xrm.Plugin.Extensions.AddEvents(System.Collections.Generic.List{DLaB.Xrm.Plugin.RegisteredEvent},DLaB.Xrm.Plugin.PipelineStage,System.String,DLaB.Xrm.Plugin.MessageType[])">
            <summary>
            Defaults the execute method to be InternalExecute and runs against the specified entity.
            </summary>
            <param name="events"></param>
            <param name="stage"></param>
            <param name="messages"></param>
            <param name="entityLogicalName"></param>
        </member>
        <member name="M:DLaB.Xrm.Plugin.Extensions.AddEvents(System.Collections.Generic.List{DLaB.Xrm.Plugin.RegisteredEvent},DLaB.Xrm.Plugin.PipelineStage,System.Action{DLaB.Xrm.Plugin.IExtendedPluginContext},DLaB.Xrm.Plugin.MessageType[])">
            <summary>
            Runs against all entities.
            </summary>
            <param name="events"></param>
            <param name="stage"></param>
            <param name="messages"></param>
            <param name="execute"></param>
        </member>
        <member name="M:DLaB.Xrm.Plugin.Extensions.AddEvents(System.Collections.Generic.List{DLaB.Xrm.Plugin.RegisteredEvent},DLaB.Xrm.Plugin.PipelineStage,System.String,System.Action{DLaB.Xrm.Plugin.IExtendedPluginContext},DLaB.Xrm.Plugin.MessageType[])">
            <summary>
            Runs against the specified entity
            </summary>
            <param name="events"></param>
            <param name="stage"></param>
            <param name="entityLogicalName"></param>
            <param name="execute"></param>
            <param name="messages"></param>
        </member>
        <member name="M:DLaB.Xrm.Plugin.Extensions.GetContextInfo(DLaB.Xrm.Plugin.IExtendedPluginContext)">
            <summary>
            Gets the context information.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Plugin.Extensions.HasPluginExecutionBeenPrevented(DLaB.Xrm.Plugin.IExtendedPluginContext)">
            <summary>
            Determines whether a shared variable exists that specifies that the plugin or the plugin and specific message type should be prevented from executing.
            This is used in conjunction with PreventPluginExecution
            </summary>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Plugin.Extensions.GetTarget``1(DLaB.Xrm.Plugin.IExtendedPluginContext)">
            <summary>
            Cast the Target to the given Entity Type T. 
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Plugin.Extensions.AssertEntityImageAttributesExist(Microsoft.Xrm.Sdk.IPluginExecutionContext,System.String,System.String[])">
            <summary>
            Checks the Pre/Post Entity Images to determine if the image collections contains an image with the given key, that contains the attributes.
            Throws an exception if the image name is contained in both the Pre and Post Image.
            </summary>
            <param name="context">The context.</param>
            <param name="imageName">Name of the image.</param>
            <param name="attributeNames">The attribute names.</param>
        </member>
        <member name="M:DLaB.Xrm.Plugin.Extensions.AssertEntityImageRegistered(Microsoft.Xrm.Sdk.IPluginExecutionContext,System.String)">
            <summary>
            Checks the Pre/Post Entity Images to determine if the the collection contains an image with the given key.
            Throws an exception if the image name is contained in both the Pre and Post Image.
            </summary>
            <param name="context">The context.</param>
            <param name="imageName">Name of the image.</param>
        </member>
        <member name="M:DLaB.Xrm.Plugin.Extensions.CalledFrom(Microsoft.Xrm.Sdk.IPluginExecutionContext,DLaB.Xrm.Plugin.RegisteredEvent)">
            <summary>
            Returns true if the current plugin maps to the Registered Event, or the current plugin has been triggered by the given registered event
            </summary>
            <param name="context">The context.</param>
            <param name="event">The event.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Plugin.Extensions.CalledFrom(Microsoft.Xrm.Sdk.IPluginExecutionContext,System.String,DLaB.Xrm.Plugin.MessageType,System.Nullable{System.Int32})">
            <summary>
            Returns true if the current plugin maps to the parameters given, or the current plugin has been triggered by the given parameters
            </summary>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Plugin.Extensions.CoalesceTargetWithPreEntity``1(Microsoft.Xrm.Sdk.IPluginExecutionContext,System.String)">
            <summary>
            Creates a new Entity of type T, adding the attributes from both the Target and the Post Image if they exist.
            If imageName is null, the first non-null image found is used.
            Does not return null.
            Does not return a reference to Target
            </summary>
            <param name="context">The context</param>
            <param name="imageName">Name of the image.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Plugin.Extensions.CoalesceTargetWithPostEntity``1(Microsoft.Xrm.Sdk.IPluginExecutionContext,System.String)">
            <summary>
            Creates a new Entity of type T, adding the attributes from both the Target and the Post Image if they exist.
            If imageName is null, the first non-null image found is used.
            Does not return null.
            Does not return a reference to Target
            </summary>
            <typeparam name="T"></typeparam>
            <param name="context">The context.</param>
            <param name="imageName">Name of the image.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Plugin.Extensions.GetContexts(Microsoft.Xrm.Sdk.IPluginExecutionContext)">
            <summary>
            The current PluginExecutionContext and the parent context hierarchy of the plugin.
            </summary>
        </member>
        <member name="M:DLaB.Xrm.Plugin.Extensions.GetParentContexts(Microsoft.Xrm.Sdk.IPluginExecutionContext)">
            <summary>
            Iterates through all parent contexts.
            </summary>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Plugin.Extensions.GetEvent(Microsoft.Xrm.Sdk.IPluginExecutionContext,System.Collections.Generic.IEnumerable{DLaB.Xrm.Plugin.RegisteredEvent})">
            <summary>
            Gets the event by iterating over all of the expected registered events to ensure that the plugin has been invoked by an expected event.
            For any given plug-in event at an instance in time, we would expect at most 1 result to match.
            </summary>
            <param name="context">The context.</param>
            <param name="events">The events.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Plugin.Extensions.GetFirstSharedVariable``1(Microsoft.Xrm.Sdk.IPluginExecutionContext,System.String)">
            <summary>
            Gets the variable value from the PluginExecutionContext.SharedVariables or anywhere in the Plugin Context Hierarchy collection, cast to type 'T', or default(T) if the collection doesn't contain a variable with the given name.
            </summary>
            <typeparam name="T">Type of the variable to be returned</typeparam>
            <param name="context"></param>
            <param name="variableName"></param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Plugin.Extensions.GetFirstSharedVariable(Microsoft.Xrm.Sdk.IPluginExecutionContext,System.String)">
            <summary>
            Gets the variable value from the PluginExecutionContext.SharedVariables or anywhere in the Plugin Context Hierarchy collection, or null if the collection doesn't contain a variable with the given name.
            </summary>
            <param name="context"></param>
            <param name="variableName"></param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Plugin.Extensions.GetMessageType(Microsoft.Xrm.Sdk.IPluginExecutionContext)">
            <summary>
            Gets the type of the message.
            </summary>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Plugin.Extensions.GetPreEntity``1(Microsoft.Xrm.Sdk.IExecutionContext,System.String)">
            <summary>
            If the imageName is populated and the PreEntityImages contains the given imageName Key, the Value is cast to the Entity type T, else null is returned
            If the imageName is not populated, than the first image in PreEntityImages with a value, is cast to the Entity type T, else null is returned
            </summary>
            <typeparam name="T"></typeparam>
            <param name="context"></param>
            <param name="imageName"></param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Plugin.Extensions.GetPostEntity``1(Microsoft.Xrm.Sdk.IExecutionContext,System.String)">
            <summary>
            If the imageName is populated and the PostEntityImages contains the given imageName Key, the Value is cast to the Entity type T, else null is returned
            If the imageName is not populated, than the first image in PostEntityImages with a value, is cast to the Entity type T, else null is returned
            </summary>
            <typeparam name="T"></typeparam>
            <param name="context"></param>
            <param name="imageName"></param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Plugin.Extensions.GetPipelineStage(Microsoft.Xrm.Sdk.IPluginExecutionContext)">
            <summary>
            Gets the pipeline stage.
            </summary>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Plugin.Extensions.DereferenceTarget``1(Microsoft.Xrm.Sdk.IPluginExecutionContext)">
            <summary>
            Dereferences the target so an update to it will not cause an update to the actual target and result in a crm update post plugin execution
            </summary>
            <typeparam name="T"></typeparam>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Plugin.Extensions.GetTarget``1(Microsoft.Xrm.Sdk.IPluginExecutionContext)">
            <summary>
            Cast the Target to the given Entity Type T. 
            </summary>
            <typeparam name="T"></typeparam>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Plugin.Extensions.GetTargetEntityReference(Microsoft.Xrm.Sdk.IPluginExecutionContext)">
            <summary>
            Finds and returns the Target as an Entity Reference (Delete Plugins)
            </summary>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Plugin.Extensions.PreventPluginExecution(Microsoft.Xrm.Sdk.IPluginExecutionContext,System.String,DLaB.Xrm.Plugin.MessageType)">
            <summary>
            Adds a shared Variable to the context that is checked by the GenericPluginBase to determine if it should be skipped  * NOTE * The Plugin has to finish executing for the Shared Variable to be passed to a new plugin
            </summary>
            <param name="context">The context.</param>
            <param name="pluginTypeFullName">The Full Type Name of the Plugin to Prevent</param>
            <param name="messageType">Type of the message.</param>
        </member>
        <member name="M:DLaB.Xrm.Plugin.Extensions.PreventPluginExecution(Microsoft.Xrm.Sdk.IPluginExecutionContext,System.String,DLaB.Xrm.Plugin.RegisteredEvent)">
            <summary>
            Adds a shared Variable to the context that is checked by the GenericPluginBase to determine if it should be skipped  * NOTE * The Plugin has to finish executing for the Shared Variable to be passed to a new plugin
            </summary>
            <param name="context">The context.</param>
            <param name="pluginTypeFullName">The Full Type Name of the Plugin to Prevent</param>
            <param name="event">Type of the event.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:DLaB.Xrm.Plugin.Extensions.PreventPluginExecution(Microsoft.Xrm.Sdk.IPluginExecutionContext,System.String,System.String,System.String,System.Nullable{DLaB.Xrm.Plugin.PipelineStage})">
            <summary>
            Adds a shared Variable to the context that is checked by the GenericPluginBase to determine if it should be skipped  * NOTE * The Plugin has to finish executing for the Shared Variable to be passed to a new plugin
            </summary>
            <param name="context">The context.</param>
            <param name="pluginTypeFullName">The Full Type Name of the Plugin to Prevent</param>
            <param name="messageName">Name of the message.</param>
            <param name="logicalName">Name of the logical.</param>
            <param name="stage">The stage.</param>
        </member>
        <member name="M:DLaB.Xrm.Plugin.Extensions.PreventPluginExecution``1(Microsoft.Xrm.Sdk.IPluginExecutionContext,DLaB.Xrm.Plugin.MessageType)">
            <summary>
            Adds a shared Variable to the context that is checked by the GenericPluginBase to determine if it should be skipped  * NOTE * The Plugin has to finish executing for the Shared Variable to be passed to a new plugin
            </summary>
            <typeparam name="T">The type of the plugin.</typeparam>
            <param name="context">The context.</param>
            <param name="messageType">Type of the message.</param>
        </member>
        <member name="M:DLaB.Xrm.Plugin.Extensions.PreventPluginExecution``1(Microsoft.Xrm.Sdk.IPluginExecutionContext,DLaB.Xrm.Plugin.RegisteredEvent)">
            <summary>
            Adds a shared Variable to the context that is checked by the GenericPluginBase to determine if it should be skipped  * NOTE * The Plugin has to finish executing for the Shared Variable to be passed to a new plugin
            </summary>
            <typeparam name="T">The type of the plugin.</typeparam>
            <param name="context">The context.</param>
            <param name="event">Type of the event.</param>
        </member>
        <member name="M:DLaB.Xrm.Plugin.Extensions.PreventPluginExecution``1(Microsoft.Xrm.Sdk.IPluginExecutionContext,System.String,System.String,System.Nullable{DLaB.Xrm.Plugin.PipelineStage})">
            <summary>
            Adds a shared Variable to the context that is checked by the GenericPluginBase to determine if it should be skipped  * NOTE * The Plugin has to finish executing for the Shared Variable to be passed to a new plugin
            </summary>
            <typeparam name="T">The type of the plugin.</typeparam>
        </member>
        <member name="M:DLaB.Xrm.Plugin.Extensions.HasPluginExecutionBeenPrevented``1(Microsoft.Xrm.Sdk.IPluginExecutionContext,DLaB.Xrm.Plugin.RegisteredEvent)">
            <summary>
            Determines whether a shared variable exists that specifies that the plugin or the plugin and specifc message type should be prevented from executing.
            This is used in conjunction with PreventPluginExecution
            </summary>
            <typeparam name="T">The type of the plugin.</typeparam>
            <returns></returns>
        </member>
        <member name="T:DLaB.Xrm.Plugin.IExtendedContextCreator`1">
            <summary>
            Interface for defining how to get an IExtenedPluginContext
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:DLaB.Xrm.Plugin.IExtendedContextCreator`1.Create(System.IServiceProvider)">
            <summary>
            Creates an IExtendedPluginContext from the Service Provider.
            </summary>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="T:DLaB.Xrm.Plugin.IExtendedPluginContext">
            <summary>
            Plugin Context Interface for Handling Additional functionality
            </summary>
        </member>
        <member name="P:DLaB.Xrm.Plugin.IExtendedPluginContext.Event">
            <summary>
            The current event the plugin is executing for.
            </summary>
        </member>
        <member name="P:DLaB.Xrm.Plugin.IExtendedPluginContext.ServiceProvider">
            <summary>
            Gets or sets the service provider.
            </summary>
            <value>
            The service provider.
            </value>
        </member>
        <member name="P:DLaB.Xrm.Plugin.IExtendedPluginContext.IsolationMode">
            <summary>
            Gets the isolation mode of the plugin assembly.
            </summary>
            <value>
            The isolation mode of the plugin assembly.
            </value>
        </member>
        <member name="P:DLaB.Xrm.Plugin.IExtendedPluginContext.PluginTypeName">
            <summary>
            The Type.FullName of the plugin.
            </summary>
        </member>
        <member name="P:DLaB.Xrm.Plugin.IExtendedPluginContext.PrimaryEntity">
            <summary>
            Pulls the PrimaryEntityName, and PrimaryEntityId from the context and returns it as an Entity Reference
            </summary>
            <value>
            The primary entity.
            </value>
        </member>
        <member name="T:DLaB.Xrm.Plugin.IExtendedPluginContextInitializer">
            <summary>
            Interface for Initializing a Plugin Context
            </summary>
        </member>
        <member name="M:DLaB.Xrm.Plugin.IExtendedPluginContextInitializer.InitializePluginExecutionContext(System.IServiceProvider,Microsoft.Xrm.Sdk.ITracingService)">
            <summary>
            Allows for defining the IPluginExecutionContext
            </summary>
            <param name="serviceProvider">Service Provider</param>
            <param name="tracingService">Tracing Service</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Plugin.IExtendedPluginContextInitializer.InitializeServiceFactory(System.IServiceProvider,Microsoft.Xrm.Sdk.ITracingService)">
            <summary>
            Allows for defining the IOrganizationServiceFactory
            </summary>
            <param name="serviceProvider">Service Provider</param>
            <param name="tracingService">Tracing Service</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Plugin.IExtendedPluginContextInitializer.InitializeTracingService(System.IServiceProvider)">
            <summary>
            Allows for defining the ITracingService
            </summary>
            <param name="serviceProvider">Service Provider</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Plugin.IExtendedPluginContextInitializer.InitializeIOrganizationService(Microsoft.Xrm.Sdk.IOrganizationServiceFactory,System.Nullable{System.Guid},Microsoft.Xrm.Sdk.ITracingService)">
            <summary>
            Allows for defining the initialization of IOrganizationServices
            </summary>
            <param name="factory">Factory</param>
            <param name="userId">User Id</param>
            <param name="tracingService">Tracing Service</param>
            <returns></returns>
        </member>
        <member name="T:DLaB.Xrm.Plugin.IRegisteredEventsPlugin">
            <summary>
            An IPlugin that defines Registered Events
            </summary>
        </member>
        <member name="P:DLaB.Xrm.Plugin.IRegisteredEventsPlugin.RegisteredEvents">
            <summary>
            Gets the registered events that the plug-in should fire for, and what the action should be.
            </summary>
            <value>
            The registered events.
            </value>
        </member>
        <member name="T:DLaB.Xrm.Plugin.IsolationMode">
            <summary>
            Isolation Mode of the Plugin Assembly
            </summary>
        </member>
        <member name="F:DLaB.Xrm.Plugin.IsolationMode.None">
            <summary>
            No Isolation Mode
            </summary>
        </member>
        <member name="F:DLaB.Xrm.Plugin.IsolationMode.Sandbox">
            <summary>
            Sandboxed Isoloation Mode
            </summary>
        </member>
        <member name="T:DLaB.Xrm.Plugin.MessageType">
            <summary>
            Defines all Default CRM Message Types.  Utilizes a TypeSafeEnumBase to allow for custom Actions to be added
            </summary>
        </member>
        <member name="M:DLaB.Xrm.Plugin.MessageType.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DLaB.Xrm.Plugin.MessageType" /> class.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:DLaB.Xrm.Plugin.MessageType.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DLaB.Xrm.Plugin.MessageType" /> class.
            </summary>
            <param name="nameValue">The name value.</param>
        </member>
        <member name="F:DLaB.Xrm.Plugin.MessageType.AddItem">
            <summary>
            Add Item Message.
            </summary>
        </member>
        <member name="F:DLaB.Xrm.Plugin.MessageType.AddListMembers">
            <summary>
            Add List Memebers Message.
            </summary>
        </member>
        <member name="F:DLaB.Xrm.Plugin.MessageType.AddMember">
            <summary>
            Add Member Message.
            </summary>
        </member>
        <member name="F:DLaB.Xrm.Plugin.MessageType.AddMembers">
            <summary>
            Add Members Message.
            </summary>
        </member>
        <member name="F:DLaB.Xrm.Plugin.MessageType.AddPrincipalToQueue">
            <summary>
            Add Principal To Queue Message.
            </summary>
        </member>
        <member name="F:DLaB.Xrm.Plugin.MessageType.AddPrivileges">
            <summary>
            Add Privileges Message.
            </summary>
        </member>
        <member name="F:DLaB.Xrm.Plugin.MessageType.AddProductToKit">
            <summary>
            Add Product To Kit Message.
            </summary>
        </member>
        <member name="F:DLaB.Xrm.Plugin.MessageType.AddRecurrence">
            <summary>
            Add Recurrence Message.
            </summary>
        </member>
        <member name="F:DLaB.Xrm.Plugin.MessageType.AddToQueue">
            <summary>
            Add To Queue Message.
            </summary>
        </member>
        <member name="F:DLaB.Xrm.Plugin.MessageType.AddUserToRecordTeam">
            <summary>
            Add User To Record Team Message.
            </summary>
        </member>
        <member name="F:DLaB.Xrm.Plugin.MessageType.Assign">
            <summary>
            Assign Message.
            </summary>
        </member>
        <member name="F:DLaB.Xrm.Plugin.MessageType.AssignUserRoles">
            <summary>
            Assign User Roles Message.
            </summary>
        </member>
        <member name="F:DLaB.Xrm.Plugin.MessageType.Associate">
            <summary>
            Associate Message.
            </summary>
        </member>
        <member name="F:DLaB.Xrm.Plugin.MessageType.BackgroundSend">
            <summary>
            Background Send Message.
            </summary>
        </member>
        <member name="F:DLaB.Xrm.Plugin.MessageType.Book">
            <summary>
            Book Message.
            </summary>
        </member>
        <member name="F:DLaB.Xrm.Plugin.MessageType.Cancel">
            <summary>
            Cancel Message.
            </summary>
        </member>
        <member name="F:DLaB.Xrm.Plugin.MessageType.CheckIncoming">
            <summary>
            Check Incoming Message.
            </summary>
        </member>
        <member name="F:DLaB.Xrm.Plugin.MessageType.CheckPromote">
            <summary>
            Check Promote Message.
            </summary>
        </member>
        <member name="F:DLaB.Xrm.Plugin.MessageType.Clone">
            <summary>
            Clone Message.
            </summary>
        </member>
        <member name="F:DLaB.Xrm.Plugin.MessageType.Close">
            <summary>
            Close Message.
            </summary>
        </member>
        <member name="F:DLaB.Xrm.Plugin.MessageType.CopyDynamicListToStatic">
            <summary>
            Copy Dynamic List To Static Message.
            </summary>
        </member>
        <member name="F:DLaB.Xrm.Plugin.MessageType.CopySystemForm">
            <summary>
            Copy System Form Message.
            </summary>
        </member>
        <member name="F:DLaB.Xrm.Plugin.MessageType.Create">
            <summary>
            Create Message.
            </summary>
        </member>
        <member name="F:DLaB.Xrm.Plugin.MessageType.CreateException">
            <summary>
            Create Exception Message.
            </summary>
        </member>
        <member name="F:DLaB.Xrm.Plugin.MessageType.CreateInstance">
            <summary>
            Create Instance Message.
            </summary>
        </member>
        <member name="F:DLaB.Xrm.Plugin.MessageType.Delete">
            <summary>
            Delete Message.
            </summary>
        </member>
        <member name="F:DLaB.Xrm.Plugin.MessageType.DeleteOpenInstances">
            <summary>
            Delete Open Instances Message.
            </summary>
        </member>
        <member name="F:DLaB.Xrm.Plugin.MessageType.DeliverIncoming">
            <summary>
            Deliver Incoming Message.
            </summary>
        </member>
        <member name="F:DLaB.Xrm.Plugin.MessageType.DeliverPromote">
            <summary>
            Deliver Promote Message.
            </summary>
        </member>
        <member name="F:DLaB.Xrm.Plugin.MessageType.DetachFromQueue">
            <summary>
            Detach From Queue Message.
            </summary>
        </member>
        <member name="F:DLaB.Xrm.Plugin.MessageType.Disassociate">
            <summary>
            Disassociate Message.
            </summary>
        </member>
        <member name="F:DLaB.Xrm.Plugin.MessageType.Execute">
            <summary>
            Execute Message.
            </summary>
        </member>
        <member name="F:DLaB.Xrm.Plugin.MessageType.ExecuteById">
            <summary>
            Execute By Id Message.
            </summary>
        </member>
        <member name="F:DLaB.Xrm.Plugin.MessageType.Export">
            <summary>
            Export Message.
            </summary>
        </member>
        <member name="F:DLaB.Xrm.Plugin.MessageType.ExportAll">
            <summary>
            Export All Message.
            </summary>
        </member>
        <member name="F:DLaB.Xrm.Plugin.MessageType.ExportCompressed">
            <summary>
            Export Compressed Message.
            </summary>
        </member>
        <member name="F:DLaB.Xrm.Plugin.MessageType.ExportCompressedAll">
            <summary>
            Export Compressed All Message.
            </summary>
        </member>
        <member name="F:DLaB.Xrm.Plugin.MessageType.GenerateSocialProfile">
            <summary>
            Generate Social Profile Message.
            </summary>
        </member>
        <member name="F:DLaB.Xrm.Plugin.MessageType.GrantAccess">
            <summary>
            Grant Access Message.
            </summary>
        </member>
        <member name="F:DLaB.Xrm.Plugin.MessageType.Handle">
            <summary>
            Handle Message.
            </summary>
        </member>
        <member name="F:DLaB.Xrm.Plugin.MessageType.Import">
            <summary>
            Import Message.
            </summary>
        </member>
        <member name="F:DLaB.Xrm.Plugin.MessageType.ImportAll">
            <summary>
            Import All Message.
            </summary>
        </member>
        <member name="F:DLaB.Xrm.Plugin.MessageType.ImportCompressedAll">
            <summary>
            Import Compressed All Message.
            </summary>
        </member>
        <member name="F:DLaB.Xrm.Plugin.MessageType.ImportCompressedWithProgress">
            <summary>
            Import Compressed With Progress Message.
            </summary>
        </member>
        <member name="F:DLaB.Xrm.Plugin.MessageType.ImportWithProgress">
            <summary>
            Import With Progress Message.
            </summary>
        </member>
        <member name="F:DLaB.Xrm.Plugin.MessageType.LockInvoicePricing">
            <summary>
            Lock Invoice Pricing Message.
            </summary>
        </member>
        <member name="F:DLaB.Xrm.Plugin.MessageType.LockSalesOrderPricing">
            <summary>
            Lock Sales Order Pricing Message.
            </summary>
        </member>
        <member name="F:DLaB.Xrm.Plugin.MessageType.Lose">
            <summary>
            Lose Message.
            </summary>
        </member>
        <member name="F:DLaB.Xrm.Plugin.MessageType.Merge">
            <summary>
            Merge Message.
            </summary>
        </member>
        <member name="F:DLaB.Xrm.Plugin.MessageType.ModifyAccess">
            <summary>
            Modify Access Message.
            </summary>
        </member>
        <member name="F:DLaB.Xrm.Plugin.MessageType.PickFromQueue">
            <summary>
            Pick From Queue Message.
            </summary>
        </member>
        <member name="F:DLaB.Xrm.Plugin.MessageType.Publish">
            <summary>
            Publish Message.
            </summary>
        </member>
        <member name="F:DLaB.Xrm.Plugin.MessageType.PublishAll">
            <summary>
            Publish All Message.
            </summary>
        </member>
        <member name="F:DLaB.Xrm.Plugin.MessageType.QualifyLead">
            <summary>
            Qualify Lead Message.
            </summary>
        </member>
        <member name="F:DLaB.Xrm.Plugin.MessageType.Recalculate">
            <summary>
            Recalculate Message.
            </summary>
        </member>
        <member name="F:DLaB.Xrm.Plugin.MessageType.ReleaseToQueue">
            <summary>
            Release To Queue Message.
            </summary>
        </member>
        <member name="F:DLaB.Xrm.Plugin.MessageType.RemoveFromQueue">
            <summary>
            Remove From Queue Message.
            </summary>
        </member>
        <member name="F:DLaB.Xrm.Plugin.MessageType.RemoveItem">
            <summary>
            Remove Item Message.
            </summary>
        </member>
        <member name="F:DLaB.Xrm.Plugin.MessageType.RemoveMember">
            <summary>
            Remove Member Message.
            </summary>
        </member>
        <member name="F:DLaB.Xrm.Plugin.MessageType.RemoveMembers">
            <summary>
            Remove Members Message.
            </summary>
        </member>
        <member name="F:DLaB.Xrm.Plugin.MessageType.RemovePrivilege">
            <summary>
            Remove Privilege Message.
            </summary>
        </member>
        <member name="F:DLaB.Xrm.Plugin.MessageType.RemoveProductFromKit">
            <summary>
            Remove Product From Kit Message.
            </summary>
        </member>
        <member name="F:DLaB.Xrm.Plugin.MessageType.RemoveRelated">
            <summary>
            Remove Related Message.
            </summary>
        </member>
        <member name="F:DLaB.Xrm.Plugin.MessageType.RemoveUserFromRecordTeam">
            <summary>
            Remove User From Record Team Message.
            </summary>
        </member>
        <member name="F:DLaB.Xrm.Plugin.MessageType.RemoveUserRoles">
            <summary>
            Remove User Roles Message.
            </summary>
        </member>
        <member name="F:DLaB.Xrm.Plugin.MessageType.ReplacePrivileges">
            <summary>
            Replace Privileges Message.
            </summary>
        </member>
        <member name="F:DLaB.Xrm.Plugin.MessageType.Reschedule">
            <summary>
            Reschedule Message.
            </summary>
        </member>
        <member name="F:DLaB.Xrm.Plugin.MessageType.Retrieve">
            <summary>
            Retrieve Message.
            </summary>
        </member>
        <member name="F:DLaB.Xrm.Plugin.MessageType.RetrieveExchangeRate">
            <summary>
            Retrieve Exchange Rate Message.
            </summary>
        </member>
        <member name="F:DLaB.Xrm.Plugin.MessageType.RetrieveFilteredForms">
            <summary>
            Retrieve Filtered Forms Message.
            </summary>
        </member>
        <member name="F:DLaB.Xrm.Plugin.MessageType.RetrieveMultiple">
            <summary>
            Retrieve Multiple Message.
            </summary>
        </member>
        <member name="F:DLaB.Xrm.Plugin.MessageType.RetrievePersonalWall">
            <summary>
            Retrieve Personal Wall Message.
            </summary>
        </member>
        <member name="F:DLaB.Xrm.Plugin.MessageType.RetrievePrincipalAccess">
            <summary>
            Retrieve Principal Access Message.
            </summary>
        </member>
        <member name="F:DLaB.Xrm.Plugin.MessageType.RetrieveRecordWall">
            <summary>
            Retrieve Record Wall Message.
            </summary>
        </member>
        <member name="F:DLaB.Xrm.Plugin.MessageType.RetrieveSharedPrincipalsAndAccess">
            <summary>
            Retrieve Shared Principals And Access Message.
            </summary>
        </member>
        <member name="F:DLaB.Xrm.Plugin.MessageType.RetrieveUnpublished">
            <summary>
            Retrieve Unpublished Message.
            </summary>
        </member>
        <member name="F:DLaB.Xrm.Plugin.MessageType.RetrieveUnpublishedMultiple">
            <summary>
            Retrieve Unpublished Multiple Message.
            </summary>
        </member>
        <member name="F:DLaB.Xrm.Plugin.MessageType.RetrieveUserQueues">
            <summary>
            Retrieve User Queues Message.
            </summary>
        </member>
        <member name="F:DLaB.Xrm.Plugin.MessageType.RevokeAccess">
            <summary>
            Revoke Access Message.
            </summary>
        </member>
        <member name="F:DLaB.Xrm.Plugin.MessageType.Route">
            <summary>
            Route Message.
            </summary>
        </member>
        <member name="F:DLaB.Xrm.Plugin.MessageType.RouteTo">
            <summary>
            Route To Message.
            </summary>
        </member>
        <member name="F:DLaB.Xrm.Plugin.MessageType.Send">
            <summary>
            Send Message.
            </summary>
        </member>
        <member name="F:DLaB.Xrm.Plugin.MessageType.SendFromTemplate">
            <summary>
            Send From Template Message.
            </summary>
        </member>
        <member name="F:DLaB.Xrm.Plugin.MessageType.SetRelated">
            <summary>
            Set Related Message.
            </summary>
        </member>
        <member name="F:DLaB.Xrm.Plugin.MessageType.SetState">
            <summary>
            Set State Message.
            </summary>
        </member>
        <member name="F:DLaB.Xrm.Plugin.MessageType.SetStateDynamicEntity">
            <summary>
            Set State Dynamic Entity Message.
            </summary>
        </member>
        <member name="F:DLaB.Xrm.Plugin.MessageType.TriggerServiceEndpointCheck">
            <summary>
            Trigger Service Endpoint Check Message.
            </summary>
        </member>
        <member name="F:DLaB.Xrm.Plugin.MessageType.UnlockInvoicePricing">
            <summary>
            Unlock Invoice Pricing Message.
            </summary>
        </member>
        <member name="F:DLaB.Xrm.Plugin.MessageType.UnlockSalesOrderPricing">
            <summary>
            Unlock Sales Order Pricing Message.
            </summary>
        </member>
        <member name="F:DLaB.Xrm.Plugin.MessageType.Update">
            <summary>
            Update Message.
            </summary>
        </member>
        <member name="F:DLaB.Xrm.Plugin.MessageType.ValidateRecurrenceRule">
            <summary>
            Validate Recurrence Rule Message.
            </summary>
        </member>
        <member name="F:DLaB.Xrm.Plugin.MessageType.Win">
            <summary>
            Win Message.
            </summary>
        </member>
        <member name="M:DLaB.Xrm.Plugin.MessageType.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            Since this is open (the constructors are public, not private) to allow for Custom Actions to be added, overriding the ToString to allow for value equality
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:DLaB.Xrm.Plugin.MessageType.Equals(DLaB.Xrm.Plugin.MessageType)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            Since this is open (the constructors are public, not private) to allow for Custom Actions to be added, overriding the ToString to allow for value equality
            </summary>
            <param name="message">The message.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Plugin.MessageType.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:DLaB.Xrm.Plugin.MessageType.op_Equality(DLaB.Xrm.Plugin.MessageType,DLaB.Xrm.Plugin.MessageType)">
            <summary>
            Implements the operator == to allow for standard comparisons just like enums.
            </summary>
            <param name="a">The a.</param>
            <param name="b">The b.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:DLaB.Xrm.Plugin.MessageType.op_Inequality(DLaB.Xrm.Plugin.MessageType,DLaB.Xrm.Plugin.MessageType)">
            <summary>
            Implements the operator != to allow for standard comparisons just like enums.
            </summary>
            <param name="a">The a.</param>
            <param name="b">The b.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="T:DLaB.Xrm.Plugin.ParameterName">
            <summary>
            This was a CRM 4 static class, but has changed for some values: Commented out unverified values
            </summary>
        </member>
        <member name="T:DLaB.Xrm.Plugin.PipelineStage">
            <summary>
            The Pipeline stage of the Plugin
            </summary>
        </member>
        <member name="F:DLaB.Xrm.Plugin.PipelineStage.PreValidation">
            <summary>
            The pre validation - 10
            </summary>
        </member>
        <member name="F:DLaB.Xrm.Plugin.PipelineStage.PreOperation">
            <summary>
            The pre operation - 20
            </summary>
        </member>
        <member name="F:DLaB.Xrm.Plugin.PipelineStage.PostOperation">
            <summary>
            The post operation - 40
            </summary>
        </member>
        <member name="T:DLaB.Xrm.Plugin.RegisteredEvent">
            <summary>
            Class for Defining a Plugin Execution Event
            </summary>
        </member>
        <member name="F:DLaB.Xrm.Plugin.RegisteredEvent.Any">
            <summary>
            Defines an Any Message Type
            </summary>
        </member>
        <member name="P:DLaB.Xrm.Plugin.RegisteredEvent.Stage">
            <summary>
            Gets or sets the pipeline stage.
            </summary>
            <value>
            The stage.
            </value>
        </member>
        <member name="P:DLaB.Xrm.Plugin.RegisteredEvent.Message">
            <summary>
            Gets or sets the message type.
            </summary>
            <value>
            The message.
            </value>
        </member>
        <member name="P:DLaB.Xrm.Plugin.RegisteredEvent.MessageName">
            <summary>
            The text value of the MessageType
            </summary>
            <value>
            The name of the message.
            </value>
        </member>
        <member name="P:DLaB.Xrm.Plugin.RegisteredEvent.EntityLogicalName">
            <summary>
            The logical entity name of the entity the plugin is executing for.
            </summary>
            <value>
            The name of the entity logical.
            </value>
        </member>
        <member name="P:DLaB.Xrm.Plugin.RegisteredEvent.Execute">
            <summary>
            Gets or sets the execute.
            </summary>
            <value>
            The execute.
            </value>
        </member>
        <member name="P:DLaB.Xrm.Plugin.RegisteredEvent.ExecuteMethodName">
            <summary>
            Gets or sets the Execute's Method Name for logging purposes.
            </summary>
            <value>
            The execute.
            </value>
        </member>
        <member name="M:DLaB.Xrm.Plugin.RegisteredEvent.#ctor(DLaB.Xrm.Plugin.PipelineStage,DLaB.Xrm.Plugin.MessageType)">
            <summary>
            Defaults the execute method to be InternalExecute and run against all entities.
            </summary>
            <param name="stage"></param>
            <param name="message"></param>
        </member>
        <member name="M:DLaB.Xrm.Plugin.RegisteredEvent.#ctor(DLaB.Xrm.Plugin.PipelineStage,DLaB.Xrm.Plugin.MessageType,System.String)">
            <summary>
            Defaults the execute method to be InternalExecute and runs against the specified entity.
            </summary>
            <param name="stage"></param>
            <param name="message"></param>
            <param name="entityLogicalName"></param>
        </member>
        <member name="M:DLaB.Xrm.Plugin.RegisteredEvent.#ctor(DLaB.Xrm.Plugin.PipelineStage,DLaB.Xrm.Plugin.MessageType,System.Action{DLaB.Xrm.Plugin.IExtendedPluginContext})">
            <summary>
            Runs against all entities.
            </summary>
            <param name="stage"></param>
            <param name="message"></param>
            <param name="execute"></param>
        </member>
        <member name="M:DLaB.Xrm.Plugin.RegisteredEvent.#ctor(DLaB.Xrm.Plugin.PipelineStage,DLaB.Xrm.Plugin.MessageType,System.Action{DLaB.Xrm.Plugin.IExtendedPluginContext},System.String)">
            <summary>
            Runs against the specified entity
            </summary>
            <param name="stage"></param>
            <param name="message"></param>
            <param name="execute"></param>
            <param name="entityLogicalName"></param>
        </member>
        <member name="M:DLaB.Xrm.Plugin.RegisteredEvent.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance, formatted with the given tab to allow for nexting
            </summary>
            <param name="tab">The tab.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:DLaB.Xrm.Plugin.RegisteredEvent.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:DLaB.Xrm.Plugin.RegisteredEventBuilder">
            <summary>
            Fluent Builder for Registered Events
            </summary>
        </member>
        <member name="P:DLaB.Xrm.Plugin.RegisteredEventBuilder.EntityLogicalNames">
            <summary>
            Gets or sets the entity logical names.
            </summary>
            <value>
            The entity logical names.
            </value>
        </member>
        <member name="P:DLaB.Xrm.Plugin.RegisteredEventBuilder.Execute">
            <summary>
            Gets or sets the execute.
            </summary>
            <value>
            The execute.
            </value>
        </member>
        <member name="P:DLaB.Xrm.Plugin.RegisteredEventBuilder.ExecuteMethodName">
            <summary>
            Gets or sets the name of the Execute method for logging purposes.
            </summary>
            <value>
            The name of the execute method.
            </value>
        </member>
        <member name="P:DLaB.Xrm.Plugin.RegisteredEventBuilder.MessageTypes">
            <summary>
            Gets or sets the message types.
            </summary>
            <value>
            The message types.
            </value>
        </member>
        <member name="P:DLaB.Xrm.Plugin.RegisteredEventBuilder.PreviousBuilder">
            <summary>
            The Previous Builder if any.  This is set via the And() method
            </summary>
        </member>
        <member name="P:DLaB.Xrm.Plugin.RegisteredEventBuilder.Stage">
            <summary>
            Gets or sets the stage.
            </summary>
            <value>
            The stage.
            </value>
        </member>
        <member name="M:DLaB.Xrm.Plugin.RegisteredEventBuilder.#ctor(DLaB.Xrm.Plugin.PipelineStage,DLaB.Xrm.Plugin.MessageType[])">
            <summary>
            Initializes a new instance of the <see cref="T:DLaB.Xrm.Plugin.RegisteredEventBuilder"/> class.  With the only required attributes, what pipelines stage to execute
            </summary>
            <param name="stage">The stage.</param>
            <param name="messageTypes">The message types.</param>
        </member>
        <member name="M:DLaB.Xrm.Plugin.RegisteredEventBuilder.ForEntities(System.String[])">
            <summary>
            Defines the Entities that will be created for the registered events
            </summary>
            <param name="logicalnames">The logicalnames.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Plugin.RegisteredEventBuilder.ForEntities``1">
            <summary>
            Defines the Entities that will be created for the registered events
            </summary>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Plugin.RegisteredEventBuilder.ForEntities``2">
            <summary>
            Defines the Entities that will be created for the registered events
            </summary>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Plugin.RegisteredEventBuilder.ForEntities``3">
            <summary>
            Defines the Entities that will be created for the registered events
            </summary>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Plugin.RegisteredEventBuilder.ForEntities``4">
            <summary>
            Defines the Entities that will be created for the registered events
            </summary>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Plugin.RegisteredEventBuilder.ForEntities``5">
            <summary>
            Defines the Entities that will be created for the registered events
            </summary>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Plugin.RegisteredEventBuilder.WithExecuteAction``1(System.Action{``0})">
            <summary>
            Defines the custom Action to be performed rather than the standard ExecuteInternal.
            </summary>
            <param name="execute">Action that is invoked when the Plugin Executes.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Plugin.RegisteredEventBuilder.WithExecuteAction(System.Action{DLaB.Xrm.Plugin.IExtendedPluginContext})">
            <summary>
            Defines the custom Action to be performed rather than the standard ExecuteInternal.
            </summary>
            <param name="execute">Action that is invoked when the Plugin Executes.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Plugin.RegisteredEventBuilder.And(DLaB.Xrm.Plugin.PipelineStage,DLaB.Xrm.Plugin.MessageType[])">
            <summary>
            Creates a new RegisteredEventBuilder, but keeps the previous RegisteredEventBuilder linked so a call to build, will build the previous objects in the chain.
            </summary>
            <param name="stage"></param>
            <param name="messageTypes"></param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Plugin.RegisteredEventBuilder.Build">
            <summary>
            Builds this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="T:DLaB.Xrm.Plugin.TraceTimer">
            <summary>
            Trace Time that starts when the timer when the object is created, and stops it when it is disposed.
            </summary>
        </member>
        <member name="P:DLaB.Xrm.Plugin.TraceTimer.TracingService">
            <summary>
            Gets the tracing service.
            </summary>
            <value>
            The tracing service.
            </value>
        </member>
        <member name="P:DLaB.Xrm.Plugin.TraceTimer.Timer">
            <summary>
            Gets the timer.
            </summary>
            <value>
            The timer.
            </value>
        </member>
        <member name="P:DLaB.Xrm.Plugin.TraceTimer.EndMessageFormat">
            <summary>
            Gets the end message format.
            </summary>
            <value>
            The end message format.
            </value>
        </member>
        <member name="M:DLaB.Xrm.Plugin.TraceTimer.#ctor(Microsoft.Xrm.Sdk.ITracingService)">
            <summary>
            Initializes a new instance of the <see cref="T:DLaB.Xrm.Plugin.TraceTimer"/> class.
            </summary>
            <param name="traceService">The trace service.</param>
        </member>
        <member name="M:DLaB.Xrm.Plugin.TraceTimer.#ctor(Microsoft.Xrm.Sdk.ITracingService,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DLaB.Xrm.Plugin.TraceTimer"/> class.
            </summary>
            <param name="traceService">The trace service.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:DLaB.Xrm.Plugin.TraceTimer.#ctor(Microsoft.Xrm.Sdk.ITracingService,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DLaB.Xrm.Plugin.TraceTimer"/> class.
            </summary>
            <param name="traceService">The trace service.</param>
            <param name="startMessage">The start message.</param>
            <param name="endMessageFormat">The end message format.</param>
        </member>
        <member name="M:DLaB.Xrm.Plugin.TraceTimer.Dispose">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
        </member>
        <member name="M:DLaB.Xrm.Plugin.TraceTimer.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:DLaB.Xrm.Plugin.TraceTimer"/> class.
            </summary>
        </member>
        <member name="M:DLaB.Xrm.Plugin.TraceTimer.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:DLaB.Xrm.PrimaryFieldInfo">
            <summary>
            Contains information about the given Primary Name Field for an Entity
            </summary>
        </member>
        <member name="P:DLaB.Xrm.PrimaryFieldInfo.AttributeName">
            <summary>
            Gets or sets the name of the attribute.
            </summary>
            <value>
            The name of the attribute.
            </value>
        </member>
        <member name="P:DLaB.Xrm.PrimaryFieldInfo.MaximumLength">
            <summary>
            Gets or sets the maximum length.
            </summary>
            <value>
            The maximum length.
            </value>
        </member>
        <member name="P:DLaB.Xrm.PrimaryFieldInfo.BaseAttributes">
            <summary>
            Gets the base attributes that make up the actual real name, so "firstname" and "lastname" for contact.
            </summary>
            <value>
            The base attributes.
            </value>
        </member>
        <member name="M:DLaB.Xrm.PrimaryFieldInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DLaB.Xrm.PrimaryFieldInfo"/> class.
            </summary>
        </member>
        <member name="P:DLaB.Xrm.PrimaryFieldInfo.ReadOnly">
            <summary>
            Gets or sets a value indicating whether the name field is [read only].
            </summary>
            <value>
              <c>true</c> if [read only]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:DLaB.Xrm.PrimaryFieldInfo.IsAttributeOf">
            <summary>
            Gets or sets a value indicating whether the name field is an attribute of another entity, and therefore, not created via standard Early Bound Generation.
            </summary>
            <value>
            <c>true</c> if this instance is attribute of; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:DLaB.Xrm.QueryExpressionFactory">
            <summary>
            Class for helping to create QueryExpressions
            </summary>
        </member>
        <member name="M:DLaB.Xrm.QueryExpressionFactory.Create(System.String,System.Object[])">
            <summary>
            Returns a Query Expression for the given inputs
            </summary>
            <param name="logicalName"></param>
            <param name="columnNameAndValuePairs">List of pairs that look like this:
            (string name of the column, value of the column) ie. "name","John Doe" goes to entity.name = "John Doe"</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.QueryExpressionFactory.Create(System.String,Microsoft.Xrm.Sdk.Query.ColumnSet,System.Object[])">
            <summary>
            Returns a Query Expression for the given inputs
            </summary>
            <param name="logicalName"></param>
            <param name="columnSet">Columns to retrieve.</param>
            <param name="columnNameAndValuePairs">List of pairs that look like this:
            (string name of the column, value of the column) ie. "name","John Doe" goes to entity.name = "John Doe"</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.QueryExpressionFactory.Create(System.String,Microsoft.Xrm.Sdk.Query.ColumnSet,System.Boolean,System.Object[])">
            <summary>
            Returns a Query Expression for the given inputs
            </summary>
            <param name="logicalName"></param>
            <param name="columnSet">Columns to retrieve.</param>
            <param name="first">Used to specificy that only one entity should be returned.</param>
            <param name="columnNameAndValuePairs">List of pairs that look like this:
            (string name of the column, value of the column) ie. "name","John Doe" goes to entity.name = "John Doe"</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.QueryExpressionFactory.Create(System.String,System.Boolean,Microsoft.Xrm.Sdk.Query.ColumnSet,System.Boolean,System.Object[])">
            <summary>
            Returns a Query Expression for the given inputs
            </summary>
            <param name="columnSet">Columns to retrieve.</param>
            <param name="first">Used to specificy that only one entity should be returned.</param>
            <param name="logicalName"></param>
            <param name="activeOnly">Specifies if only Active Records should be returned.</param>
            <param name="columnNameAndValuePairs">List of pairs that look like this:
            (string name of the column, value of the column) ie. "name","John Doe" goes to entity.name = "John Doe"</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.QueryExpressionFactory.Create``1(System.Object[])">
            <summary>
            Returns a Query Expression for the given inputs
            </summary>
            <typeparam name="T"></typeparam>
            <param name="columnNameAndValuePairs">List of pairs that look like this:
            (string name of the column, value of the column) ie. "name","John Doe" goes to entity.name = "John Doe"</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.QueryExpressionFactory.Create``1(Microsoft.Xrm.Sdk.Query.ColumnSet,System.Object[])">
            <summary>
            Returns a Query Expression for the given inputs
            </summary>
            <typeparam name="T"></typeparam>
            <param name="columnSet">Columns to retrieve.</param>
            <param name="columnNameAndValuePairs">List of pairs that look like this:
            (string name of the column, value of the column) ie. "name","John Doe" goes to entity.name = "John Doe"</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.QueryExpressionFactory.Create``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object[])">
            <summary>
            Returns a Query Expression for the given inputs
            </summary>
            <typeparam name="T"></typeparam>
            <param name="anonymousTypeInitializer">An Anonymous Type Initializer where the properties of the anonymous
            type are the column names to add.</param>
            <param name="columnNameAndValuePairs">List of pairs that look like this:
            (string name of the column, value of the column) ie. "name","John Doe" goes to entity.name = "John Doe"</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.QueryExpressionFactory.Create``1(Microsoft.Xrm.Sdk.Query.ColumnSet,System.Boolean,System.Object[])">
            <summary>
            Returns a Query Expression for the given inputs
            </summary>
            <typeparam name="T"></typeparam>
            <param name="columnSet">Columns to retrieve.</param>
            <param name="first">Used to specificy that only one entity should be returned.</param>
            <param name="columnNameAndValuePairs">List of pairs that look like this:
            (string name of the column, value of the column) ie. "name","John Doe" goes to entity.name = "John Doe"</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.QueryExpressionFactory.Create``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Boolean,System.Object[])">
            <summary>
            Returns a Query Expression for the given inputs
            </summary>
            <typeparam name="T"></typeparam>
            <param name="anonymousTypeInitializer">An Anonymous Type Initializer where the properties of the anonymous
            type are the column names to add.</param>
            <param name="first">Used to specificy that only one entity should be returned.</param>
            <param name="columnNameAndValuePairs">List of pairs that look like this:
            (string name of the column, value of the column) ie. "name","John Doe" goes to entity.name = "John Doe"</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.QueryExpressionFactory.Create``1(DLaB.Xrm.QuerySettings{``0},System.Object[])">
            <summary>
            Creates the specified settings.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="settings">The settings.</param>
            <param name="columnNameAndValuePairs">The column name and value pairs.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.QueryExpressionFactory.Create``1(System.Boolean,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Boolean,System.Object[])">
            <summary>
            Returns a Query Expression for the given inputs
            </summary>
            <typeparam name="T"></typeparam>
            <param name="activeOnly">Specifies if only Active Records should be returned.</param>
            <param name="anonymousTypeInitializer">An Anonymous Type Initializer where the properties of the anonymous
            type are the column names to add.</param>
            <param name="first">Used to specificy that only one entity should be returned.</param>
            <param name="columnNameAndValuePairs">List of pairs that look like this:
            (string name of the column, value of the column) ie. "name","John Doe" goes to entity.name = "John Doe"</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.QueryExpressionFactory.Create``1(System.Boolean,Microsoft.Xrm.Sdk.Query.ColumnSet,System.Boolean,System.Object[])">
            <summary>
            Returns a Query Expression for the given inputs
            </summary>
            <typeparam name="T"></typeparam>
            <param name="columnSet">Columns to retrieve.</param>
            <param name="first">Used to specificy that only one entity should be returned.</param>
            <param name="activeOnly">Specifies if only Active Records should be returned.</param>
            <param name="columnNameAndValuePairs">List of pairs that look like this:
            (string name of the column, value of the column) ie. "name","John Doe" goes to entity.name = "John Doe"</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.QueryExpressionFactory.Create``1(DLaB.Xrm.QuerySettings{``0})">
            <summary>
            Creates the specified settings.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="settings">The settings.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.QueryExpressionFactory.CreateIn(System.String,System.String,System.Collections.IEnumerable)">
            <summary>
            Returns a Query Expression for the given inputs
            </summary>
            <param name="logicalName"></param>
            <param name="columnName">The name of the column to perform the in against.</param>
            <param name="values">The list of values to search for being in the column name.</param>
        </member>
        <member name="M:DLaB.Xrm.QueryExpressionFactory.CreateIn(System.String,System.String,System.Object[])">
            <summary>
            Returns a Query Expression for the given inputs
            </summary>
            <param name="logicalName"></param>
            <param name="columnName">The name of the column to perform the in against.</param>
            <param name="values">The list of values to search for being in the column name.</param>
        </member>
        <member name="M:DLaB.Xrm.QueryExpressionFactory.CreateIn(System.String,Microsoft.Xrm.Sdk.Query.ColumnSet,System.String,System.Collections.IEnumerable)">
            <summary>
            Returns a Query Expression for the given inputs
            </summary>
            <param name="logicalName"></param>
            <param name="columnSet">Columns to retrieve.</param>
            <param name="columnName">The name of the column to perform the in against.</param>
            <param name="values">The list of values to search for being in the column name.</param>
        </member>
        <member name="M:DLaB.Xrm.QueryExpressionFactory.CreateIn(System.String,Microsoft.Xrm.Sdk.Query.ColumnSet,System.String,System.Object[])">
            <summary>
            Returns a Query Expression for the given inputs
            </summary>
            <param name="logicalName"></param>
            <param name="columnSet">Columns to retrieve.</param>
            <param name="columnName">The name of the column to perform the in against.</param>
            <param name="values">The list of values to search for being in the column name.</param>
        </member>
        <member name="M:DLaB.Xrm.QueryExpressionFactory.CreateIn(System.String,Microsoft.Xrm.Sdk.Query.ColumnSet,System.Boolean,System.String,System.Collections.IEnumerable)">
            <summary>
            Returns a Query Expression for the given inputs
            </summary>
            <param name="logicalName"></param>
            <param name="columnSet">Columns to retrieve.</param>
            <param name="first">Used to specificy that only one entity should be returned.</param>
            <param name="columnName">The name of the column to perform the in against.</param>
            <param name="values">The list of values to search for being in the column name.</param>
        </member>
        <member name="M:DLaB.Xrm.QueryExpressionFactory.CreateIn(System.String,Microsoft.Xrm.Sdk.Query.ColumnSet,System.Boolean,System.String,System.Object[])">
            <summary>
            Returns a Query Expression for the given inputs
            </summary>
            <param name="logicalName"></param>
            <param name="columnSet">Columns to retrieve.</param>
            <param name="first">Used to specificy that only one entity should be returned.</param>
            <param name="columnName">The name of the column to perform the in against.</param>
            <param name="values">The list of values to search for being in the column name.</param>
        </member>
        <member name="M:DLaB.Xrm.QueryExpressionFactory.CreateIn(System.String,System.Boolean,Microsoft.Xrm.Sdk.Query.ColumnSet,System.Boolean,System.String,System.Collections.IEnumerable)">
            <summary>
            Returns a Query Expression for the given inputs
            </summary>
            <param name="columnSet">Columns to retrieve.</param>
            <param name="first">Used to specificy that only one entity should be returned.</param>
            <param name="logicalName"></param>
            <param name="activeOnly">Specifies if only Active Records should be returned.</param>
            <param name="columnName">The name of the column to perform the in against.</param>
            <param name="values">The list of values to search for being in the column name.</param>
        </member>
        <member name="M:DLaB.Xrm.QueryExpressionFactory.CreateIn(System.String,System.Boolean,Microsoft.Xrm.Sdk.Query.ColumnSet,System.Boolean,System.String,System.Object[])">
            <summary>
            Returns a Query Expression for the given inputs
            </summary>
            <param name="columnSet">Columns to retrieve.</param>
            <param name="first">Used to specificy that only one entity should be returned.</param>
            <param name="logicalName"></param>
            <param name="activeOnly">Specifies if only Active Records should be returned.</param>
            <param name="columnName">The name of the column to perform the in against.</param>
            <param name="values">The list of values to search for being in the column name.</param>
        </member>
        <member name="M:DLaB.Xrm.QueryExpressionFactory.CreateIn``1(System.String,System.Collections.IEnumerable)">
            <summary>
            Returns a Query Expression for the given inputs
            </summary>
            <typeparam name="T"></typeparam>
            <param name="columnName">The name of the column to perform the in against.</param>
            <param name="values">The list of values to search for being in the column name.</param>
        </member>
        <member name="M:DLaB.Xrm.QueryExpressionFactory.CreateIn``1(System.String,System.Object[])">
            <summary>
            Returns a Query Expression for the given inputs
            </summary>
            <typeparam name="T"></typeparam>
            <param name="columnName">The name of the column to perform the in against.</param>
            <param name="values">The list of values to search for being in the column name.</param>
        </member>
        <member name="M:DLaB.Xrm.QueryExpressionFactory.CreateIn``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String,System.Collections.IEnumerable)">
            <summary>
            Returns a Query Expression for the given inputs
            </summary>
            <typeparam name="T"></typeparam>
            <param name="anonymousTypeInitializer">An Anonymous Type Initializer where the properties of the anonymous
            type are the column names to add.</param>
            <param name="columnName">The name of the column to perform the in against.</param>
            <param name="values">The list of values to search for being in the column name.</param>
        </member>
        <member name="M:DLaB.Xrm.QueryExpressionFactory.CreateIn``1(Microsoft.Xrm.Sdk.Query.ColumnSet,System.String,System.Collections.IEnumerable)">
            <summary>
            Returns a Query Expression for the given inputs
            </summary>
            <typeparam name="T"></typeparam>
            <param name="columnSet">Columns to retrieve.</param>
            <param name="columnName">The name of the column to perform the in against.</param>
            <param name="values">The list of values to search for being in the column name.</param>
        </member>
        <member name="M:DLaB.Xrm.QueryExpressionFactory.CreateIn``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String,System.Object[])">
            <summary>
            Returns a Query Expression for the given inputs
            </summary>
            <typeparam name="T"></typeparam>
            <param name="anonymousTypeInitializer">An Anonymous Type Initializer where the properties of the anonymous
            type are the column names to add.</param>
            <param name="columnName">The name of the column to perform the in against.</param>
            <param name="values">The list of values to search for being in the column name.</param>
        </member>
        <member name="M:DLaB.Xrm.QueryExpressionFactory.CreateIn``1(Microsoft.Xrm.Sdk.Query.ColumnSet,System.String,System.Object[])">
            <summary>
            Returns a Query Expression for the given inputs
            </summary>
            <typeparam name="T"></typeparam>
            <param name="columnSet">Columns to retrieve.</param>
            <param name="columnName">The name of the column to perform the in against.</param>
            <param name="values">The list of values to search for being in the column name.</param>
        </member>
        <member name="M:DLaB.Xrm.QueryExpressionFactory.CreateIn``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Boolean,System.String,System.Collections.IEnumerable)">
            <summary>
            Returns a Query Expression for the given inputs
            </summary>
            <typeparam name="T"></typeparam>
            <param name="anonymousTypeInitializer">An Anonymous Type Initializer where the properties of the anonymous
            type are the column names to add.</param>
            <param name="first">Used to specificy that only one entity should be returned.</param>
            <param name="columnName">The name of the column to perform the in against.</param>
            <param name="values">The list of values to search for being in the column name.</param>
        </member>
        <member name="M:DLaB.Xrm.QueryExpressionFactory.CreateIn``1(Microsoft.Xrm.Sdk.Query.ColumnSet,System.Boolean,System.String,System.Collections.IEnumerable)">
            <summary>
            Returns a Query Expression for the given inputs
            </summary>
            <typeparam name="T"></typeparam>
            <param name="columnSet">Columns to retrieve.</param>
            <param name="first">Used to specificy that only one entity should be returned.</param>
            <param name="columnName">The name of the column to perform the in against.</param>
            <param name="values">The list of values to search for being in the column name.</param>
        </member>
        <member name="M:DLaB.Xrm.QueryExpressionFactory.CreateIn``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Boolean,System.String,System.Object[])">
            <summary>
            Returns a Query Expression for the given inputs
            </summary>
            <typeparam name="T"></typeparam>
            <param name="anonymousTypeInitializer">An Anonymous Type Initializer where the properties of the anonymous
            type are the column names to add.</param>
            <param name="first">Used to specificy that only one entity should be returned.</param>
            <param name="columnName">The name of the column to perform the in against.</param>
            <param name="values">The list of values to search for being in the column name.</param>
        </member>
        <member name="M:DLaB.Xrm.QueryExpressionFactory.CreateIn``1(Microsoft.Xrm.Sdk.Query.ColumnSet,System.Boolean,System.String,System.Object[])">
            <summary>
            Returns a Query Expression for the given inputs
            </summary>
            <typeparam name="T"></typeparam>
            <param name="columnSet">Columns to retrieve.</param>
            <param name="first">Used to specificy that only one entity should be returned.</param>
            <param name="columnName">The name of the column to perform the in against.</param>
            <param name="values">The list of values to search for being in the column name.</param>
        </member>
        <member name="M:DLaB.Xrm.QueryExpressionFactory.CreateIn``1(DLaB.Xrm.QuerySettings{``0},System.String,System.Object[])">
            <summary>
            Returns a Query Expression for the given inputs
            </summary>
            <typeparam name="T"></typeparam>
            <param name="settings">The query settings used to Create the QueryExpression.</param>
            <param name="columnName">The name of the column to perform the in against.</param>
            <param name="values">The list of values to search for being in the column name.</param>
        </member>
        <member name="M:DLaB.Xrm.QueryExpressionFactory.CreateIn``1(System.Boolean,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Boolean,System.String,System.Collections.IEnumerable)">
            <summary>
            Returns a Query Expression for the given inputs
            </summary>
            <typeparam name="T"></typeparam>
            <param name="anonymousTypeInitializer">An Anonymous Type Initializer where the properties of the anonymous
            type are the column names to add.</param>
            <param name="first">Used to specificy that only one entity should be returned.</param>
            <param name="activeOnly">Specifies if only Active Records should be returned.</param>
            <param name="columnName">The name of the column to perform the in against.</param>
            <param name="values">The list of values to search for being in the column name.</param>
        </member>
        <member name="M:DLaB.Xrm.QueryExpressionFactory.CreateIn``1(System.Boolean,Microsoft.Xrm.Sdk.Query.ColumnSet,System.Boolean,System.String,System.Collections.IEnumerable)">
            <summary>
            Returns a Query Expression for the given inputs
            </summary>
            <typeparam name="T"></typeparam>
            <param name="columnSet">Columns to retrieve.</param>
            <param name="first">Used to specificy that only one entity should be returned.</param>
            <param name="activeOnly">Specifies if only Active Records should be returned.</param>
            <param name="columnName">The name of the column to perform the in against.</param>
            <param name="values">The list of values to search for being in the column name.</param>
        </member>
        <member name="M:DLaB.Xrm.QueryExpressionFactory.CreateIn``1(System.Boolean,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Boolean,System.String,System.Object[])">
            <summary>
            Returns a Query Expression for the given inputs
            </summary>
            <typeparam name="T"></typeparam>
            <param name="anonymousTypeInitializer">An Anonymous Type Initializer where the properties of the anonymous
            type are the column names to add.</param>
            <param name="first">Used to specificy that only one entity should be returned.</param>
            <param name="activeOnly">Specifies if only Active Records should be returned.</param>
            <param name="columnName">The name of the column to perform the in against.</param>
            <param name="values">The list of values to search for being in the column name.</param>
        </member>
        <member name="M:DLaB.Xrm.QueryExpressionFactory.CreateIn``1(System.Boolean,Microsoft.Xrm.Sdk.Query.ColumnSet,System.Boolean,System.String,System.Object[])">
            <summary>
            Returns a Query Expression for the given inputs
            </summary>
            <typeparam name="T"></typeparam>
            <param name="columnSet">Columns to retrieve.</param>
            <param name="first">Used to specificy that only one entity should be returned.</param>
            <param name="activeOnly">Specifies if only Active Records should be returned.</param>
            <param name="columnName">The name of the column to perform the in against.</param>
            <param name="values">The list of values to search for being in the column name.</param>
        </member>
        <member name="T:DLaB.Xrm.QuerySettings`1">
            <summary>
            Typed QuerySettings class
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:DLaB.Xrm.QuerySettings`1.Columns">
            <summary>
            Columns to retrieve
            </summary>
        </member>
        <member name="P:DLaB.Xrm.QuerySettings`1.AdditionalColumns">
            <summary>
            Adds the specified additional columns to the Columns ColumnSet
            </summary>
        </member>
        <member name="P:DLaB.Xrm.QuerySettings`1.First">
            <summary>
            Used to specify that only one entity should be returned
            </summary>
        </member>
        <member name="P:DLaB.Xrm.QuerySettings`1.ActiveOnly">
            <summary>
            Specifies if only Active Records should be returned
            </summary>
        </member>
        <member name="P:DLaB.Xrm.QuerySettings`1.CriteriaOperator">
            <summary>
            Specifies the Logical Operator of the Criteria
            </summary>
        </member>
        <member name="P:DLaB.Xrm.QuerySettings`1.LogicalName">
            <summary>
            Gets or sets the name of the logical.
            </summary>
            <value>
            The name of the logical.
            </value>
        </member>
        <member name="M:DLaB.Xrm.QuerySettings`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DLaB.Xrm.QuerySettings`1"/> class.
            </summary>
            <exception cref="T:DLaB.Common.Exceptions.TypeArgumentException">'Entity' is an invalid type for T.  Please use the LateBoundQuerySettings.</exception>
        </member>
        <member name="M:DLaB.Xrm.QuerySettings`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DLaB.Xrm.QuerySettings`1"/> class.
            </summary>
            <param name="logicalName">Name of the logical.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:DLaB.Xrm.QuerySettings`1.CreateExpression">
            <summary>
            Creates the expression.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.QuerySettings`1.CreateExpression(System.Object[])">
            <summary>
            </summary>
            <param name="columnNameAndValuePairs">List of pairs that look like this:
            (string name of the column, value of the column) ie. "name","John Doe" goes to entity.name = "John Doe"</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.QuerySettings`1.CreateInExpression(System.String,System.Object[])">
            <summary>
            </summary>
            <param name="columnName">The name of the column to perform the in against</param>
            <param name="values">The list of values to search for being in the column name</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.RetrieveAllEntities`1.GetAllEntities(Microsoft.Xrm.Sdk.IOrganizationService,Microsoft.Xrm.Sdk.Query.QueryExpression,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Gets all entities.
            </summary>
            <param name="service">The service.</param>
            <param name="qe">The qe.</param>
            <param name="maxCount">The maximum count.</param>
            <param name="pageSize">Size of the page.</param>
            <param name="async">if set to <c>true</c> the Service will retrieve the next batch asynchronously after starting to return the first batch.  This means that any looping that is performed with this call, can not use the same organization service or else there will be a multi-threading issue.</param>
            <returns></returns>
        </member>
        <member name="T:DLaB.Xrm.Sandbox.ExceptionHandler">
            <summary>
            Exception Handler For Exceptions when executing in Sandbox Isolation Mode
            </summary>
        </member>
        <member name="M:DLaB.Xrm.Sandbox.ExceptionHandler.AssertCanThrow(System.Exception)">
            <summary>
            Determines whether the given exception can be thrown in sandbox mode.
            Throws a "Sandbox-Safe" Exception if it can't
            </summary>
            <param name="ex">The ex.</param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:DLaB.Xrm.Sandbox.ExceptionHandler.IsValidToBeThrown(System.Exception)">
            <summary>
            Determines whether the specified ex is valid to be thrown.
            Current best guess is that it is not 
            </summary>
            <param name="ex">The ex.</param>
            <returns></returns>
        </member>
        <member name="T:DLaB.Xrm.Sandbox.Serialization.Extensions">
            <summary>
            Extensions for the DLaB.Xrm.Sandbox.Serialization namespace
            </summary>
        </member>
        <member name="M:DLaB.Xrm.Sandbox.Serialization.Extensions.DeserializeSerializedEntity(System.String)">
            <summary>
            Deserializes the entity from a string xml value to a specific entity type.
            </summary>
            <param name="xml">The xml to deserialize.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Sandbox.Serialization.Extensions.DeserializeSerializedEntity``1(System.String)">
            <summary>
            Deserializes the entity from a string xml value to an IExtensibleDataObject
            </summary>
            <param name="xml">The xml to deserialize.</param>
            <returns></returns>
        </member>
        <member name="T:DLaB.Xrm.Sandbox.Serialization.KeyValuePairOfRelationshipEntityCollectionX_PsK4FkN">
            <summary>
            Sandbox Serialization Safe KeyValuePairOfRelationship
            </summary>
        </member>
        <member name="P:DLaB.Xrm.Sandbox.Serialization.KeyValuePairOfRelationshipEntityCollectionX_PsK4FkN.key">
            <summary>
            Gets or sets the key.
            </summary>
            <value>
            The key.
            </value>
        </member>
        <member name="P:DLaB.Xrm.Sandbox.Serialization.KeyValuePairOfRelationshipEntityCollectionX_PsK4FkN.value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="M:DLaB.Xrm.Sandbox.Serialization.KeyValuePairOfRelationshipEntityCollectionX_PsK4FkN.#ctor(Microsoft.Xrm.Sdk.Relationship,DLaB.Xrm.Sandbox.Serialization.SerializableEntityCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:DLaB.Xrm.Sandbox.Serialization.KeyValuePairOfRelationshipEntityCollectionX_PsK4FkN"/> class.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:DLaB.Xrm.Sandbox.Serialization.KeyValuePairOfRelationshipEntityCollectionX_PsK4FkN.#ctor(Microsoft.Xrm.Sdk.Relationship,Microsoft.Xrm.Sdk.EntityCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:DLaB.Xrm.Sandbox.Serialization.KeyValuePairOfRelationshipEntityCollectionX_PsK4FkN"/> class.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:DLaB.Xrm.Sandbox.Serialization.KeyValuePairOfRelationshipEntityCollectionX_PsK4FkN.op_Explicit(DLaB.Xrm.Sandbox.Serialization.KeyValuePairOfRelationshipEntityCollectionX_PsK4FkN)~System.Collections.Generic.KeyValuePair{Microsoft.Xrm.Sdk.Relationship,Microsoft.Xrm.Sdk.EntityCollection}">
            <summary>
            Performs an explicit conversion from <see cref="T:DLaB.Xrm.Sandbox.Serialization.KeyValuePairOfRelationshipEntityCollectionX_PsK4FkN"/> to <see cref="T:System.Collections.Generic.KeyValuePair`2"/>.
            </summary>
            <param name="pair">The pair.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="T:DLaB.Xrm.Sandbox.Serialization.KeyValuePairOfstringanyType">
            <summary>
            Sandbox Serialization Safe KeyValuePairOfstringanyType
            </summary>
        </member>
        <member name="P:DLaB.Xrm.Sandbox.Serialization.KeyValuePairOfstringanyType.key">
            <summary>
            Gets or sets the key.
            </summary>
            <value>
            The key.
            </value>
        </member>
        <member name="P:DLaB.Xrm.Sandbox.Serialization.KeyValuePairOfstringanyType.value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="M:DLaB.Xrm.Sandbox.Serialization.KeyValuePairOfstringanyType.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:DLaB.Xrm.Sandbox.Serialization.KeyValuePairOfstringanyType"/> class.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:DLaB.Xrm.Sandbox.Serialization.KeyValuePairOfstringanyType.#ctor(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:DLaB.Xrm.Sandbox.Serialization.KeyValuePairOfstringanyType"/> class.
            </summary>
            <param name="kvp">The KVP.</param>
        </member>
        <member name="M:DLaB.Xrm.Sandbox.Serialization.KeyValuePairOfstringanyType.op_Explicit(DLaB.Xrm.Sandbox.Serialization.KeyValuePairOfstringanyType)~System.Collections.Generic.KeyValuePair{System.String,System.Object}">
            <summary>
            Performs an explicit conversion from <see cref="T:DLaB.Xrm.Sandbox.Serialization.KeyValuePairOfstringanyType"/> to KeyValuePair.
            </summary>
            <param name="pair">The pair.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="T:DLaB.Xrm.Sandbox.Serialization.KeyValuePairOfstringstring">
            <summary>
            Sandbox Serialization Safe KeyValuePairOfstringstring
            </summary>
        </member>
        <member name="P:DLaB.Xrm.Sandbox.Serialization.KeyValuePairOfstringstring.key">
            <summary>
            Gets or sets the key.
            </summary>
            <value>
            The key.
            </value>
        </member>
        <member name="P:DLaB.Xrm.Sandbox.Serialization.KeyValuePairOfstringstring.value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="M:DLaB.Xrm.Sandbox.Serialization.KeyValuePairOfstringstring.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DLaB.Xrm.Sandbox.Serialization.KeyValuePairOfstringstring"/> class.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:DLaB.Xrm.Sandbox.Serialization.KeyValuePairOfstringstring.#ctor(System.Collections.Generic.KeyValuePair{System.String,System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:DLaB.Xrm.Sandbox.Serialization.KeyValuePairOfstringstring"/> class.
            </summary>
            <param name="kvp">The KVP.</param>
        </member>
        <member name="M:DLaB.Xrm.Sandbox.Serialization.KeyValuePairOfstringstring.op_Explicit(DLaB.Xrm.Sandbox.Serialization.KeyValuePairOfstringstring)~System.Collections.Generic.KeyValuePair{System.String,System.String}">
            <summary>
            Performs an explicit conversion from <see cref="T:DLaB.Xrm.Sandbox.Serialization.KeyValuePairOfstringstring"/> to KeyValuePair{System.String, System.String}.
            </summary>
            <param name="pair">The pair.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="T:DLaB.Xrm.Sandbox.Serialization.SerializableAttributeCollection">
            <summary>
            Sandbox safe Serializable Attribute Collection
            </summary>
        </member>
        <member name="M:DLaB.Xrm.Sandbox.Serialization.SerializableAttributeCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DLaB.Xrm.Sandbox.Serialization.SerializableAttributeCollection"/> class.
            </summary>
        </member>
        <member name="M:DLaB.Xrm.Sandbox.Serialization.SerializableAttributeCollection.#ctor(Microsoft.Xrm.Sdk.AttributeCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:DLaB.Xrm.Sandbox.Serialization.SerializableAttributeCollection"/> class.
            </summary>
            <param name="attributes">The attributes.</param>
        </member>
        <member name="M:DLaB.Xrm.Sandbox.Serialization.SerializableAttributeCollection.op_Explicit(DLaB.Xrm.Sandbox.Serialization.SerializableAttributeCollection)~Microsoft.Xrm.Sdk.AttributeCollection">
            <summary>
            Performs an explicit conversion from <see cref="T:DLaB.Xrm.Sandbox.Serialization.SerializableAttributeCollection"/> to <see cref="T:Microsoft.Xrm.Sdk.AttributeCollection"/>.
            </summary>
            <param name="collection">The collection.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="T:DLaB.Xrm.Sandbox.Serialization.SerializableEntity">
            <summary>
            In Sandbox Mode, You can't serialize and entity.  This Entity Type removes the dependencies that required a non-sandboxed plugin from serializing an Entity
            </summary>
        </member>
        <member name="P:DLaB.Xrm.Sandbox.Serialization.SerializableEntity.LogicalName">
            <summary>
            Gets or sets the name of the logical.
            </summary>
            <value>
            The name of the logical.
            </value>
        </member>
        <member name="P:DLaB.Xrm.Sandbox.Serialization.SerializableEntity.Id">
            <summary>
            Gets or sets the identifier.
            </summary>
            <value>
            The identifier.
            </value>
        </member>
        <member name="P:DLaB.Xrm.Sandbox.Serialization.SerializableEntity.Attributes">
            <summary>
            Gets or sets the attributes.
            </summary>
            <value>
            The attributes.
            </value>
        </member>
        <member name="P:DLaB.Xrm.Sandbox.Serialization.SerializableEntity.EntityState">
            <summary>
            Gets or sets the state of the entity.
            </summary>
            <value>
            The state of the entity.
            </value>
        </member>
        <member name="P:DLaB.Xrm.Sandbox.Serialization.SerializableEntity.FormattedValues">
            <summary>
            Gets or sets the formatted values.
            </summary>
            <value>
            The formatted values.
            </value>
        </member>
        <member name="P:DLaB.Xrm.Sandbox.Serialization.SerializableEntity.RelatedEntities">
            <summary>
            Gets or sets the related entities.
            </summary>
            <value>
            The related entities.
            </value>
        </member>
        <member name="P:DLaB.Xrm.Sandbox.Serialization.SerializableEntity.RowVersion">
            <summary>
            Gets or sets the row version.
            </summary>
            <value>
            The row version.
            </value>
        </member>
        <member name="P:DLaB.Xrm.Sandbox.Serialization.SerializableEntity.KeyAttributes">
            <summary>
            Gets or sets the key attributes.
            </summary>
            <value>
            The key attributes.
            </value>
        </member>
        <member name="P:DLaB.Xrm.Sandbox.Serialization.SerializableEntity.ExtensionData">
            <summary>
            Gets or sets the extension data.
            </summary>
            <value>
            The extension data.
            </value>
        </member>
        <member name="M:DLaB.Xrm.Sandbox.Serialization.SerializableEntity.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DLaB.Xrm.Sandbox.Serialization.SerializableEntity"/> class.
            </summary>
        </member>
        <member name="M:DLaB.Xrm.Sandbox.Serialization.SerializableEntity.#ctor(Microsoft.Xrm.Sdk.Entity)">
            <summary>
            Initializes a new instance of the <see cref="T:DLaB.Xrm.Sandbox.Serialization.SerializableEntity"/> class.
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:DLaB.Xrm.Sandbox.Serialization.SerializableEntity.op_Explicit(DLaB.Xrm.Sandbox.Serialization.SerializableEntity)~Microsoft.Xrm.Sdk.Entity">
            <summary>
            Performs an explicit conversion from <see cref="T:DLaB.Xrm.Sandbox.Serialization.SerializableEntity"/> to <see cref="T:Microsoft.Xrm.Sdk.Entity"/>.
            </summary>
            <param name="entity">The entity.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="T:DLaB.Xrm.Sandbox.Serialization.SerializableEntityCollection">
            <summary>
            Sandbox Serializable Entity Collection
            </summary>
        </member>
        <member name="P:DLaB.Xrm.Sandbox.Serialization.SerializableEntityCollection.Entities">
            <summary>
            Gets or sets the entities.
            </summary>
            <value>
            The entities.
            </value>
        </member>
        <member name="P:DLaB.Xrm.Sandbox.Serialization.SerializableEntityCollection.EntityName">
            <summary>
            Gets or sets the name of the entity.
            </summary>
            <value>
            The name of the entity.
            </value>
        </member>
        <member name="P:DLaB.Xrm.Sandbox.Serialization.SerializableEntityCollection.MinActiveRowVersion">
            <summary>
            Gets or sets the minimum active row version.
            </summary>
            <value>
            The minimum active row version.
            </value>
        </member>
        <member name="P:DLaB.Xrm.Sandbox.Serialization.SerializableEntityCollection.MoreRecords">
            <summary>
            Gets or sets a value indicating whether [more records].
            </summary>
            <value>
              <c>true</c> if [more records]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:DLaB.Xrm.Sandbox.Serialization.SerializableEntityCollection.PagingCookie">
            <summary>
            Gets or sets the paging cookie.
            </summary>
            <value>
            The paging cookie.
            </value>
        </member>
        <member name="P:DLaB.Xrm.Sandbox.Serialization.SerializableEntityCollection.TotalRecordCount">
            <summary>
            Gets or sets the total record count.
            </summary>
            <value>
            The total record count.
            </value>
        </member>
        <member name="P:DLaB.Xrm.Sandbox.Serialization.SerializableEntityCollection.TotalRecordCountLimitExceeded">
            <summary>
            Gets or sets a value indicating whether [total record count limit exceeded].
            </summary>
            <value>
            <c>true</c> if [total record count limit exceeded]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:DLaB.Xrm.Sandbox.Serialization.SerializableEntityCollection.ExtensionData">
            <summary>
            Gets or sets the extension data.
            </summary>
            <value>
            The extension data.
            </value>
        </member>
        <member name="M:DLaB.Xrm.Sandbox.Serialization.SerializableEntityCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DLaB.Xrm.Sandbox.Serialization.SerializableEntityCollection"/> class.
            </summary>
        </member>
        <member name="M:DLaB.Xrm.Sandbox.Serialization.SerializableEntityCollection.#ctor(Microsoft.Xrm.Sdk.EntityCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:DLaB.Xrm.Sandbox.Serialization.SerializableEntityCollection"/> class.
            </summary>
            <param name="entities">The entities.</param>
        </member>
        <member name="M:DLaB.Xrm.Sandbox.Serialization.SerializableEntityCollection.op_Explicit(DLaB.Xrm.Sandbox.Serialization.SerializableEntityCollection)~Microsoft.Xrm.Sdk.EntityCollection">
            <summary>
            Performs an explicit conversion from <see cref="T:DLaB.Xrm.Sandbox.Serialization.SerializableEntityCollection"/> to <see cref="T:Microsoft.Xrm.Sdk.EntityCollection"/>.
            </summary>
            <param name="collection">The collection.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="T:DLaB.Xrm.Sandbox.Serialization.SerializableEntityReference">
            <summary>
            Sandbox Serializable Entity Reference
            </summary>
        </member>
        <member name="P:DLaB.Xrm.Sandbox.Serialization.SerializableEntityReference.Id">
            <summary>
            Gets or sets the ID of the record.
            </summary>
            
            <returns>
            Type: Returns_Guid
            The ID of the record.
            </returns>
        </member>
        <member name="P:DLaB.Xrm.Sandbox.Serialization.SerializableEntityReference.LogicalName">
            <summary>
            Gets or sets the logical name of the entity.
            </summary>
            
            <returns>
            Type: Returns_StringThe logical name of the entity.
            </returns>
        </member>
        <member name="P:DLaB.Xrm.Sandbox.Serialization.SerializableEntityReference.Name">
            <summary>
            Gets or sets the value of the primary attribute of the entity.
            </summary>
            
            <returns>
            Type: Returns_StringThe value of the primary attribute of the entity.
            </returns>
        </member>
        <member name="P:DLaB.Xrm.Sandbox.Serialization.SerializableEntityReference.KeyAttributes">
            <summary>
            Gets or sets the key attributes.
            </summary>
            
            <returns>
            Type: <see cref="T:Microsoft.Xrm.Sdk.KeyAttributeCollection"/>.
            </returns>
        </member>
        <member name="M:DLaB.Xrm.Sandbox.Serialization.SerializableEntityReference.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DLaB.Xrm.Sandbox.Serialization.SerializableEntityReference"/> class.
            </summary>
        </member>
        <member name="P:DLaB.Xrm.Sandbox.Serialization.SerializableEntityReference.RowVersion">
            <summary>
            Gets or sets the row version.
            </summary>
            
            <returns>
            Type: Returns_String.
            </returns>
        </member>
        <member name="P:DLaB.Xrm.Sandbox.Serialization.SerializableEntityReference.ExtensionData">
            <summary>
            ExtensionData
            </summary>
            
            <returns>
            Type: Returns_ExtensionDataObjectThe extension data.
            </returns>
        </member>
        <member name="M:DLaB.Xrm.Sandbox.Serialization.SerializableEntityReference.#ctor(Microsoft.Xrm.Sdk.EntityReference)">
            <summary>
            Initializes a new instance of the <see cref="T:DLaB.Xrm.Sandbox.Serialization.SerializableEntityReference"/> class.
            </summary>
            <param name="entityReference">The entity reference.</param>
        </member>
        <member name="M:DLaB.Xrm.Sandbox.Serialization.SerializableEntityReference.op_Explicit(DLaB.Xrm.Sandbox.Serialization.SerializableEntityReference)~Microsoft.Xrm.Sdk.EntityReference">
            <summary>
            Performs an explicit conversion from <see cref="T:DLaB.Xrm.Sandbox.Serialization.SerializableEntityReference"/> to <see cref="T:Microsoft.Xrm.Sdk.EntityReference"/>.
            </summary>
            <param name="entity">The entity.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="T:DLaB.Xrm.Sandbox.Serialization.SerializableFormattedValueCollection">
            <summary>
            Sandbox safe FormattedValueCollection
            </summary>
        </member>
        <member name="M:DLaB.Xrm.Sandbox.Serialization.SerializableFormattedValueCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DLaB.Xrm.Sandbox.Serialization.SerializableFormattedValueCollection"/> class.
            </summary>
        </member>
        <member name="M:DLaB.Xrm.Sandbox.Serialization.SerializableFormattedValueCollection.#ctor(Microsoft.Xrm.Sdk.FormattedValueCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:DLaB.Xrm.Sandbox.Serialization.SerializableFormattedValueCollection"/> class.
            </summary>
            <param name="values">The values.</param>
        </member>
        <member name="M:DLaB.Xrm.Sandbox.Serialization.SerializableFormattedValueCollection.op_Explicit(DLaB.Xrm.Sandbox.Serialization.SerializableFormattedValueCollection)~Microsoft.Xrm.Sdk.FormattedValueCollection">
            <summary>
            Performs an explicit conversion from <see cref="T:DLaB.Xrm.Sandbox.Serialization.SerializableFormattedValueCollection"/> to <see cref="T:Microsoft.Xrm.Sdk.FormattedValueCollection"/>.
            </summary>
            <param name="collection">The collection.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="T:DLaB.Xrm.Sandbox.Serialization.SerializableKeyAttributeCollection">
            <summary>
            Sandbox safe Serialization of Key Attribute Collection
            </summary>
        </member>
        <member name="M:DLaB.Xrm.Sandbox.Serialization.SerializableKeyAttributeCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DLaB.Xrm.Sandbox.Serialization.SerializableKeyAttributeCollection"/> class.
            </summary>
        </member>
        <member name="M:DLaB.Xrm.Sandbox.Serialization.SerializableKeyAttributeCollection.#ctor(Microsoft.Xrm.Sdk.KeyAttributeCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:DLaB.Xrm.Sandbox.Serialization.SerializableKeyAttributeCollection"/> class.
            </summary>
            <param name="keys">The keys.</param>
        </member>
        <member name="M:DLaB.Xrm.Sandbox.Serialization.SerializableKeyAttributeCollection.op_Explicit(DLaB.Xrm.Sandbox.Serialization.SerializableKeyAttributeCollection)~Microsoft.Xrm.Sdk.KeyAttributeCollection">
            <summary>
            Performs an explicit conversion from <see cref="T:DLaB.Xrm.Sandbox.Serialization.SerializableKeyAttributeCollection"/> to <see cref="T:Microsoft.Xrm.Sdk.KeyAttributeCollection"/>.
            </summary>
            <param name="collection">The collection.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="T:DLaB.Xrm.Sandbox.Serialization.SerializableRelatedEntityCollection">
            <summary>
            Sandbox safe Serialization for Related Entity Collection
            </summary>
        </member>
        <member name="M:DLaB.Xrm.Sandbox.Serialization.SerializableRelatedEntityCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DLaB.Xrm.Sandbox.Serialization.SerializableRelatedEntityCollection"/> class.
            </summary>
        </member>
        <member name="M:DLaB.Xrm.Sandbox.Serialization.SerializableRelatedEntityCollection.#ctor(Microsoft.Xrm.Sdk.RelatedEntityCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:DLaB.Xrm.Sandbox.Serialization.SerializableRelatedEntityCollection"/> class.
            </summary>
            <param name="col">The col.</param>
        </member>
        <member name="M:DLaB.Xrm.Sandbox.Serialization.SerializableRelatedEntityCollection.op_Explicit(DLaB.Xrm.Sandbox.Serialization.SerializableRelatedEntityCollection)~Microsoft.Xrm.Sdk.RelatedEntityCollection">
            <summary>
            Performs an explicit conversion from <see cref="T:DLaB.Xrm.Sandbox.Serialization.SerializableRelatedEntityCollection"/> to <see cref="T:Microsoft.Xrm.Sdk.RelatedEntityCollection"/>.
            </summary>
            <param name="collection">The collection.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="T:DLaB.Xrm.SolutionCheckerAvoider">
            <summary>
            SolutionCheckerAvoider for workarounds with the SolutionChecker
            </summary>
        </member>
        <member name="M:DLaB.Xrm.SolutionCheckerAvoider.CreateColumnSetWithAllColumns">
            <summary>
            Work around for il-specify-column
            </summary>
            <returns></returns>
        </member>
        <member name="T:DLaB.Xrm.TypedQueryExpression`1">
            <summary>
            A QueryExpression Typed to the Entity that is being received 
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
        </member>
        <member name="P:DLaB.Xrm.TypedQueryExpression`1.Query">
            <summary>
            Gets or sets the query.
            </summary>
            <value>
            The query.
            </value>
        </member>
        <member name="P:DLaB.Xrm.TypedQueryExpression`1.Distinct">
            <summary>
            The QueryExpression's Distinct
            </summary>
            <value>
            <c>true</c> if distinct; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:DLaB.Xrm.TypedQueryExpression`1.NoLock">
            <summary>
            The QueryExpression's NoLock
            </summary>
            <value>
            <c>true</c> if [no lock]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:DLaB.Xrm.TypedQueryExpression`1.PageInfo">
            <summary>
            The QueryExpression's Page Info
            </summary>
            <value>
            The page information.
            </value>
        </member>
        <member name="P:DLaB.Xrm.TypedQueryExpression`1.LinkEntities">
            <summary>
            The QueryExpression's LinkEntities
            </summary>
            <value>
            The link entities.
            </value>
        </member>
        <member name="P:DLaB.Xrm.TypedQueryExpression`1.Criteria">
            <summary>
            The QueryExpression's Criteria
            </summary>
            <value>
            The criteria.
            </value>
        </member>
        <member name="P:DLaB.Xrm.TypedQueryExpression`1.Orders">
            <summary>
            The QueryExpression's Orders
            </summary>
            <value>
            The orders.
            </value>
        </member>
        <member name="P:DLaB.Xrm.TypedQueryExpression`1.EntityName">
            <summary>
            The QueryExpression's EntityName
            </summary>
            <value>
            The name of the entity.
            </value>
        </member>
        <member name="P:DLaB.Xrm.TypedQueryExpression`1.ColumnSet">
            <summary>
            The QueryExpression's ColumnSet
            </summary>
            <value>
            The column set.
            </value>
        </member>
        <member name="P:DLaB.Xrm.TypedQueryExpression`1.TopCount">
            <summary>
            The QueryExpression's TopCount
            </summary>
            <value>
            The top count.
            </value>
        </member>
        <member name="M:DLaB.Xrm.TypedQueryExpression`1.AddOrder(System.String,Microsoft.Xrm.Sdk.Query.OrderType)">
            <summary>
            Adds the order.
            </summary>
            <param name="attributeName">Name of the attribute.</param>
            <param name="orderType">Type of the order.</param>
        </member>
        <member name="M:DLaB.Xrm.TypedQueryExpression`1.AddLink(System.String,System.String,System.String)">
            <summary>
            Adds the link.
            </summary>
            <param name="linkToEntityName">Name of the link to entity.</param>
            <param name="linkFromAttributeName">Name of the link from attribute.</param>
            <param name="linkToAttributeName">Name of the link to attribute.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.TypedQueryExpression`1.AddLink(System.String,System.String,System.String,Microsoft.Xrm.Sdk.Query.JoinOperator)">
            <summary>
            Adds the link.
            </summary>
            <param name="linkToEntityName">Name of the link to entity.</param>
            <param name="linkFromAttributeName">Name of the link from attribute.</param>
            <param name="linkToAttributeName">Name of the link to attribute.</param>
            <param name="joinOperator">The join operator.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.TypedQueryExpression`1.#ctor(Microsoft.Xrm.Sdk.Query.QueryExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:DLaB.Xrm.TypedQueryExpression`1" /> class.
            </summary>
            <param name="qe">The qe.</param>
        </member>
        <member name="M:DLaB.Xrm.TypedQueryExpression`1.op_Implicit(DLaB.Xrm.TypedQueryExpression{`0})~Microsoft.Xrm.Sdk.Query.QueryExpression">
            <summary>
            Implements the operator implicit QueryExpression.
            </summary>
            <param name="container">The container.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:DLaB.Xrm.TypedQueryExpression`1.AddLink(System.String,System.String)">
            <summary>
            Adds the link.
            </summary>
            <param name="linkToEntityName">Name of the link to entity.</param>
            <param name="linkAttributesName">Name of the link attributes.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.TypedQueryExpression`1.AddLink(System.String,System.String,Microsoft.Xrm.Sdk.Query.JoinOperator)">
            <summary>
            Adds the link.
            </summary>
            <param name="linkToEntityName">Name of the link to entity.</param>
            <param name="linkAttributesName">Name of the link attributes.</param>
            <param name="joinType">Type of the join.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.TypedQueryExpression`1.AddLink``1(System.String)">
            <summary>
            Adds the type T as a linked entity to the query expression, additionally ensuring it is active.
            Assumes both entities have the same attribute name to link on.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="linkAttributesName"></param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.TypedQueryExpression`1.AddLink``1(System.String,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Adds the type T as a linked entity to the query expression, additionally ensuring it is active.
            Assumes both entities have the same attribute name to link on.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="linkAttributesName"></param>
            <param name="anonymousTypeInitializer">An Anonymous Type Initializer where the properties of the anonymous
            type are the column names to add</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.TypedQueryExpression`1.AddLink``1(System.String,Microsoft.Xrm.Sdk.Query.JoinOperator)">
            <summary>
            Adds the type T as a linked entity, additionally ensuring it is active.
            Assumes both entities have the same attribute name to link on.
            </summary>
            <typeparam name="T">The type of the entity that is to be linked and asserted active.</typeparam>
            <param name="linkAttributesName">Name of the link attributes.</param>
            <param name="joinType">Type of the join to perform.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.TypedQueryExpression`1.AddLink``1(System.String,Microsoft.Xrm.Sdk.Query.JoinOperator,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Adds the type T as a linked entity, additionally ensuring it is active.
            Assumes both entities have the same attribute name to link on.
            </summary>
            <typeparam name="T">The type of the entity that is to be linked and asserted active.</typeparam>
            <param name="linkAttributesName">Name of the link attributes.</param>
            <param name="joinType">Type of the join to perform.</param>
            <param name="anonymousTypeInitializer">An Anonymous Type Initializer where the properties of the anonymous
            type are the column names to add</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.TypedQueryExpression`1.AddLink``1(System.String,System.String)">
            <summary>
            Adds the type T as a linked entity to the query expression, additionally ensuring it is active.
            </summary>
            <typeparam name="T">The type of the entity that is to be linked and asserted active.</typeparam>
            <param name="linkFromAttributeName">Name of the link from attribute.</param>
            <param name="linkToAttributeName">Name of the link to attribute.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.TypedQueryExpression`1.AddLink``1(System.String,System.String,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Adds the type T as a linked entity to the query expression, additionally ensuring it is active.
            </summary>
            <typeparam name="T">The type of the entity that is to be linked and asserted active.</typeparam>
            <param name="linkFromAttributeName">Name of the link from attribute.</param>
            <param name="linkToAttributeName">Name of the link to attribute.</param>
            <param name="anonymousTypeInitializer">An Anonymous Type Initializer where the properties of the anonymous
            type are the column names to add</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.TypedQueryExpression`1.AddLink``1(System.String,System.String,Microsoft.Xrm.Sdk.Query.JoinOperator)">
            <summary>
            Adds the type T as a linked entity, additionally ensuring it is active.
            </summary>
            <typeparam name="T">The type of the entity that is to be linked and asserted active.</typeparam>
            <param name="linkFromAttributeName">Name of the link from attribute.</param>
            <param name="linkToAttributeName">Name of the link to attribute.</param>
            <param name="joinType">Type of the join to perform.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.TypedQueryExpression`1.AddLink``1(System.String,System.String,Microsoft.Xrm.Sdk.Query.JoinOperator,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Adds the type T as a linked entity, additionally ensuring it is active.
            </summary>
            <typeparam name="T">The type of the entity that is to be linked and asserted active.</typeparam>
            <param name="linkFromAttributeName">Name of the link from attribute.</param>
            <param name="linkToAttributeName">Name of the link to attribute.</param>
            <param name="joinType">Type of the join to perform.</param>
            <param name="anonymousTypeInitializer">An Anonymous Type Initializer where the properties of the anonymous
            type are the column names to add</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.TypedQueryExpression`1.ActiveOnly">
            <summary>
            Depending on the Type of T, adds the correct is active criteria Statement
            Note: Does not work for Linked Entities
            </summary>
        </member>
        <member name="M:DLaB.Xrm.TypedQueryExpression`1.First">
            <summary>
            Sets the Count and Page number of the query to return just the first entity.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.TypedQueryExpression`1.GetSqlStatement">
            <summary>
            Returns a SQL-ish representation of the QueryExpression's Criteria
            </summary>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.TypedQueryExpression`1.StateIs(System.Object)">
            <summary>
            Adds a Condition expression to the filter expression to force the statecode to be a specfic value.
            </summary>
            <param name="entityStateEnum">The entity state enum.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.TypedQueryExpression`1.Take(System.Int32)">
            <summary>
            Updates the Query Expression to only return only the first entity that matches the query expression expression criteria.
            Shortcut for setting the Query's PageInfo.Count and PageInfo.PageNumber to 1.
            </summary>
            <param name="count">The count of entities to restrict the result of the query to.</param>
        </member>
        <member name="M:DLaB.Xrm.TypedQueryExpression`1.WhereEqual(System.Object[])">
            <summary>
            Adds the column name and value pairs to the criteria of the given QueryExpression
            </summary>
            <param name="columnNameAndValuePairs">List of pairs that look like this:
            (string name of the column, value of the column) ie. "name", "John Doe" </param>
        </member>
        <member name="M:DLaB.Xrm.TypedQueryExpression`1.WhereIn(System.String,System.Object[])">
            <summary>
            Adds an In Condition to the QueryExpression Criteria
            </summary>
            <param name="columnName">The name of the column to perform the in against.</param>
            <param name="values">The list of values to search for being in the column name.</param>
        </member>
        <member name="T:DLaB.Xrm.Client.AppConfig">
            <summary>
            Single place for all config read settings to be performed
            </summary>
        </member>
        <member name="P:DLaB.Xrm.Client.AppConfig.ConnectionString">
            <summary>
            The Connection string used to access CRM
            </summary>
        </member>
        <member name="P:DLaB.Xrm.Client.AppConfig.ConnectionPrefix">
            <summary>
            The Connection Prefix to use to determine the Connection String to use to connect.
            </summary>
        </member>
        <member name="P:DLaB.Xrm.Client.AppConfig.DefaultLanguageCode">
            <summary>
            Gets or sets the default language code.
            </summary>
            <value>
            The default language code.
            </value>
        </member>
        <member name="P:DLaB.Xrm.Client.AppConfig.Password">
            <summary>
            Password for the Debug User Account
            </summary>
            <value>
            The debug user account password.
            </value>
        </member>
        <member name="T:DLaB.Xrm.Client.AppConfig.CrmEntities">
            <summary>
            CrmEntities Settings
            </summary>
        </member>
        <member name="P:DLaB.Xrm.Client.AppConfig.CrmEntities.ContextType">
            <summary>
            The type of the crm context definition.  This is used to determine the assembly of the early bound entities
            </summary>
            <value>
            The type of the context.
            </value>
        </member>
        <member name="P:DLaB.Xrm.Client.AppConfig.CrmEntities.ContainPrimaryAttributeName">
            <summary>
            Determines if the PrimaryNameViaFieldProvider is used (if true or not provided) or PrimaryNameViaNonStandardNamesProvider (if false)
            </summary>
        </member>
        <member name="P:DLaB.Xrm.Client.AppConfig.CrmEntities.PrimaryNameAttributeName">
            <summary>
            Ignored if EarlyBoundTypesContainPrimaryAttributeName is false
            </summary>
        </member>
        <member name="P:DLaB.Xrm.Client.AppConfig.CrmEntities.NonStandardAttributeNamesByEntity">
            <summary>
            Ignored if EarlyBoundTypesContainPrimaryAttributeName is true
            </summary>
        </member>
        <member name="P:DLaB.Xrm.Client.AppConfig.CrmEntities.NamelessEntities">
            <summary>
            List of Entities that do not have a primary name attribute, in addition to the known entities
            </summary>
        </member>
        <member name="P:DLaB.Xrm.Client.AppConfig.CrmEntities.Many2ManyAssociationDefinitions">
            <summary>
            {RelationshipSchemaName1}:{RelationshipEntityLogicalName1},{PrimaryEntityLogicalName1},{PrimaryEntityIdName1},{AssociatedEntityIdName1}
            |{RelationshipSchemaName2}:{RelationshipEntityLogicalName2},{PrimaryEntityLogicalName2},{PrimaryEntityIdName2},{AssociatedEntityIdName2}
            </summary>
        </member>
        <member name="T:DLaB.Xrm.Client.AppConfig.CrmSystemSettings">
            <summary>
            Settings for Crm System
            </summary>
        </member>
        <member name="P:DLaB.Xrm.Client.AppConfig.CrmSystemSettings.BusinessUnitId">
            <summary>
            The id to be used as the id oof top level Business Unit.
            </summary>
        </member>
        <member name="P:DLaB.Xrm.Client.AppConfig.CrmSystemSettings.FullNameFormat">
            <summary>
            Defines the full name format.  Defaults to F I L <para/>
            Format of FullName <para/>
              F = First Name <para/>
              M = Middle Name <para/>
              I = Middle Initial <para/>
              L = Last Name 
            </summary>
            <value>
            The full name format (always upper case).
            </value>
        </member>
        <member name="P:DLaB.Xrm.Client.AppConfig.CrmSystemSettings.OnBehalfOfId">
            <summary>
            The id to be used as the id of the current user.
            </summary>
        </member>
        <member name="P:DLaB.Xrm.Client.AppConfig.CrmSystemSettings.UserId">
            <summary>
            The id to be used as the id of the current user.
            </summary>
        </member>
        <member name="M:DLaB.Xrm.Client.AppConfig.GetValue``1(System.Nullable{``0}@,System.String,``0)">
            <summary>
            Helper method to default the field to the config value if it is null
            </summary>
            <typeparam name="T"></typeparam>
            <param name="field">The field.</param>
            <param name="configName">Name of the configuration.</param>
            <param name="default">The default.</param>
            <returns></returns>
        </member>
        <member name="T:DLaB.Xrm.Client.ClientSideOrganizationService">
            <summary>
            Implements IClientSideOrganizationService
            </summary>
        </member>
        <member name="P:DLaB.Xrm.Client.ClientSideOrganizationService.Service">
            <summary>
            Gets or sets the service.
            </summary>
            <value>
            The service.
            </value>
        </member>
        <member name="M:DLaB.Xrm.Client.ClientSideOrganizationService.#ctor(Microsoft.Xrm.Sdk.IOrganizationService)">
            <summary>
            Initializes a new instance of the <see cref="T:DLaB.Xrm.Client.ClientSideOrganizationService"/> class.
            </summary>
            <param name="service">The service.</param>
        </member>
        <member name="M:DLaB.Xrm.Client.ClientSideOrganizationService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DLaB.Xrm.Client.ClientSideOrganizationService"/> class.
            </summary>
        </member>
        <member name="M:DLaB.Xrm.Client.ClientSideOrganizationService.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DLaB.Xrm.Client.ClientSideOrganizationService"/> class.
            </summary>
            <param name="connectionString">The CRM organization Connection String.</param>
        </member>
        <member name="M:DLaB.Xrm.Client.ClientSideOrganizationService.Associate(System.String,System.Guid,Microsoft.Xrm.Sdk.Relationship,Microsoft.Xrm.Sdk.EntityReferenceCollection)">
            <summary>
            Creates a link between records.
            </summary>
            <param name="entityName">Name of the entity.</param>
            <param name="entityId">The entity identifier.</param>
            <param name="relationship">The relationship.</param>
            <param name="relatedEntities">The related entities.</param>
        </member>
        <member name="M:DLaB.Xrm.Client.ClientSideOrganizationService.Create(Microsoft.Xrm.Sdk.Entity)">
            <summary>
            Creates the specified entity.
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Client.ClientSideOrganizationService.Delete(System.String,System.Guid)">
            <summary>
            Deletes the specified entity.
            </summary>
            <param name="entityName">Name of the entity.</param>
            <param name="id">The identifier.</param>
        </member>
        <member name="M:DLaB.Xrm.Client.ClientSideOrganizationService.Disassociate(System.String,System.Guid,Microsoft.Xrm.Sdk.Relationship,Microsoft.Xrm.Sdk.EntityReferenceCollection)">
            <summary>
            Removes a link between records.
            </summary>
            <param name="entityName">Name of the entity.</param>
            <param name="entityId">The entity identifier.</param>
            <param name="relationship">The relationship.</param>
            <param name="relatedEntities">The related entities.</param>
        </member>
        <member name="M:DLaB.Xrm.Client.ClientSideOrganizationService.Execute(Microsoft.Xrm.Sdk.OrganizationRequest)">
            <summary>
            Executes the specified request.
            </summary>
            <param name="request">The request.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Client.ClientSideOrganizationService.Retrieve(System.String,System.Guid,Microsoft.Xrm.Sdk.Query.ColumnSet)">
            <summary>
            Retrieves the specified entity.
            </summary>
            <param name="entityName">Name of the entity.</param>
            <param name="id">The identifier.</param>
            <param name="columnSet">The column set.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Client.ClientSideOrganizationService.RetrieveMultiple(Microsoft.Xrm.Sdk.Query.QueryBase)">
            <summary>
            Retrieves the entities defined by the Query.
            </summary>
            <param name="query">The query.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Client.ClientSideOrganizationService.Update(Microsoft.Xrm.Sdk.Entity)">
            <summary>
            Updates the specified entity.
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:DLaB.Xrm.Client.ClientSideOrganizationService.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:DLaB.Xrm.Client.ClientSideOrganizationService.IsDisposed">
            <summary>
            Gets or sets a value indicating whether this instance is disposed.
            </summary>
            <value>
             <c>true</c> if this instance is disposed; otherwise, <c>false</c>.
            </value>
            <remarks>Default initialization for a bool is 'false'</remarks>
        </member>
        <member name="M:DLaB.Xrm.Client.ClientSideOrganizationService.Dispose(System.Boolean)">
            <summary>
            Overloaded Implementation of Dispose.
            </summary>
            <param name="isDisposing"><c>true</c> to release both managed and unmanaged resources; 
            <c>false</c> to release only unmanaged resources.</param>
            <remarks>
            <list type="bulleted">Dispose(bool isDisposing) executes in two distinct scenarios.
            <item>If <paramref name="isDisposing"/> equals true, the method has been called directly
            or indirectly by a user's code. Managed and unmanaged resources
            can be disposed.</item>
            <item>If <paramref name="isDisposing"/> equals <c>false</c>, the method has been called by the
            runtime from inside the finalizer and you should not reference
            other objects. Only unmanaged resources can be disposed.</item></list>
            </remarks>
        </member>
        <member name="M:DLaB.Xrm.Client.ClientSideOrganizationService.GetServiceUri">
            <summary>
            Gets the service URI.
            </summary>
            <returns></returns>
        </member>
        <member name="T:DLaB.Xrm.Client.CrmServiceUtility">
            <summary>
            Creates connections to CRM
            </summary>
        </member>
        <member name="M:DLaB.Xrm.Client.CrmServiceUtility.GetOrganizationService">
            <summary>
            Gets the organization service using the AppConfig
            </summary>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Client.CrmServiceUtility.GetOrganizationService(System.String)">
            <summary>
            Gets the organization service.
            </summary>
            <param name="connectionString">The ConnectionString to use.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Client.CrmServiceUtility.GetEarlyBoundProxyAssembly(System.Reflection.Assembly)">
            <summary>
            Gets the early bound proxy assembly.
            </summary>
            <param name="defaultAssembly">The default assembly.</param>
            <returns></returns>
        </member>
        <member name="T:DLaB.Xrm.Client.Extensions">
            <summary>
            Extension Class for Client Side Crm integrations
            </summary>
        </member>
        <member name="M:DLaB.Xrm.Client.Extensions.GetEntityType(Microsoft.Xrm.Sdk.Entity)">
            <summary>
            Gets the actual type of the entity as defined by the entity LogicalName, even if it is just an entity.
            ie: (new Entity(Contact.EntityLogicalName)).GetEntityType() == (new Contact()).GetType()
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Client.Extensions.GetOrganizationName(Microsoft.Xrm.Sdk.IOrganizationService)">
            <summary>
            Retrieves the Organization Name from the URL being used by the IOrganizationService.
            </summary>
            <param name="service"></param>
            <returns></returns>
            <remarks>This method will not support IFD</remarks>
        </member>
        <member name="M:DLaB.Xrm.Client.Extensions.GetServiceUri(Microsoft.Xrm.Sdk.IOrganizationService)">
            <summary>
            Assumes that this service is of type ServiceProxy&lt;IOrganizationService&gt; or IIOrganizationServiceWrapper
            </summary>
            <param name="service">The service.</param>
            <returns></returns>
        </member>
        <member name="T:DLaB.Xrm.Client.IClientSideOrganizationService">
            <summary>
            A Disposible service that allows for getting the Service Uri.
            </summary>
        </member>
        <member name="M:DLaB.Xrm.Client.IClientSideOrganizationService.GetServiceUri">
            <summary>
            Returns an Uri for the Organization Service
            </summary>
            <returns></returns>
        </member>
        <member name="T:DLaB.Xrm.Client.Many2ManyRelationshipDefinition">
            <summary>
            POCO for configuring the Many2ManyAssociationProvider
            </summary>
        </member>
        <member name="P:DLaB.Xrm.Client.Many2ManyRelationshipDefinition.PrimaryEntityType">
            <summary>
            The primary entity logical name.
            </summary>
        </member>
        <member name="P:DLaB.Xrm.Client.Many2ManyRelationshipDefinition.PrimaryEntityIdName">
            <summary>
            The attribute name of the primary entity on the relationship entity.
            </summary>
        </member>
        <member name="P:DLaB.Xrm.Client.Many2ManyRelationshipDefinition.AssociatedEntityIdName">
            <summary>
            The attribute name of the associated entity on the relationship entity
            </summary>
        </member>
        <member name="P:DLaB.Xrm.Client.Many2ManyRelationshipDefinition.AssociatedEntityType">
            <summary>
            The associated entity logical name
            </summary>
        </member>
        <member name="P:DLaB.Xrm.Client.Many2ManyRelationshipDefinition.AssociationLogicalName">
            <summary>
            The entity logical name of the N2N entity.
            </summary>
        </member>
        <member name="M:DLaB.Xrm.Client.Many2ManyRelationshipDefinition.Parse(System.Collections.Generic.List{System.String})">
            <summary>
            Expects format of {RelationshipEntityLogicalName},{PrimaryEntityLogicalName},{PrimaryEntityIdName},{AssociatedEntityIdType},{AssociatedEntityIdName}.
            </summary>
            <param name="parts">The parts.</param>
            <returns></returns>
        </member>
        <member name="F:DLaB.Xrm.LocalCrm.CrmExceptions.InvalidConditionValue">
            <summary>
            Error Codes for Invalid ConditionExpression Values
            </summary>
        </member>
        <member name="T:DLaB.Xrm.LocalCrm.DynamicQueryable">
            <summary>
            This should only be used for immediate window work.  If you have a list of entities, and you want to perform a LINQ query against it:
            e.g. inquiries.AsQueryable().Where("contactId.Id = {0}", contact.Id);
            This is taken from the C# Source Code Examples http://msdn.microsoft.com/en-US/vstudio/bb894665.aspx
            </summary>
        </member>
        <member name="T:DLaB.Xrm.LocalCrm.Extensions">
            <summary>
            Extension Methods for Local CRM
            </summary>
        </member>
        <member name="M:DLaB.Xrm.LocalCrm.Extensions.GetDateTimeValueFromDateOrString(Microsoft.Xrm.Sdk.Query.ConditionExpression,System.Int32)">
            <summary>
            Gets the Date value from Date or string.
            </summary>
            <param name="condition">The condition expression.</param>
            <param name="index">The index of the value in the condition Values collection.  Defaults to 0.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.LocalCrm.Extensions.GetIntValueFromIntOrString(Microsoft.Xrm.Sdk.Query.ConditionExpression,System.Int32)">
            <summary>
            Gets the int value from int or string.
            </summary>
            <param name="condition">The condition expression.</param>
            <param name="index">The index of the value in the condition Values collection.  Defaults to 0.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.LocalCrm.Extensions.GetQualifiedAttributeName(Microsoft.Xrm.Sdk.Query.ConditionExpression)">
            <summary>
            Gets the name of the qualified attribute.
            </summary>
            <param name="condition">The condition.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.LocalCrm.Extensions.RemoveMilliseconds(System.DateTime)">
            <summary>
            Removes the milliseconds from the date.  CRM doesn't store milliseconds, so this is used frequently when working with dates.
            </summary>
            <param name="date">The date.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.LocalCrm.Extensions.RemoveMilliseconds(System.Nullable{System.DateTime})">
            <summary>
            Removes the milliseconds from the date.  CRM doesn't store milliseconds, so this is used frequently when working with dates.
            </summary>
            <param name="date">The date.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.LocalCrm.Extensions.ContainsNullValue(Microsoft.Xrm.Sdk.Entity,System.String)">
            <summary>
            Checks if the entity contains the given attribute and it is null.
            </summary>
            <param name="entity"></param>
            <param name="attName"></param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.LocalCrm.Extensions.Clone(Microsoft.Xrm.Sdk.EntityReference)">
            <summary>
            Clones the entity reference
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.LocalCrm.Extensions.GetAllAttributes(DLaB.Xrm.LocalCrm.FetchXml.FetchType)">
            <summary>
            Returns all Attributes in the FetchType tree
            </summary>
            <param name="fe">The fe.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.LocalCrm.Extensions.Order``1(System.Linq.IOrderedEnumerable{``0},Microsoft.Xrm.Sdk.Query.OrderExpression)">
            <summary>
            Orders the entiities by the specified OrderExpressoin
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entities">The entities.</param>
            <param name="order">The order expression.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.LocalCrm.Extensions.GetLinkEntity(Microsoft.Xrm.Sdk.Query.LinkEntity,System.String)">
            <summary>
            Walks the whole LinkEntity Tree, returning the LinkedEntity with the specific alias, or null if not found.
            </summary>
            <param name="link"></param>
            <param name="alias"></param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.LocalCrm.Extensions.Order``1(System.Collections.Generic.List{``0},Microsoft.Xrm.Sdk.Query.OrderExpression)">
            <summary>
            Orders the entiities by the specified OrderExpressoin
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entities">The entities.</param>
            <param name="order">The order expression.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.LocalCrm.Extensions.GetLinkEntity(Microsoft.Xrm.Sdk.Query.QueryExpression,System.String)">
            <summary>
            Walks the whole QueryExpresion Tree, returning the LinkedEntity with the specific alias, or null if not found.
            </summary>
            <param name="qe"></param>
            <param name="alias"></param>
            <returns></returns>
        </member>
        <member name="T:DLaB.Xrm.LocalCrm.FetchXml.CountColumnAggregateInfo">
            <summary>
            Fetch Xml Class
            </summary>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.FetchXml.CountColumnAggregateInfo.Key">
            <summary>
            Gets or sets the key.
            </summary>
            <value>
            The key.
            </value>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.FetchXml.CountColumnAggregateInfo.Entity">
            <summary>
            Gets or sets the entity.
            </summary>
            <value>
            The entity.
            </value>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.FetchXml.CountColumnAggregateInfo.Count">
            <summary>
            Gets or sets the count.
            </summary>
            <value>
            The count.
            </value>
        </member>
        <member name="T:DLaB.Xrm.LocalCrm.FetchXml.FetchAttributeInfo">
            <summary>
            FetchXml Attribute Info
            </summary>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.FetchXml.FetchAttributeInfo.Attribute">
            <summary>
            Gets or sets the attribute.
            </summary>
            <value>
            The attribute.
            </value>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.FetchXml.FetchAttributeInfo.EntityLogicalName">
            <summary>
            Gets or sets the name of the entity logical.
            </summary>
            <value>
            The name of the entity logical.
            </value>
        </member>
        <member name="M:DLaB.Xrm.LocalCrm.FetchXml.FetchAttributeInfo.#ctor(System.String,DLaB.Xrm.LocalCrm.FetchXml.FetchAttributeType)">
            <summary>
            Initializes a new instance of the <see cref="T:DLaB.Xrm.LocalCrm.FetchXml.FetchAttributeInfo"/> class.
            </summary>
            <param name="entityLogicalName">Name of the entity logical.</param>
            <param name="attribute">The attribute.</param>
        </member>
        <member name="T:DLaB.Xrm.LocalCrm.FetchXml.condition">
            <remarks/>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.FetchXml.condition.Items">
            <remarks/>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.FetchXml.condition.column">
            <remarks/>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.FetchXml.condition.attribute">
            <remarks/>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.FetchXml.condition.entityname">
            <remarks/>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.FetchXml.condition.operator">
            <remarks/>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.FetchXml.condition.value">
            <remarks/>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.FetchXml.condition.aggregate">
            <remarks/>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.FetchXml.condition.aggregateSpecified">
            <remarks/>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.FetchXml.condition.rowaggregate">
            <remarks/>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.FetchXml.condition.rowaggregateSpecified">
            <remarks/>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.FetchXml.condition.alias">
            <remarks/>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.FetchXml.condition.uiname">
            <remarks/>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.FetchXml.condition.uitype">
            <remarks/>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.FetchXml.condition.uihidden">
            <remarks/>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.FetchXml.condition.uihiddenSpecified">
            <remarks/>
        </member>
        <member name="T:DLaB.Xrm.LocalCrm.FetchXml.conditionValue">
            <remarks/>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.FetchXml.conditionValue.uiname">
            <remarks/>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.FetchXml.conditionValue.uitype">
            <remarks/>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.FetchXml.conditionValue.Value">
            <remarks/>
        </member>
        <member name="T:DLaB.Xrm.LocalCrm.FetchXml.FieldXmlFieldUIType">
            <remarks/>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.FetchXml.FieldXmlFieldUIType.id">
            <remarks/>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.FetchXml.FieldXmlFieldUIType.description">
            <remarks/>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.FetchXml.FieldXmlFieldUIType.languagecode">
            <remarks/>
        </member>
        <member name="T:DLaB.Xrm.LocalCrm.FetchXml.SerializedTrueFalse01Type">
            <remarks/>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.FetchXml.SerializedTrueFalse01Type.name">
            <remarks/>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.FetchXml.SerializedTrueFalse01Type.Value">
            <remarks/>
        </member>
        <member name="T:DLaB.Xrm.LocalCrm.FetchXml.TrueFalse01Type">
            <remarks/>
        </member>
        <member name="F:DLaB.Xrm.LocalCrm.FetchXml.TrueFalse01Type.Item0">
            <remarks/>
        </member>
        <member name="F:DLaB.Xrm.LocalCrm.FetchXml.TrueFalse01Type.Item1">
            <remarks/>
        </member>
        <member name="T:DLaB.Xrm.LocalCrm.FetchXml.SerializedInteger">
            <remarks/>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.FetchXml.SerializedInteger.formattedvalue">
            <remarks/>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.FetchXml.SerializedInteger.Value">
            <remarks/>
        </member>
        <member name="T:DLaB.Xrm.LocalCrm.FetchXml.FetchLinkEntityType">
            <remarks/>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.FetchXml.FetchLinkEntityType.Items">
            <remarks/>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.FetchXml.FetchLinkEntityType.name">
            <remarks/>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.FetchXml.FetchLinkEntityType.to">
            <remarks/>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.FetchXml.FetchLinkEntityType.from">
            <remarks/>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.FetchXml.FetchLinkEntityType.alias">
            <remarks/>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.FetchXml.FetchLinkEntityType.linktype">
            <remarks/>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.FetchXml.FetchLinkEntityType.visible">
            <remarks/>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.FetchXml.FetchLinkEntityType.visibleSpecified">
            <remarks/>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.FetchXml.FetchLinkEntityType.intersect">
            <remarks/>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.FetchXml.FetchLinkEntityType.intersectSpecified">
            <remarks/>
        </member>
        <member name="T:DLaB.Xrm.LocalCrm.FetchXml.allattributes">
            <remarks/>
        </member>
        <member name="T:DLaB.Xrm.LocalCrm.FetchXml.FetchAttributeType">
            <remarks/>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.FetchXml.FetchAttributeType.name">
            <remarks/>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.FetchXml.FetchAttributeType.build">
            <remarks/>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.FetchXml.FetchAttributeType.buildSpecified">
            <remarks/>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.FetchXml.FetchAttributeType.addedby">
            <remarks/>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.FetchXml.FetchAttributeType.alias">
            <remarks/>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.FetchXml.FetchAttributeType.aggregate">
            <remarks/>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.FetchXml.FetchAttributeType.aggregateSpecified">
            <remarks/>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.FetchXml.FetchAttributeType.groupby">
            <remarks/>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.FetchXml.FetchAttributeType.groupbySpecified">
            <remarks/>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.FetchXml.FetchAttributeType.dategrouping">
            <remarks/>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.FetchXml.FetchAttributeType.dategroupingSpecified">
            <remarks/>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.FetchXml.FetchAttributeType.usertimezone">
            <remarks/>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.FetchXml.FetchAttributeType.usertimezoneSpecified">
            <remarks/>
        </member>
        <member name="T:DLaB.Xrm.LocalCrm.FetchXml.build">
            <remarks/>
        </member>
        <member name="F:DLaB.Xrm.LocalCrm.FetchXml.build.Item1504021">
            <remarks/>
        </member>
        <member name="F:DLaB.Xrm.LocalCrm.FetchXml.build.Item1003017">
            <remarks/>
        </member>
        <member name="T:DLaB.Xrm.LocalCrm.FetchXml.AggregateType">
            <remarks/>
        </member>
        <member name="F:DLaB.Xrm.LocalCrm.FetchXml.AggregateType.count">
            <remarks/>
        </member>
        <member name="F:DLaB.Xrm.LocalCrm.FetchXml.AggregateType.countcolumn">
            <remarks/>
        </member>
        <member name="F:DLaB.Xrm.LocalCrm.FetchXml.AggregateType.sum">
            <remarks/>
        </member>
        <member name="F:DLaB.Xrm.LocalCrm.FetchXml.AggregateType.avg">
            <remarks/>
        </member>
        <member name="F:DLaB.Xrm.LocalCrm.FetchXml.AggregateType.min">
            <remarks/>
        </member>
        <member name="F:DLaB.Xrm.LocalCrm.FetchXml.AggregateType.max">
            <remarks/>
        </member>
        <member name="T:DLaB.Xrm.LocalCrm.FetchXml.FetchBoolType">
            <remarks/>
        </member>
        <member name="F:DLaB.Xrm.LocalCrm.FetchXml.FetchBoolType.true">
            <remarks/>
        </member>
        <member name="F:DLaB.Xrm.LocalCrm.FetchXml.FetchBoolType.false">
            <remarks/>
        </member>
        <member name="F:DLaB.Xrm.LocalCrm.FetchXml.FetchBoolType.Item1">
            <remarks/>
        </member>
        <member name="F:DLaB.Xrm.LocalCrm.FetchXml.FetchBoolType.Item0">
            <remarks/>
        </member>
        <member name="T:DLaB.Xrm.LocalCrm.FetchXml.DateGroupingType">
            <remarks/>
        </member>
        <member name="F:DLaB.Xrm.LocalCrm.FetchXml.DateGroupingType.day">
            <remarks/>
        </member>
        <member name="F:DLaB.Xrm.LocalCrm.FetchXml.DateGroupingType.week">
            <remarks/>
        </member>
        <member name="F:DLaB.Xrm.LocalCrm.FetchXml.DateGroupingType.month">
            <remarks/>
        </member>
        <member name="F:DLaB.Xrm.LocalCrm.FetchXml.DateGroupingType.quarter">
            <remarks/>
        </member>
        <member name="F:DLaB.Xrm.LocalCrm.FetchXml.DateGroupingType.year">
            <remarks/>
        </member>
        <member name="F:DLaB.Xrm.LocalCrm.FetchXml.DateGroupingType.fiscalperiod">
            <remarks/>
        </member>
        <member name="F:DLaB.Xrm.LocalCrm.FetchXml.DateGroupingType.fiscalyear">
            <remarks/>
        </member>
        <member name="T:DLaB.Xrm.LocalCrm.FetchXml.filter">
            <remarks/>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.FetchXml.filter.Items">
            <remarks/>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.FetchXml.filter.type">
            <remarks/>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.FetchXml.filter.isquickfindfields">
            <remarks/>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.FetchXml.filter.isquickfindfieldsSpecified">
            <remarks/>
        </member>
        <member name="T:DLaB.Xrm.LocalCrm.FetchXml.filterType">
            <remarks/>
        </member>
        <member name="F:DLaB.Xrm.LocalCrm.FetchXml.filterType.and">
            <remarks/>
        </member>
        <member name="F:DLaB.Xrm.LocalCrm.FetchXml.filterType.or">
            <remarks/>
        </member>
        <member name="T:DLaB.Xrm.LocalCrm.FetchXml.FetchOrderType">
            <remarks/>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.FetchXml.FetchOrderType.Items">
            <remarks/>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.FetchXml.FetchOrderType.attribute">
            <remarks/>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.FetchXml.FetchOrderType.alias">
            <remarks/>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.FetchXml.FetchOrderType.descending">
            <remarks/>
        </member>
        <member name="T:DLaB.Xrm.LocalCrm.FetchXml.FetchEntityType">
            <remarks/>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.FetchXml.FetchEntityType.Items">
            <remarks/>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.FetchXml.FetchEntityType.name">
            <remarks/>
        </member>
        <member name="T:DLaB.Xrm.LocalCrm.FetchXml.operator">
            <remarks/>
        </member>
        <member name="F:DLaB.Xrm.LocalCrm.FetchXml.operator.eq">
            <remarks/>
        </member>
        <member name="F:DLaB.Xrm.LocalCrm.FetchXml.operator.neq">
            <remarks/>
        </member>
        <member name="F:DLaB.Xrm.LocalCrm.FetchXml.operator.ne">
            <remarks/>
        </member>
        <member name="F:DLaB.Xrm.LocalCrm.FetchXml.operator.gt">
            <remarks/>
        </member>
        <member name="F:DLaB.Xrm.LocalCrm.FetchXml.operator.ge">
            <remarks/>
        </member>
        <member name="F:DLaB.Xrm.LocalCrm.FetchXml.operator.le">
            <remarks/>
        </member>
        <member name="F:DLaB.Xrm.LocalCrm.FetchXml.operator.lt">
            <remarks/>
        </member>
        <member name="F:DLaB.Xrm.LocalCrm.FetchXml.operator.like">
            <remarks/>
        </member>
        <member name="F:DLaB.Xrm.LocalCrm.FetchXml.operator.notlike">
            <remarks/>
        </member>
        <member name="F:DLaB.Xrm.LocalCrm.FetchXml.operator.in">
            <remarks/>
        </member>
        <member name="F:DLaB.Xrm.LocalCrm.FetchXml.operator.notin">
            <remarks/>
        </member>
        <member name="F:DLaB.Xrm.LocalCrm.FetchXml.operator.between">
            <remarks/>
        </member>
        <member name="F:DLaB.Xrm.LocalCrm.FetchXml.operator.notbetween">
            <remarks/>
        </member>
        <member name="F:DLaB.Xrm.LocalCrm.FetchXml.operator.null">
            <remarks/>
        </member>
        <member name="F:DLaB.Xrm.LocalCrm.FetchXml.operator.notnull">
            <remarks/>
        </member>
        <member name="F:DLaB.Xrm.LocalCrm.FetchXml.operator.yesterday">
            <remarks/>
        </member>
        <member name="F:DLaB.Xrm.LocalCrm.FetchXml.operator.today">
            <remarks/>
        </member>
        <member name="F:DLaB.Xrm.LocalCrm.FetchXml.operator.tomorrow">
            <remarks/>
        </member>
        <member name="F:DLaB.Xrm.LocalCrm.FetchXml.operator.lastsevendays">
            <remarks/>
        </member>
        <member name="F:DLaB.Xrm.LocalCrm.FetchXml.operator.nextsevendays">
            <remarks/>
        </member>
        <member name="F:DLaB.Xrm.LocalCrm.FetchXml.operator.lastweek">
            <remarks/>
        </member>
        <member name="F:DLaB.Xrm.LocalCrm.FetchXml.operator.thisweek">
            <remarks/>
        </member>
        <member name="F:DLaB.Xrm.LocalCrm.FetchXml.operator.nextweek">
            <remarks/>
        </member>
        <member name="F:DLaB.Xrm.LocalCrm.FetchXml.operator.lastmonth">
            <remarks/>
        </member>
        <member name="F:DLaB.Xrm.LocalCrm.FetchXml.operator.thismonth">
            <remarks/>
        </member>
        <member name="F:DLaB.Xrm.LocalCrm.FetchXml.operator.nextmonth">
            <remarks/>
        </member>
        <member name="F:DLaB.Xrm.LocalCrm.FetchXml.operator.on">
            <remarks/>
        </member>
        <member name="F:DLaB.Xrm.LocalCrm.FetchXml.operator.onorbefore">
            <remarks/>
        </member>
        <member name="F:DLaB.Xrm.LocalCrm.FetchXml.operator.onorafter">
            <remarks/>
        </member>
        <member name="F:DLaB.Xrm.LocalCrm.FetchXml.operator.lastyear">
            <remarks/>
        </member>
        <member name="F:DLaB.Xrm.LocalCrm.FetchXml.operator.thisyear">
            <remarks/>
        </member>
        <member name="F:DLaB.Xrm.LocalCrm.FetchXml.operator.nextyear">
            <remarks/>
        </member>
        <member name="F:DLaB.Xrm.LocalCrm.FetchXml.operator.lastxhours">
            <remarks/>
        </member>
        <member name="F:DLaB.Xrm.LocalCrm.FetchXml.operator.nextxhours">
            <remarks/>
        </member>
        <member name="F:DLaB.Xrm.LocalCrm.FetchXml.operator.lastxdays">
            <remarks/>
        </member>
        <member name="F:DLaB.Xrm.LocalCrm.FetchXml.operator.nextxdays">
            <remarks/>
        </member>
        <member name="F:DLaB.Xrm.LocalCrm.FetchXml.operator.lastxweeks">
            <remarks/>
        </member>
        <member name="F:DLaB.Xrm.LocalCrm.FetchXml.operator.nextxweeks">
            <remarks/>
        </member>
        <member name="F:DLaB.Xrm.LocalCrm.FetchXml.operator.lastxmonths">
            <remarks/>
        </member>
        <member name="F:DLaB.Xrm.LocalCrm.FetchXml.operator.nextxmonths">
            <remarks/>
        </member>
        <member name="F:DLaB.Xrm.LocalCrm.FetchXml.operator.olderthanxmonths">
            <remarks/>
        </member>
        <member name="F:DLaB.Xrm.LocalCrm.FetchXml.operator.lastxyears">
            <remarks/>
        </member>
        <member name="F:DLaB.Xrm.LocalCrm.FetchXml.operator.nextxyears">
            <remarks/>
        </member>
        <member name="F:DLaB.Xrm.LocalCrm.FetchXml.operator.equserid">
            <remarks/>
        </member>
        <member name="F:DLaB.Xrm.LocalCrm.FetchXml.operator.neuserid">
            <remarks/>
        </member>
        <member name="F:DLaB.Xrm.LocalCrm.FetchXml.operator.equserteams">
            <remarks/>
        </member>
        <member name="F:DLaB.Xrm.LocalCrm.FetchXml.operator.equseroruserteams">
            <remarks/>
        </member>
        <member name="F:DLaB.Xrm.LocalCrm.FetchXml.operator.equseroruserhierarchy">
            <remarks/>
        </member>
        <member name="F:DLaB.Xrm.LocalCrm.FetchXml.operator.equseroruserhierarchyandteams">
            <remarks/>
        </member>
        <member name="F:DLaB.Xrm.LocalCrm.FetchXml.operator.eqbusinessid">
            <remarks/>
        </member>
        <member name="F:DLaB.Xrm.LocalCrm.FetchXml.operator.nebusinessid">
            <remarks/>
        </member>
        <member name="F:DLaB.Xrm.LocalCrm.FetchXml.operator.equserlanguage">
            <remarks/>
        </member>
        <member name="F:DLaB.Xrm.LocalCrm.FetchXml.operator.thisfiscalyear">
            <remarks/>
        </member>
        <member name="F:DLaB.Xrm.LocalCrm.FetchXml.operator.thisfiscalperiod">
            <remarks/>
        </member>
        <member name="F:DLaB.Xrm.LocalCrm.FetchXml.operator.nextfiscalyear">
            <remarks/>
        </member>
        <member name="F:DLaB.Xrm.LocalCrm.FetchXml.operator.nextfiscalperiod">
            <remarks/>
        </member>
        <member name="F:DLaB.Xrm.LocalCrm.FetchXml.operator.lastfiscalyear">
            <remarks/>
        </member>
        <member name="F:DLaB.Xrm.LocalCrm.FetchXml.operator.lastfiscalperiod">
            <remarks/>
        </member>
        <member name="F:DLaB.Xrm.LocalCrm.FetchXml.operator.lastxfiscalyears">
            <remarks/>
        </member>
        <member name="F:DLaB.Xrm.LocalCrm.FetchXml.operator.lastxfiscalperiods">
            <remarks/>
        </member>
        <member name="F:DLaB.Xrm.LocalCrm.FetchXml.operator.nextxfiscalyears">
            <remarks/>
        </member>
        <member name="F:DLaB.Xrm.LocalCrm.FetchXml.operator.nextxfiscalperiods">
            <remarks/>
        </member>
        <member name="F:DLaB.Xrm.LocalCrm.FetchXml.operator.infiscalyear">
            <remarks/>
        </member>
        <member name="F:DLaB.Xrm.LocalCrm.FetchXml.operator.infiscalperiod">
            <remarks/>
        </member>
        <member name="F:DLaB.Xrm.LocalCrm.FetchXml.operator.infiscalperiodandyear">
            <remarks/>
        </member>
        <member name="F:DLaB.Xrm.LocalCrm.FetchXml.operator.inorbeforefiscalperiodandyear">
            <remarks/>
        </member>
        <member name="F:DLaB.Xrm.LocalCrm.FetchXml.operator.inorafterfiscalperiodandyear">
            <remarks/>
        </member>
        <member name="F:DLaB.Xrm.LocalCrm.FetchXml.operator.beginswith">
            <remarks/>
        </member>
        <member name="F:DLaB.Xrm.LocalCrm.FetchXml.operator.notbeginwith">
            <remarks/>
        </member>
        <member name="F:DLaB.Xrm.LocalCrm.FetchXml.operator.endswith">
            <remarks/>
        </member>
        <member name="F:DLaB.Xrm.LocalCrm.FetchXml.operator.notendwith">
            <remarks/>
        </member>
        <member name="F:DLaB.Xrm.LocalCrm.FetchXml.operator.under">
            <remarks/>
        </member>
        <member name="F:DLaB.Xrm.LocalCrm.FetchXml.operator.eqorunder">
            <remarks/>
        </member>
        <member name="F:DLaB.Xrm.LocalCrm.FetchXml.operator.notunder">
            <remarks/>
        </member>
        <member name="F:DLaB.Xrm.LocalCrm.FetchXml.operator.above">
            <remarks/>
        </member>
        <member name="F:DLaB.Xrm.LocalCrm.FetchXml.operator.eqorabove">
            <remarks/>
        </member>
        <member name="T:DLaB.Xrm.LocalCrm.FetchXml.RowAggregateType">
            <remarks/>
        </member>
        <member name="F:DLaB.Xrm.LocalCrm.FetchXml.RowAggregateType.countchildren">
            <remarks/>
        </member>
        <member name="T:DLaB.Xrm.LocalCrm.FetchXml.FetchType">
            <remarks/>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.FetchXml.FetchType.Items">
            <remarks/>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.FetchXml.FetchType.version">
            <remarks/>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.FetchXml.FetchType.count">
            <remarks/>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.FetchXml.FetchType.page">
            <remarks/>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.FetchXml.FetchType.pagingcookie">
            <remarks/>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.FetchXml.FetchType.utcoffset">
            <remarks/>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.FetchXml.FetchType.aggregate">
            <remarks/>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.FetchXml.FetchType.aggregateSpecified">
            <remarks/>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.FetchXml.FetchType.distinct">
            <remarks/>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.FetchXml.FetchType.distinctSpecified">
            <remarks/>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.FetchXml.FetchType.top">
            <remarks/>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.FetchXml.FetchType.mapping">
            <remarks/>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.FetchXml.FetchType.mappingSpecified">
            <remarks/>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.FetchXml.FetchType.minactiverowversion">
            <remarks/>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.FetchXml.FetchType.outputformat">
            <remarks/>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.FetchXml.FetchType.outputformatSpecified">
            <remarks/>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.FetchXml.FetchType.returntotalrecordcount">
            <remarks/>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.FetchXml.FetchType.nolock">
            <remarks/>
        </member>
        <member name="T:DLaB.Xrm.LocalCrm.FetchXml.FetchTypeMapping">
            <remarks/>
        </member>
        <member name="F:DLaB.Xrm.LocalCrm.FetchXml.FetchTypeMapping.internal">
            <remarks/>
        </member>
        <member name="F:DLaB.Xrm.LocalCrm.FetchXml.FetchTypeMapping.logical">
            <remarks/>
        </member>
        <member name="T:DLaB.Xrm.LocalCrm.FetchXml.FetchTypeOutputformat">
            <remarks/>
        </member>
        <member name="F:DLaB.Xrm.LocalCrm.FetchXml.FetchTypeOutputformat.xmlado">
            <remarks/>
        </member>
        <member name="F:DLaB.Xrm.LocalCrm.FetchXml.FetchTypeOutputformat.xmlauto">
            <remarks/>
        </member>
        <member name="F:DLaB.Xrm.LocalCrm.FetchXml.FetchTypeOutputformat.xmlelements">
            <remarks/>
        </member>
        <member name="F:DLaB.Xrm.LocalCrm.FetchXml.FetchTypeOutputformat.xmlraw">
            <remarks/>
        </member>
        <member name="F:DLaB.Xrm.LocalCrm.FetchXml.FetchTypeOutputformat.xmlplatform">
            <remarks/>
        </member>
        <member name="T:DLaB.Xrm.LocalCrm.FetchXml.savedquery">
            <remarks/>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.FetchXml.savedquery.name">
            <remarks/>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.FetchXml.savedquery.savedqueryid">
            <remarks/>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.FetchXml.savedquery.returnedtypecode">
            <remarks/>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.FetchXml.savedquery.description">
            <remarks/>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.FetchXml.savedquery.querytype">
            <remarks/>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.FetchXml.savedquery.IsCustomizable">
            <remarks/>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.FetchXml.savedquery.CanBeDeleted">
            <remarks/>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.FetchXml.savedquery.IntroducedVersion">
            <remarks/>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.FetchXml.savedquery.isquickfindquery">
            <remarks/>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.FetchXml.savedquery.isuserdefined">
            <remarks/>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.FetchXml.savedquery.isdefault">
            <remarks/>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.FetchXml.savedquery.isprivate">
            <remarks/>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.FetchXml.savedquery.isprivateSpecified">
            <remarks/>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.FetchXml.savedquery.queryapi">
            <remarks/>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.FetchXml.savedquery.fetchxml">
            <remarks/>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.FetchXml.savedquery.columnsetxml">
            <remarks/>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.FetchXml.savedquery.layoutxml">
            <remarks/>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.FetchXml.savedquery.donotuseinLCID">
            <remarks/>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.FetchXml.savedquery.useinLCID">
            <remarks/>
        </member>
        <member name="T:DLaB.Xrm.LocalCrm.FetchXml.savedqueryFetchxml">
            <remarks/>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.FetchXml.savedqueryFetchxml.fetch">
            <remarks/>
        </member>
        <member name="T:DLaB.Xrm.LocalCrm.FetchXml.savedqueryColumnsetxml">
            <remarks/>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.FetchXml.savedqueryColumnsetxml.columnset">
            <remarks/>
        </member>
        <member name="T:DLaB.Xrm.LocalCrm.FetchXml.savedqueryColumnsetxmlColumnset">
            <remarks/>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.FetchXml.savedqueryColumnsetxmlColumnset.Items">
            <remarks/>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.FetchXml.savedqueryColumnsetxmlColumnset.ItemsElementName">
            <remarks/>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.FetchXml.savedqueryColumnsetxmlColumnset.version">
            <remarks/>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.FetchXml.savedqueryColumnsetxmlColumnset.distinct">
            <remarks/>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.FetchXml.savedqueryColumnsetxmlColumnset.distinctSpecified">
            <remarks/>
        </member>
        <member name="T:DLaB.Xrm.LocalCrm.FetchXml.savedqueryColumnsetxmlColumnsetColumn">
            <remarks/>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.FetchXml.savedqueryColumnsetxmlColumnsetColumn.build">
            <remarks/>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.FetchXml.savedqueryColumnsetxmlColumnsetColumn.buildSpecified">
            <remarks/>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.FetchXml.savedqueryColumnsetxmlColumnsetColumn.addedby">
            <remarks/>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.FetchXml.savedqueryColumnsetxmlColumnsetColumn.Value">
            <remarks/>
        </member>
        <member name="T:DLaB.Xrm.LocalCrm.FetchXml.savedqueryColumnsetxmlColumnsetFilter">
            <remarks/>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.FetchXml.savedqueryColumnsetxmlColumnsetFilter.condition">
            <remarks/>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.FetchXml.savedqueryColumnsetxmlColumnsetFilter.column">
            <remarks/>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.FetchXml.savedqueryColumnsetxmlColumnsetFilter.operator">
            <remarks/>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.FetchXml.savedqueryColumnsetxmlColumnsetFilter.operatorSpecified">
            <remarks/>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.FetchXml.savedqueryColumnsetxmlColumnsetFilter.value">
            <remarks/>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.FetchXml.savedqueryColumnsetxmlColumnsetFilter.type">
            <remarks/>
        </member>
        <member name="T:DLaB.Xrm.LocalCrm.FetchXml.savedqueryColumnsetxmlColumnsetFilterCondition">
            <remarks/>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.FetchXml.savedqueryColumnsetxmlColumnsetFilterCondition.column">
            <remarks/>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.FetchXml.savedqueryColumnsetxmlColumnsetFilterCondition.operator">
            <remarks/>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.FetchXml.savedqueryColumnsetxmlColumnsetFilterCondition.operatorSpecified">
            <remarks/>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.FetchXml.savedqueryColumnsetxmlColumnsetFilterCondition.value">
            <remarks/>
        </member>
        <member name="T:DLaB.Xrm.LocalCrm.FetchXml.ItemsChoiceType">
            <remarks/>
        </member>
        <member name="F:DLaB.Xrm.LocalCrm.FetchXml.ItemsChoiceType.ascend">
            <remarks/>
        </member>
        <member name="F:DLaB.Xrm.LocalCrm.FetchXml.ItemsChoiceType.column">
            <remarks/>
        </member>
        <member name="F:DLaB.Xrm.LocalCrm.FetchXml.ItemsChoiceType.descend">
            <remarks/>
        </member>
        <member name="F:DLaB.Xrm.LocalCrm.FetchXml.ItemsChoiceType.filter">
            <remarks/>
        </member>
        <member name="T:DLaB.Xrm.LocalCrm.FetchXml.savedqueryLayoutxml">
            <remarks/>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.FetchXml.savedqueryLayoutxml.grid">
            <remarks/>
        </member>
        <member name="T:DLaB.Xrm.LocalCrm.FetchXml.savedqueryLayoutxmlGrid">
            <remarks/>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.FetchXml.savedqueryLayoutxmlGrid.row">
            <remarks/>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.FetchXml.savedqueryLayoutxmlGrid.name">
            <remarks/>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.FetchXml.savedqueryLayoutxmlGrid.select">
            <remarks/>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.FetchXml.savedqueryLayoutxmlGrid.preview">
            <remarks/>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.FetchXml.savedqueryLayoutxmlGrid.icon">
            <remarks/>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.FetchXml.savedqueryLayoutxmlGrid.jump">
            <remarks/>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.FetchXml.savedqueryLayoutxmlGrid.object">
            <remarks/>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.FetchXml.savedqueryLayoutxmlGrid.disableInlineEditing">
            <remarks/>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.FetchXml.savedqueryLayoutxmlGrid.iconrenderer">
            <remarks/>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.FetchXml.savedqueryLayoutxmlGrid.multilinerows">
            <remarks/>
        </member>
        <member name="T:DLaB.Xrm.LocalCrm.FetchXml.savedqueryLayoutxmlGridRow">
            <remarks/>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.FetchXml.savedqueryLayoutxmlGridRow.cell">
            <remarks/>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.FetchXml.savedqueryLayoutxmlGridRow.name">
            <remarks/>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.FetchXml.savedqueryLayoutxmlGridRow.id">
            <remarks/>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.FetchXml.savedqueryLayoutxmlGridRow.multiobjectidfield">
            <remarks/>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.FetchXml.savedqueryLayoutxmlGridRow.layoutstyle">
            <remarks/>
        </member>
        <member name="T:DLaB.Xrm.LocalCrm.FetchXml.savedqueryLayoutxmlGridRowCell">
            <remarks/>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.FetchXml.savedqueryLayoutxmlGridRowCell.name">
            <remarks/>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.FetchXml.savedqueryLayoutxmlGridRowCell.width">
            <remarks/>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.FetchXml.savedqueryLayoutxmlGridRowCell.LabelId">
            <remarks/>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.FetchXml.savedqueryLayoutxmlGridRowCell.label">
            <remarks/>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.FetchXml.savedqueryLayoutxmlGridRowCell.desc">
            <remarks/>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.FetchXml.savedqueryLayoutxmlGridRowCell.ishidden">
            <remarks/>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.FetchXml.savedqueryLayoutxmlGridRowCell.disableSorting">
            <remarks/>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.FetchXml.savedqueryLayoutxmlGridRowCell.disableMetaDataBinding">
            <remarks/>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.FetchXml.savedqueryLayoutxmlGridRowCell.cellType">
            <remarks/>
        </member>
        <member name="T:DLaB.Xrm.LocalCrm.IMany2ManyAssociationProvider">
            <summary>
            Defines an Interface for a Many 2 Many Association provider.  This is needed to be able to correctly handle N2N Associations.
            </summary>
        </member>
        <member name="M:DLaB.Xrm.LocalCrm.IMany2ManyAssociationProvider.IsManyToManyRelationship(System.String)">
            <summary>
            Returns true of the relationship name is a many to many relationship
            </summary>
            <param name="relationshipName">The name of the relationship</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.LocalCrm.IMany2ManyAssociationProvider.IsManyToManyJoinEntity(System.String)">
            <summary>
            Returns true of the entity logical name is a many to many relationship entity.
            </summary>
            <param name="logicalName">The logicalName of the entity.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.LocalCrm.IMany2ManyAssociationProvider.CreateAssociation(Microsoft.Xrm.Sdk.IOrganizationService,System.String,System.Guid,Microsoft.Xrm.Sdk.Relationship,Microsoft.Xrm.Sdk.EntityReferenceCollection)">
            <summary>
            Creates the Association, returning the created ids
            </summary>
            <param name="service">The service.</param>
            <param name="entityName">Type: String. The logical name of the entity that is specified in the <paramref name="entityId" /> parameter.</param>
            <param name="entityId">Type: Guid. The Id of the record to which the related records are associated.</param>
            <param name="relationship">Type: <see cref="T:Microsoft.Xrm.Sdk.Relationship" />. The name of the relationship to be used to create the link.</param>
            <param name="relatedEntities">Type: <see cref="T:Microsoft.Xrm.Sdk.EntityReferenceCollection" />. A collection of entity references (references to records) to be associated.</param>
        </member>
        <member name="M:DLaB.Xrm.LocalCrm.IMany2ManyAssociationProvider.CreateAssociateRequest(Microsoft.Xrm.Sdk.Entity)">
            <summary>
            Creates the AssociationRequest request
            </summary>
            <param name="many2ManyEntity">Many to Many Entity.</param>
        </member>
        <member name="M:DLaB.Xrm.LocalCrm.IMany2ManyAssociationProvider.GetRelationshipNameForJoinEntity(System.String)">
            <summary>
            Gets the relationship name for the given N:N entity.
            </summary>
            <param name="logicalName">The N:N Entity.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.LocalCrm.IMany2ManyAssociationProvider.GetNotFoundErrorMessage">
            <summary>
            Error given if the relationship is not defined.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.LocalCrm.IMany2ManyAssociationProvider.RemoveAssociation(Microsoft.Xrm.Sdk.IOrganizationService,System.String,System.Guid,Microsoft.Xrm.Sdk.Relationship,Microsoft.Xrm.Sdk.EntityReferenceCollection)">
            <summary>
            Removes the Association
            </summary>
            <param name="service">The service.</param>
            <param name="entityName">Type: String. The logical name of the entity that is specified in the <paramref name="entityId" /> parameter.</param>
            <param name="entityId">Type: Guid. The Id of the record to which the related records are associated.</param>
            <param name="relationship">Type: <see cref="T:Microsoft.Xrm.Sdk.Relationship" />. The name of the relationship to be used to create the link.</param>
            <param name="relatedEntities">Type: <see cref="T:Microsoft.Xrm.Sdk.EntityReferenceCollection" />. A collection of entity references (references to records) to be associated.</param>
        </member>
        <member name="M:DLaB.Xrm.LocalCrm.IMany2ManyAssociationProvider.CreateDisassociateRequest(Microsoft.Xrm.Sdk.Entity)">
            <summary>
            Creates a DisassociateRequest request
            </summary>
            <param name="many2ManyEntity">Many to Many Entity.</param>
        </member>
        <member name="M:DLaB.Xrm.LocalCrm.LocalCrmDatabase.CreateActivityPointer``1(DLaB.Xrm.LocalCrm.LocalCrmDatabaseOrganizationService,``0)">
            <summary>
            Creates the activity pointer if the Entity is an Activity Type
            </summary>
            <typeparam name="T"></typeparam>
            <param name="service">The service.</param>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:DLaB.Xrm.LocalCrm.LocalCrmDatabase.PopulateAutoPopulatedAttributes``1(DLaB.Xrm.LocalCrm.LocalCrmDatabaseOrganizationService,``0,System.Boolean)">
            <summary>
            Populates the auto-populated columns of the entity and returns a list of attributes that were created / updated
            </summary>
        </member>
        <member name="M:DLaB.Xrm.LocalCrm.LocalCrmDatabase.AddValueIfNotPresent``1(Microsoft.Xrm.Sdk.Entity,DLaB.Xrm.LocalCrm.EntityProperties,System.String,``0)">
            <summary>
            Adds the value to the entity only if the attribute is valid for the entity, and the entity doesn't contain the value, or the value is null
            </summary>
        </member>
        <member name="M:DLaB.Xrm.LocalCrm.LocalCrmDatabase.ConditionallyAddValue``1(Microsoft.Xrm.Sdk.Entity,DLaB.Xrm.LocalCrm.EntityProperties,System.String,``0,System.Boolean)">
            <summary>
            Adds the value to the entity only if the attribute is valid for the entity, and the condition is true
            </summary>
        </member>
        <member name="M:DLaB.Xrm.LocalCrm.LocalCrmDatabase.SetAttributeId``1(``0)">
            <summary>
            Populate the Attribute Id Attribute.  This is required because creating a new Entity of type Entity, doesn't populate the Entity's Typed Id Attribute.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
        </member>
        <member name="M:DLaB.Xrm.LocalCrm.LocalCrmDatabase.RemoveEmptyPartsFromFormat(System.String,System.String,System.String,System.String)">
            <summary>
            If a part of the name is empty, it should have the spaces/punctuation removed.
            </summary>
            <param name="firstName"></param>
            <param name="middleName"></param>
            <param name="lastName"></param>
            <param name="fullNameFormat"></param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.LocalCrm.LocalCrmDatabase.UpdateFormat(System.String,System.String,System.Char)">
            <summary>
            Checks for white space names and removes whitespace from the format
            </summary>
            <param name="format">The format.</param>
            <param name="name">The name.</param>
            <param name="nameFormatLetter">The name format letter.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.LocalCrm.LocalCrmDatabase.AutoPopulateContactFields``1(``0,DLaB.Xrm.LocalCrm.EntityProperties)">
            <summary>
            AccountId/ParentContactId is auto-populated from the ParentCustomerId (
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity">The entity.</param>
            <param name="properties">The properties.</param>
        </member>
        <member name="M:DLaB.Xrm.LocalCrm.LocalCrmDatabase.AutoPopulateOpportunityFields``1(DLaB.Xrm.LocalCrm.LocalCrmDatabaseOrganizationService,``0,System.Boolean)">
            <summary>
            Contact and Account Ids are populated by the customer id property.  Handle hydrating values.
            </summary>
        </member>
        <member name="M:DLaB.Xrm.LocalCrm.LocalCrmDatabase.SetOwnerForCreate(DLaB.Xrm.LocalCrm.LocalCrmDatabaseOrganizationService,Microsoft.Xrm.Sdk.Entity,DLaB.Xrm.LocalCrm.EntityProperties)">
            <summary>
            Sets the owner to the Info.User if it is null.  Only to be called on Create.
            </summary>
        </member>
        <member name="M:DLaB.Xrm.LocalCrm.LocalCrmDatabase.ReadFetchXmlEntities``1(DLaB.Xrm.LocalCrm.LocalCrmDatabaseOrganizationService,DLaB.Xrm.LocalCrm.FetchXml.FetchType)">
            <summary>
            This is a hackish method but no time to improve...
            </summary>
            <typeparam name="T"></typeparam>
            <param name="service"></param>
            <param name="fe"></param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.LocalCrm.LocalCrmDatabase.SimulateCrmAttributeManipulations``1(``0)">
            <summary>
            Simulates the CRM attribute manipulations.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:DLaB.Xrm.LocalCrm.LocalCrmDatabase.SimulateCrmUpdateActionPrevention``1(DLaB.Xrm.LocalCrm.LocalCrmDatabaseOrganizationService,``0,DLaB.Xrm.LocalCrm.LocalCrmDatabase.DelayedException)">
            <summary>
            Simulates CRM update action preventions.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="service">The service.</param>
            <param name="entity">The entity.</param>
            <param name="exception">The exception.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.LocalCrm.LocalCrmDatabase.ConvertEntityArrayToEntityCollection``1(``0,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.Reflection.PropertyInfo}})">
            <summary>
            CRM will convert non typed arrays into an IEnumerable&lt;T&gt;.  Handle that conversion here
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity">The entity.</param>
            <param name="key">The key.</param>
            <param name="properties">The properties.</param>
        </member>
        <member name="M:DLaB.Xrm.LocalCrm.LocalCrmDatabase.TrimMillisecondsFromDateTimeFields``1(``0,System.String)">
            <summary>
            CRM doesn't include milliseconds when saving DateTime values
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity">The entity.</param>
            <param name="key">The key.</param>
        </member>
        <member name="M:DLaB.Xrm.LocalCrm.LocalCrmDatabase.EvaluateFilter``1(``0,Microsoft.Xrm.Sdk.Query.FilterExpression)">
            <summary>
            Returns true if the entity satisfies all of the constraints of the filter, otherwise, false.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.LocalCrm.LocalCrmDatabase.IsBetween``1(``0,Microsoft.Xrm.Sdk.Query.ConditionExpression,System.DateTime,System.DateTime,System.Boolean,System.Boolean)">
            <summary>
            Determines whether the condition specified entity is between.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity">The entity.</param>
            <param name="condition">The condition.</param>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <param name="inclusiveStart">if set to <c>true</c> [inclusive start].</param>
            <param name="inclusiveEnd">if set to <c>true</c> [inclusive end].</param>
            <returns></returns>
        </member>
        <member name="F:DLaB.Xrm.LocalCrm.LocalCrmDatabase.EntityRefNameExceptions">
            <summary>
            Attributes where the Name property of the Entity Reference is not populated
            </summary>
        </member>
        <member name="M:DLaB.Xrm.LocalCrm.GenericMethodCaller.ThrowInnerException(System.Reflection.TargetInvocationException)">
            <summary>
            Attempts to throw the inner exception of the TargetInvocationException
            </summary>
            <param name="ex"></param>
        </member>
        <member name="T:DLaB.Xrm.LocalCrm.IPrimaryNameProvider">
            <summary>
            Defines an Interface for a Primary Name provider.  This is needed to be able to default primary names of entity references.
            </summary>
        </member>
        <member name="M:DLaB.Xrm.LocalCrm.IPrimaryNameProvider.GetPrimaryName(System.String)">
            <summary>
            Returns the Primary Name for the given entity logical name
            </summary>
            <param name="logicalName"></param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.LocalCrm.IPrimaryNameProvider.GetPrimaryName``1">
            <summary>
            Returns the Primary Name for the given entity type
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:DLaB.Xrm.LocalCrm.LocalCrmDatabaseInfo">
            <summary>
            Info Object for setting a Local Crm Database 
            </summary>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.LocalCrmDatabaseInfo.BusinessUnit">
            <summary>
            Used to populate Owning Business Unit Attributes
            </summary>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.LocalCrmDatabaseInfo.DatabaseName">
            <summary>
            Defines the instance of the database.  Allows for sharing of the database from different call sites, if given the same name.
            </summary>
            <value>
            The name of the database.
            </value>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.LocalCrmDatabaseInfo.EarlyBoundEntityAssembly">
            <summary>
            The early bound entity assembly.
            </summary>
            <value>
            The early bound entity assembly.
            </value>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.LocalCrmDatabaseInfo.EarlyBoundNamespace">
            <summary>
            The early bound namespace.
            </summary>
            <value>
            The early bound namespace.
            </value>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.LocalCrmDatabaseInfo.FullNameFormat">
            <summary>
            Defines the full name format.  Defaults to F I L <para/>
            Format of FullName <para/>
              F = First Name <para/>
              M = Middle Name <para/>
              I = Middle Initial <para/>
              L = Last Name 
            </summary>
            <value>
            The full name format (always upper case).
            </value>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.LocalCrmDatabaseInfo.LanguageCode">
            <summary>
            Used for defining OptionMetadata
            </summary>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.LocalCrmDatabaseInfo.ManyToManyAssociationProvider">
            <summary>
            The ManyToManyAssociationProvider
            </summary>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.LocalCrmDatabaseInfo.PrimaryNameProvider">
            <summary>
            The PrimaryNameProvider
            </summary>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.LocalCrmDatabaseInfo.OrganizationId">
            <summary>
            The organization identifier.
            </summary>
            <value>
            The organization identifier.
            </value>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.LocalCrmDatabaseInfo.User">
            <summary>
            Used to populate Created/Modified By and Owner Attributes
            </summary>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.LocalCrmDatabaseInfo.UserOnBehalfOf">
            <summary>
            Used to populate Created/Modified On Behalf Of Attributes
            </summary>
        </member>
        <member name="M:DLaB.Xrm.LocalCrm.LocalCrmDatabaseInfo.Create``1(System.String,System.Nullable{System.Guid},System.Nullable{System.Guid},System.Nullable{System.Guid})">
            <summary>
            Creates the specified database info.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="databaseName">Name of the database.</param>
            <param name="userId">The user identifier.</param>
            <param name="userOnBehalfOf">The user on behalf of.</param>
            <param name="userBusinessUnit">The user business unit.</param>
            <returns></returns>
            <exception cref="T:System.Exception">Must pass in a derived type from Microsoft.Xrm.Sdk.Client.OrganizationServiceContext</exception>
        </member>
        <member name="M:DLaB.Xrm.LocalCrm.LocalCrmDatabaseInfo.Create(System.Reflection.Assembly,System.String,System.String,System.Nullable{System.Guid},System.Nullable{System.Guid},System.Nullable{System.Guid})">
            <summary>
            Creates the specified database info.
            </summary>
            <param name="earlyBoundAssembly">The early bound assembly.</param>
            <param name="earlyBoundNamespace">The early bound namespace.</param>
            <param name="databaseName">Name of the database.</param>
            <param name="userId">The user identifier.</param>
            <param name="userOnBehalfOf">The user on behalf of.</param>
            <param name="userBusinessUnit">The user business unit.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.LocalCrm.LocalCrmDatabaseInfo.Create``1(DLaB.Xrm.LocalCrm.LocalCrmDatabaseOptionalSettings)">
            <summary>
            Creates the specified database info.
            </summary>
            <param name="optionalSettings">The settings to be used.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.LocalCrm.LocalCrmDatabaseInfo.Create(System.Reflection.Assembly,System.String,DLaB.Xrm.LocalCrm.LocalCrmDatabaseOptionalSettings)">
            <summary>
            Creates the specified database info.
            </summary>
            <param name="earlyBoundAssembly">The early bound assembly.</param>
            <param name="earlyBoundNamespace">The early bound namespace.</param>
            <param name="optionalSettings">The settings to be used.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.LocalCrm.LocalCrmDatabaseInfo.IsTypeDefined(System.String)">
            <summary>
            Determines whether given entity name is defined in the early bound assembly
            </summary>
            <param name="entityLogicalName">Name of the entity logical.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.LocalCrm.LocalCrmDatabaseInfo.ConvertToGuid(System.String)">
            <summary>
            A hack-y method to convert a string into a Guid.  Splits the string up into 4 parts, gets the hashcode for each,
            then converts that directly into a Guid.  This at least ensures that the same OrganizationId is returned
            for the same database Name
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:DLaB.Xrm.LocalCrm.LocalCrmDatabaseOrganizationService">
            <summary>
            A ClientSide OrganizationService that connects to an in memory OrganizationService
            </summary>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.LocalCrmDatabaseOrganizationService.Info">
            <summary>
            Gets the Crm Database Info.
            </summary>
            <value>
            The information.
            </value>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.LocalCrmDatabaseOrganizationService.CurrentRequestName">
            <summary>
            Gets the name of the current request.
            </summary>
            <value>
            The name of the current request.
            </value>
        </member>
        <member name="M:DLaB.Xrm.LocalCrm.LocalCrmDatabaseOrganizationService.#ctor(DLaB.Xrm.LocalCrm.LocalCrmDatabaseInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:DLaB.Xrm.LocalCrm.LocalCrmDatabaseOrganizationService"/> class.
            </summary>
            <param name="info">The info object.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:DLaB.Xrm.LocalCrm.LocalCrmDatabaseOrganizationService.CreateRequiredEntitiesIfNeeded">
            <summary>
            Creates the current user and Business Unit entities if needed.
            </summary>
        </member>
        <member name="M:DLaB.Xrm.LocalCrm.LocalCrmDatabaseOrganizationService.CreateOrganizationService(DLaB.Xrm.LocalCrm.LocalCrmDatabaseInfo)">
            <summary>
            Creates the organization service.
            </summary>
            <param name="info">The information.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.LocalCrm.LocalCrmDatabaseOrganizationService.CreateOrganizationService``1">
            <summary>
            Creates the organization service.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.LocalCrm.LocalCrmDatabaseOrganizationService.Associate(System.String,System.Guid,Microsoft.Xrm.Sdk.Relationship,Microsoft.Xrm.Sdk.EntityReferenceCollection)">
            <summary>
            Associates the specified entity name.
            </summary>
            <param name="entityName">Name of the entity.</param>
            <param name="entityId">The entity identifier.</param>
            <param name="relationship">The relationship.</param>
            <param name="relatedEntities">The related entities.</param>
        </member>
        <member name="M:DLaB.Xrm.LocalCrm.LocalCrmDatabaseOrganizationService.Create(Microsoft.Xrm.Sdk.Entity)">
            <summary>
            Creates the specified entity.
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.LocalCrm.LocalCrmDatabaseOrganizationService.Delete(System.String,System.Guid)">
            <summary>
            Deletes the specified entity name.
            </summary>
            <param name="entityName">Name of the entity.</param>
            <param name="id">The identifier.</param>
        </member>
        <member name="M:DLaB.Xrm.LocalCrm.LocalCrmDatabaseOrganizationService.Disassociate(System.String,System.Guid,Microsoft.Xrm.Sdk.Relationship,Microsoft.Xrm.Sdk.EntityReferenceCollection)">
            <summary>
            Disassociates the entities.
            </summary>
            <param name="entityName">Name of the entity.</param>
            <param name="entityId">The entity identifier.</param>
            <param name="relationship">The relationship.</param>
            <param name="relatedEntities">The related entities.</param>
        </member>
        <member name="M:DLaB.Xrm.LocalCrm.LocalCrmDatabaseOrganizationService.Execute(Microsoft.Xrm.Sdk.OrganizationRequest)">
            <summary>
            Executes the specified request.
            </summary>
            <param name="request">The request.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.LocalCrm.LocalCrmDatabaseOrganizationService.Retrieve(System.String,System.Guid,Microsoft.Xrm.Sdk.Query.ColumnSet)">
            <summary>
            Retrieves the specified entity.
            </summary>
            <param name="entityName">Name of the entity.</param>
            <param name="id">The identifier.</param>
            <param name="columnSet">The column set.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.LocalCrm.LocalCrmDatabaseOrganizationService.RetrieveMultiple(Microsoft.Xrm.Sdk.Query.QueryBase)">
            <summary>
            Retrieves the entities defined by the query.
            </summary>
            <param name="query">The query.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.LocalCrm.LocalCrmDatabaseOrganizationService.Update(Microsoft.Xrm.Sdk.Entity)">
            <summary>
            Updates the entity.
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:DLaB.Xrm.LocalCrm.LocalCrmDatabaseOrganizationService.GetType(System.String)">
            <summary>
            Gets the type of the Entity.
            </summary>
            <param name="logicalName">Name of the logical.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.LocalCrm.LocalCrmDatabaseOrganizationService.RemoveFieldsCrmDoesNotReturn``1(``0)">
            <summary>
            Removes Any fields that CRM no longer returns the the client
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.LocalCrmDatabaseOrganizationService.Service">
            <summary>
            Gets or sets the service.
            </summary>
            <value>
            The service.
            </value>
        </member>
        <member name="M:DLaB.Xrm.LocalCrm.LocalCrmDatabaseOrganizationService.GetServiceUri">
            <summary>
            Gets the service URI.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.LocalCrm.LocalCrmDatabaseOrganizationService.Dispose">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
        </member>
        <member name="M:DLaB.Xrm.LocalCrm.LocalCrmDatabaseOrganizationService.ExecuteInternal(Microsoft.Xrm.Sdk.OrganizationRequest)">
            <summary>
            Fail safe method.  Execute type not implemented, throw exception
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.LocalCrm.LocalCrmDatabaseOrganizationService.ExecuteInternal(Microsoft.Crm.Sdk.Messages.InitializeFromRequest)">
            <summary>
            Auto Map all values that are the same and properties that are of the same type as the Source Entity
            </summary>
            <param name="request">The request.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.LocalCrm.LocalCrmDatabaseOrganizationService.InitializeFromLogic.GetPropertiesByAttributeWithMatchingRelationships(System.Type,System.String,System.Collections.Generic.Dictionary{System.String,System.Reflection.PropertyInfo}@,System.Collections.Generic.List{System.String}@)">
            <summary>
            Gets the properties by attribute and relationship attributes where the referencing type is of the matching relationship entity.
            </summary>
            <param name="type">Type of the entity to lookup that properties of.</param>
            <param name="matchingRelationshipEntityLogicalName">Name of the matching relationship entity logical.</param>
            <param name="propertiesByAttribute">The properties by attribute.</param>
            <param name="relationshipProperties">The relationship properties.</param>
        </member>
        <member name="M:DLaB.Xrm.LocalCrm.LocalCrmDatabaseOrganizationService.InitializeFromLogic.GetAttributeNameMatching(System.String,System.Collections.Generic.Dictionary{System.String,System.Reflection.PropertyInfo},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}})">
            <summary>
            Gets the attribute name matching.
            Order is determined by
                where the            source matches the            destination, then
                where the prefixless source matches the            destination, then
                where the            source matches the prefixless destination, then
                where the prefixless source matches the prefixless destination
            </summary>
            <param name="sourceKey">The source key.</param>
            <param name="propertiesByAttribute">The properties by attribute.</param>
            <param name="prefixlessKeys">The prefixless keys.</param>
            <returns></returns>
        </member>
        <member name="T:DLaB.Xrm.LocalCrm.LocalCrmDatabaseOptionalSettings">
            <summary>
            Defines the optional settings for the local crm database
            </summary>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.LocalCrmDatabaseOptionalSettings.BusinessUnitId">
            <summary>
            Used to populate Owning Business Unit Attributes
            </summary>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.LocalCrmDatabaseOptionalSettings.DatabaseName">
            <summary>
            Defines the instance of the database.  Allows for sharing of the database from different call sites, if given the same name.
            </summary>
            <value>
            The name of the database.
            </value>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.LocalCrmDatabaseOptionalSettings.FullNameFormat">
            <summary>
            Defines the full name format.  Defaults to F I L <para/>
            Format of FullName <para/>
              F = First Name <para/>
              M = Middle Name <para/>
              I = Middle Initial <para/>
              L = Last Name 
            </summary>
            <value>
            The full name format (always upper case).
            </value>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.LocalCrmDatabaseOptionalSettings.LanguageCode">
            <summary>
            Used for defining OptionMetadata
            </summary>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.LocalCrmDatabaseOptionalSettings.ManyToManyAssociationProvider">
            <summary>
            The ManyToManyAssociationProvider
            </summary>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.LocalCrmDatabaseOptionalSettings.PrimaryNameProvider">
            <summary>
            The PrimaryNameProvider
            </summary>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.LocalCrmDatabaseOptionalSettings.Many2ManyAssociationProvider">
            <summary>
            The Many2ManyAssociationProvider
            </summary>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.LocalCrmDatabaseOptionalSettings.OrganizationId">
            <summary>
            The organization identifier.
            </summary>
            <value>
            The organization identifier.
            </value>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.LocalCrmDatabaseOptionalSettings.UserId">
            <summary>
            Used to populate Created/Modified By and Owner Attributes
            </summary>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.LocalCrmDatabaseOptionalSettings.UserOnBehalfOfId">
            <summary>
            Used to populate Created/Modified On Behalf Of Attributes
            </summary>
        </member>
        <member name="T:DLaB.Xrm.LocalCrm.Many2ManyAssociationProvider">
            <summary>
            IMany2ManyAssociationProvider Implementation
            </summary>
        </member>
        <member name="M:DLaB.Xrm.LocalCrm.Many2ManyAssociationProvider.#ctor(System.Collections.Generic.Dictionary{System.String,DLaB.Xrm.Client.Many2ManyRelationshipDefinition})">
            <summary>
            Constructor
            </summary>
            <param name="definitions"></param>
        </member>
        <member name="M:DLaB.Xrm.LocalCrm.Many2ManyAssociationProvider.IsManyToManyRelationship(System.String)">
            <summary>
            Returns true of the relationship name is a many to many relationship
            </summary>
            <param name="relationshipName">The name of the relationship</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.LocalCrm.Many2ManyAssociationProvider.IsManyToManyJoinEntity(System.String)">
            <summary>
            Returns true of the entity logical name is a many to many relationship entity.
            </summary>
            <param name="logicalName">The logicalName of the entity.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.LocalCrm.Many2ManyAssociationProvider.GetRelationshipNameForJoinEntity(System.String)">
            <summary>
            Gets the relationship name for the given N:N entity.
            </summary>
            <param name="logicalName">The N:N Entity.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.LocalCrm.Many2ManyAssociationProvider.CreateAssociation(Microsoft.Xrm.Sdk.IOrganizationService,System.String,System.Guid,Microsoft.Xrm.Sdk.Relationship,Microsoft.Xrm.Sdk.EntityReferenceCollection)">
            <summary>
            Creates the Association
            </summary>
            <param name="service">The service.</param>
            <param name="entityName">Type: String. The logical name of the entity that is specified in the <paramref name="entityId" /> parameter.</param>
            <param name="entityId">Type: Guid. The Id of the record to which the related records are associated.</param>
            <param name="relationship">Type: <see cref="T:Microsoft.Xrm.Sdk.Relationship" />. The name of the relationship to be used to create the link.</param>
            <param name="relatedEntities">Type: <see cref="T:Microsoft.Xrm.Sdk.EntityReferenceCollection" />. A collection of entity references (references to records) to be associated.</param>
        </member>
        <member name="M:DLaB.Xrm.LocalCrm.Many2ManyAssociationProvider.CreateAssociateRequest(Microsoft.Xrm.Sdk.Entity)">
            <summary>
            Creates the Association Request
            </summary>
            <param name="many2ManyEntity">Many to Many Entity.</param>
        </member>
        <member name="M:DLaB.Xrm.LocalCrm.Many2ManyAssociationProvider.GetNotFoundErrorMessage">
            <summary>
            Error given if the relationship is not defined.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.LocalCrm.Many2ManyAssociationProvider.RemoveAssociation(Microsoft.Xrm.Sdk.IOrganizationService,System.String,System.Guid,Microsoft.Xrm.Sdk.Relationship,Microsoft.Xrm.Sdk.EntityReferenceCollection)">
            <summary>
            Removes the Association
            </summary>
            <param name="service">The service.</param>
            <param name="entityName">Type: String. The logical name of the entity that is specified in the <paramref name="entityId" /> parameter.</param>
            <param name="entityId">Type: Guid. The Id of the record to which the related records are associated.</param>
            <param name="relationship">Type: <see cref="T:Microsoft.Xrm.Sdk.Relationship" />. The name of the relationship to be used to create the link.</param>
            <param name="relatedEntities">Type: <see cref="T:Microsoft.Xrm.Sdk.EntityReferenceCollection" />. A collection of entity references (references to records) to be associated.</param>
        </member>
        <member name="M:DLaB.Xrm.LocalCrm.Many2ManyAssociationProvider.CreateDisassociateRequest(Microsoft.Xrm.Sdk.Entity)">
            <summary>
            Removes the Association
            </summary>
            <param name="many2ManyEntity">Many to Many Entity.</param>
        </member>
        <member name="T:DLaB.Xrm.LocalCrm.PrimaryNameFieldProviderBase">
            <summary>
            Base class for implementing
            </summary>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.PrimaryNameFieldProviderBase.NamelessEntities">
            <summary>
            Some OOB entities do not contain a primary name.  Why?  No idea.
            </summary>
        </member>
        <member name="M:DLaB.Xrm.LocalCrm.PrimaryNameFieldProviderBase.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:DLaB.Xrm.LocalCrm.PrimaryNameFieldProviderBase.GetConfiguredProvider(System.Reflection.Assembly,System.String)">
            <summary>
            Logic to return the specific provider based off of Assembly/Namespace
            </summary>
            <param name="assembly"></param>
            <param name="namespace"></param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.LocalCrm.PrimaryNameFieldProviderBase.GetPrimaryName(System.String)">
            <summary>
            Returns the Primary Name for the given entity logical name
            </summary>
            <param name="logicalName"></param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.LocalCrm.PrimaryNameFieldProviderBase.GetPrimaryName``1">
            <summary>
            Returns the Primary Name for the given entity type
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:DLaB.Xrm.LocalCrm.PrimaryNameViaFieldProvider">
            <summary>
            Assumes the Early bound entity has a primary name property to determine the name to retrieve
            </summary>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.PrimaryNameViaFieldProvider.EarlyBoundEntityAssembly">
            <summary>
            Assembly of early bound entities
            </summary>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.PrimaryNameViaFieldProvider.EarlyBoundNamespace">
            <summary>
            Namespace of early bound entities
            </summary>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.PrimaryNameViaFieldProvider.PrimaryNameFieldName">
            <summary>
            Field name containing the primary attribute.  Defaults to the System.
            </summary>
        </member>
        <member name="M:DLaB.Xrm.LocalCrm.PrimaryNameViaFieldProvider.#ctor(System.Reflection.Assembly,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="earlyBoundEntityAssembly">Assembly of early bound entities</param>
            <param name="earlyBoundNamespace">Namespace of early bound entities</param>
        </member>
        <member name="M:DLaB.Xrm.LocalCrm.PrimaryNameViaFieldProvider.GetPrimaryName(System.String)">
            <summary>
            Returns the Primary Name for the given entity logical name
            </summary>
            <param name="logicalName"></param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.LocalCrm.PrimaryNameViaFieldProvider.GetPrimaryName``1">
            <summary>
            Returns the Primary Name for the given entity logical name
            </summary>
            <returns></returns>
        </member>
        <member name="T:DLaB.Xrm.LocalCrm.PrimaryNameViaNonStandardNamesProvider">
            <summary>
            Utilizes a Non Standard Names Dictionary to determine the primary name of entities
            </summary>
        </member>
        <member name="P:DLaB.Xrm.LocalCrm.PrimaryNameViaNonStandardNamesProvider.NonStandardNames">
            <summary>
            Non standard primary name attribute names by entity logical name.
            </summary>
        </member>
        <member name="M:DLaB.Xrm.LocalCrm.PrimaryNameViaNonStandardNamesProvider.#ctor(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Constructor
            </summary>
            <param name="nonStandardNames">Non standard primary name attribute names by entity logical name.</param>
        </member>
        <member name="M:DLaB.Xrm.LocalCrm.PrimaryNameViaNonStandardNamesProvider.GetPrimaryName(System.String)">
            <summary>
            Returns the Primary Name for the given entity logical name
            </summary>
            <param name="logicalName"></param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.LocalCrm.PrimaryNameViaNonStandardNamesProvider.GetPrimaryName``1">
            <summary>
            Returns the Primary Name for the given entity type
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:DLaB.Xrm.Test.AppConfig">
            <summary>
            Defines all the potential App.Config Values
            </summary>
        </member>
        <member name="P:DLaB.Xrm.Test.AppConfig.OrgName">
            <summary>
            The name of the Org of CRM you are connecting to.
            </summary>
            <value>
            The name of the org.
            </value>
        </member>
        <member name="P:DLaB.Xrm.Test.AppConfig.UseLocalCrmDatabase">
            <summary>
            Controls if TestBase.GetOrganizationService returns a connection to an actual CRM, or if it returns a connection to an "In Memory" CRM.    
            </summary>
            <value>
            The use local CRM database.
            </value>
        </member>
        <member name="T:DLaB.Xrm.Test.AssertCrm">
            <summary>
            CRM Assertion helper class.
            </summary>
        </member>
        <member name="M:DLaB.Xrm.Test.AssertCrm.#ctor(Microsoft.Xrm.Sdk.IOrganizationService)">
            <summary>
            Initializes a new instance of the <see cref="T:DLaB.Xrm.Test.AssertCrm"/> class.
            </summary>
            <param name="service">The service.</param>
        </member>
        <member name="M:DLaB.Xrm.Test.AssertCrm.Exists(Microsoft.Xrm.Sdk.Entity,System.String,System.Object[])">
            <summary>
            Asserts that the entity exists in Crm.
            </summary>
            <param name="entity">The entity.</param>
            <param name="message">The message.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:DLaB.Xrm.Test.AssertCrm.Exists(Microsoft.Xrm.Sdk.IOrganizationService,Microsoft.Xrm.Sdk.Entity,System.String,System.Object[])">
            <summary>
            Asserts that the entity exists in Crm.
            </summary>
            <param name="service">The service.</param>
            <param name="entity">The entity.</param>
            <param name="message">The message.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:DLaB.Xrm.Test.AssertCrm.Exists(Microsoft.Xrm.Sdk.EntityReference,System.String,System.Object[])">
            <summary>
            Asserts that the entity exists in Crm.
            </summary>
            <param name="entityReference">The entity reference.</param>
            <param name="message">The message.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:DLaB.Xrm.Test.AssertCrm.Exists(Microsoft.Xrm.Sdk.IOrganizationService,Microsoft.Xrm.Sdk.EntityReference,System.String,System.Object[])">
            <summary>
            Asserts that the entity exists in Crm.
            </summary>
            <param name="service">The service.</param>
            <param name="entityReference">The entity reference.</param>
            <param name="message">The message.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:DLaB.Xrm.Test.AssertCrm.Exists(DLaB.Xrm.Test.Id,System.String,System.Object[])">
            <summary>
            Asserts that the entity exists in Crm.
            </summary>
            <param name="entity">The entity.</param>
            <param name="message">The message.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:DLaB.Xrm.Test.AssertCrm.Exists(Microsoft.Xrm.Sdk.IOrganizationService,DLaB.Xrm.Test.Id,System.String,System.Object[])">
            <summary>
            Asserts that the entity exists in Crm.
            </summary>
            <param name="service">The service.</param>
            <param name="entity">The entity.</param>
            <param name="message">The message.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:DLaB.Xrm.Test.AssertCrm.Exists``1(DLaB.Xrm.Test.Id{``0},System.String,System.Object[])">
            <summary>
            Asserts that the entity exists in Crm.
            </summary>
            <param name="entity">The entity.</param>
            <param name="message">The message.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:DLaB.Xrm.Test.AssertCrm.Exists``1(Microsoft.Xrm.Sdk.IOrganizationService,DLaB.Xrm.Test.Id{``0},System.String,System.Object[])">
            <summary>
            Asserts that the entity exists in Crm.
            </summary>
            <param name="service">The service.</param>
            <param name="entity">The entity.</param>
            <param name="message">The message.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:DLaB.Xrm.Test.AssertCrm.IsActive``1(``0,System.String,System.Object[])">
            <summary>
            Asserts whether the specified entity is active.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity">The entity.</param>
            <param name="message">The message.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:DLaB.Xrm.Test.AssertCrm.IsActive``1(Microsoft.Xrm.Sdk.IOrganizationService,``0,System.String,System.Object[])">
            <summary>
            Asserts that the specified entity is active.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="service">The service.</param>
            <param name="entity">The entity.</param>
            <param name="message">The message.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:DLaB.Xrm.Test.AssertCrm.IsActive``1(System.Guid,System.String,System.Object[])">
            <summary>
            Asserts that the specified entity is active.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="id">The identifier.</param>
            <param name="message">The message.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:DLaB.Xrm.Test.AssertCrm.IsActive``1(Microsoft.Xrm.Sdk.IOrganizationService,System.Guid,System.String,System.Object[])">
            <summary>
            Asserts that the specified entity is active.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="service">The service.</param>
            <param name="id">The identifier.</param>
            <param name="message">The message.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:DLaB.Xrm.Test.AssertCrm.IsActive``1(DLaB.Xrm.Test.Id,System.String,System.Object[])">
            <summary>
            Asserts that the specified entity is active.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="id">The identifier.</param>
            <param name="message">The message.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:DLaB.Xrm.Test.AssertCrm.IsActive``1(Microsoft.Xrm.Sdk.IOrganizationService,DLaB.Xrm.Test.Id,System.String,System.Object[])">
            <summary>
            Asserts that the specified entity is active.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="service">The service.</param>
            <param name="id">The identifier.</param>
            <param name="message">The message.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:DLaB.Xrm.Test.AssertCrm.IsActive``1(DLaB.Xrm.Test.Id{``0},System.String,System.Object[])">
            <summary>
            Asserts that the specified entity is active.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="id">The identifier.</param>
            <param name="message">The message.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:DLaB.Xrm.Test.AssertCrm.IsActive``1(Microsoft.Xrm.Sdk.IOrganizationService,DLaB.Xrm.Test.Id{``0},System.String,System.Object[])">
            <summary>
            Asserts that the specified entity is active.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="service">The service.</param>
            <param name="id">The identifier.</param>
            <param name="message">The message.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:DLaB.Xrm.Test.AssertCrm.IsNotActive``1(``0,System.String,System.Object[])">
            <summary>
            Asserts that the specified entity is not active.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity">The entity.</param>
            <param name="message">The message.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:DLaB.Xrm.Test.AssertCrm.IsNotActive``1(Microsoft.Xrm.Sdk.IOrganizationService,``0,System.String,System.Object[])">
            <summary>
            Asserts that the specified entity is not active.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="service">The service.</param>
            <param name="entity">The entity.</param>
            <param name="message">The message.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:DLaB.Xrm.Test.AssertCrm.IsNotActive``1(System.Guid,System.String,System.Object[])">
            <summary>
            Asserts that the specified entity is not active.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="id">The identifier.</param>
            <param name="message">The message.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:DLaB.Xrm.Test.AssertCrm.IsNotActive``1(Microsoft.Xrm.Sdk.IOrganizationService,System.Guid,System.String,System.Object[])">
            <summary>
            Asserts that the specified entity is not active.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="service">The service.</param>
            <param name="id">The identifier.</param>
            <param name="message">The message.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:DLaB.Xrm.Test.AssertCrm.IsNotActive``1(DLaB.Xrm.Test.Id,System.String,System.Object[])">
            <summary>
            Asserts that the specified entity is not active.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="id">The id.</param>
            <param name="message">The message.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:DLaB.Xrm.Test.AssertCrm.IsNotActive``1(Microsoft.Xrm.Sdk.IOrganizationService,DLaB.Xrm.Test.Id,System.String,System.Object[])">
            <summary>
            Asserts that the specified entity is not active.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="service">The service.</param>
            <param name="id">The id.</param>
            <param name="message">The message.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:DLaB.Xrm.Test.AssertCrm.IsNotActive``1(DLaB.Xrm.Test.Id{``0},System.String,System.Object[])">
            <summary>
            Asserts that the specified entity is not active.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="id">The id.</param>
            <param name="message">The message.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:DLaB.Xrm.Test.AssertCrm.IsNotActive``1(Microsoft.Xrm.Sdk.IOrganizationService,DLaB.Xrm.Test.Id{``0},System.String,System.Object[])">
            <summary>
            Asserts that the specified entity is not active.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="service">The service.</param>
            <param name="id">The id.</param>
            <param name="message">The message.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:DLaB.Xrm.Test.AssertCrm.NotExists(Microsoft.Xrm.Sdk.Entity,System.String,System.Object[])">
            <summary>
            Asserts that the specified entity does not exist.
            </summary>
            <param name="entity">The entity.</param>
            <param name="message">The message.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:DLaB.Xrm.Test.AssertCrm.NotExists(Microsoft.Xrm.Sdk.IOrganizationService,Microsoft.Xrm.Sdk.Entity,System.String,System.Object[])">
            <summary>
            Asserts that the specified entity does not exist.
            </summary>
            <param name="service">The service.</param>
            <param name="entity">The entity.</param>
            <param name="message">The message.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:DLaB.Xrm.Test.AssertCrm.NotExists(Microsoft.Xrm.Sdk.EntityReference,System.String,System.Object[])">
            <summary>
            Asserts that the specified entity does not exist.
            </summary>
            <param name="entityReference">The entity reference.</param>
            <param name="message">The message.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:DLaB.Xrm.Test.AssertCrm.NotExists(Microsoft.Xrm.Sdk.IOrganizationService,Microsoft.Xrm.Sdk.EntityReference,System.String,System.Object[])">
            <summary>
            Asserts that the specified entity does not exist.
            </summary>
            <param name="service">The service.</param>
            <param name="entityReference">The entity reference.</param>
            <param name="message">The message.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:DLaB.Xrm.Test.AssertCrm.NotExists(DLaB.Xrm.Test.Id,System.String,System.Object[])">
            <summary>
            Asserts that the specified entity does not exist.
            </summary>
            <param name="id">The identifier.</param>
            <param name="message">The message.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:DLaB.Xrm.Test.AssertCrm.NotExists(Microsoft.Xrm.Sdk.IOrganizationService,DLaB.Xrm.Test.Id,System.String,System.Object[])">
            <summary>
            Asserts that the specified entity does not exist.
            </summary>
            <param name="service">The service.</param>
            <param name="id">The identifier.</param>
            <param name="message">The message.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:DLaB.Xrm.Test.AssertCrm.NotExists``1(DLaB.Xrm.Test.Id{``0},System.String,System.Object[])">
            <summary>
            Asserts that the specified entity does not exist.
            </summary>
            <param name="id">The identifier.</param>
            <param name="message">The message.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:DLaB.Xrm.Test.AssertCrm.NotExists``1(Microsoft.Xrm.Sdk.IOrganizationService,DLaB.Xrm.Test.Id{``0},System.String,System.Object[])">
            <summary>
            Asserts that the specified entity does not exist.
            </summary>
            <param name="service">The service.</param>
            <param name="id">The identifier.</param>
            <param name="message">The message.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="T:DLaB.Xrm.Test.Assumptions.AssumedEntities">
            <summary>
            Collection class for Assumed Entities
            </summary>
        </member>
        <member name="M:DLaB.Xrm.Test.Assumptions.AssumedEntities.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DLaB.Xrm.Test.Assumptions.AssumedEntities"/> class.
            </summary>
        </member>
        <member name="M:DLaB.Xrm.Test.Assumptions.AssumedEntities.Load(Microsoft.Xrm.Sdk.IOrganizationService,System.Type[])">
            <summary>
            Validates the assumption attributes of the given type(s)
            </summary>
            <param name="service">The service.</param>
            <param name="types">The type(s) that has/have EntityDataAssumptionBaseAttribute Attributes</param>
        </member>
        <member name="M:DLaB.Xrm.Test.Assumptions.AssumedEntities.Get``2">
            <summary>
            Gets the Assumed Entity by Assumption Attribute Type, casting it to the Entity Type.
            </summary>
            <typeparam name="TAssumption">The type of the attribute.</typeparam>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.Assumptions.AssumedEntities.Get``1">
            <summary>
            Gets the Assumed Entity by Assumption Attribute Type, casting it to the Entity Type.
            </summary>
            <typeparam name="TAssumption"></typeparam>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:DLaB.Xrm.Test.Assumptions.AssumedEntities.Get``2(DLaB.Xrm.Test.Assumptions.IAssumptionEntityType{``0,``1})">
            <summary>
            Gets the Assumed Entity by Assumption Attribute Type, casting it to the Entity Type.
            </summary>
            <typeparam name="TAssumption">The type of the attribute.</typeparam>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="assumption">The assumption.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.Assumptions.AssumedEntities.Contains``1">
            <summary>
            Determines whether the assumption type is contained.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.Assumptions.AssumedEntities.Contains(DLaB.Xrm.Test.Assumptions.EntityDataAssumptionBaseAttribute)">
            <summary>
            Determines whether the assumption type is contained.
            </summary>
            <param name="assumption">The assumption.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.Assumptions.AssumedEntities.Add``1(Microsoft.Xrm.Sdk.Entity)">
            <summary>
            Adds the entity for the Assumption Type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.Assumptions.AssumedEntities.Add(DLaB.Xrm.Test.Assumptions.EntityDataAssumptionBaseAttribute,Microsoft.Xrm.Sdk.Entity)">
            <summary>
            Adds the specified assumption Type and Entity.
            </summary>
            <param name="attribute">The attribute.</param>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.Assumptions.AssumedEntities.Load(Microsoft.Xrm.Sdk.IOrganizationService,DLaB.Xrm.Test.Assumptions.EntityDataAssumptionBaseAttribute[])">
            <summary>
            Validates the given assumption
            </summary>
            <param name="service">The service.</param>
            <param name="entityAssumptions">EntityDataAssumptionBase objects</param>
        </member>
        <member name="M:DLaB.Xrm.Test.Assumptions.AssumedEntities.GetAll``1">
            <summary>
            Gets all Assumed Entities of the given entity type.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.Assumptions.AssumedEntities.GetAll(System.String)">
            <summary>
            Gets all Assumed Entities of the given entity type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.Assumptions.AssumedEntities.GetId``2">
            <summary>
            Gets the Assumed Entity as a typed Id
            </summary>
            <typeparam name="TAssumption"></typeparam>
            <typeparam name="TEntity"></typeparam>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.Assumptions.AssumedEntities.GetId``2(DLaB.Xrm.Test.Assumptions.IAssumptionEntityType{``0,``1})">
            <summary>
            Gets the Assumed Entity as a typed Id
            </summary>
            <typeparam name="TAssumption">The type of the attribute.</typeparam>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="assumption">The assumption.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.Assumptions.AssumedEntities.GetId``1">
            <summary>
            Gets the Assumed Entity as an untyped Id.
            </summary>
            <typeparam name="TAssumption">The type of the attribute.</typeparam>
            <returns></returns>
        </member>
        <member name="T:DLaB.Xrm.Test.Assumptions.EntityDataAssumptionBaseAttribute">
            <summary>
            Base Class for Assumption Entities
            </summary>
        </member>
        <member name="P:DLaB.Xrm.Test.Assumptions.EntityDataAssumptionBaseAttribute.Assumptions">
            <summary>
            The AssumedEntities populated by the AddAssumedEntities call.
            </summary>
        </member>
        <member name="P:DLaB.Xrm.Test.Assumptions.EntityDataAssumptionBaseAttribute.AssumptionsNamespaceRelativePath">
            <summary>
            Gets the name of the type, without the "Attribute" postfix, and with any namespace values that come after Assumptions
            </summary>
        </member>
        <member name="M:DLaB.Xrm.Test.Assumptions.EntityDataAssumptionBaseAttribute.GetAssumptionsNamespaceRelativePath(System.Type)">
            <summary>
            Gets the name of the type, without the "Attribute" postfix, and with any namespace values that come after Assumptions
            </summary>
        </member>
        <member name="M:DLaB.Xrm.Test.Assumptions.EntityDataAssumptionBaseAttribute.RetrieveEntity(Microsoft.Xrm.Sdk.IOrganizationService)">
            <summary>
            Return the entity assumed to exist or null if not found.
            </summary>
            <param name="service"></param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.Assumptions.EntityDataAssumptionBaseAttribute.AddAssumedEntities(Microsoft.Xrm.Sdk.IOrganizationService,DLaB.Xrm.Test.Assumptions.AssumedEntities)">
            <summary>
            Adds the entities assumed to exist to the AssumedEntities Collection
            </summary>
            <param name="service"></param>
            <param name="assumedEntities">Collection of Assumptions that have already been verified to be true</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.Assumptions.EntityDataAssumptionBaseAttribute.AddAssumedEntitiesWithPreReqInfiniteLoopPrevention(Microsoft.Xrm.Sdk.IOrganizationService,System.Collections.Generic.HashSet{System.Type})">
            <summary>
            Adds the assumed entities with pre req infinite loop prevention.
            </summary>
            <param name="service">The service.</param>
            <param name="currentlyProcessingPreReqs">The currently processing pre reqs.</param>
        </member>
        <member name="M:DLaB.Xrm.Test.Assumptions.EntityDataAssumptionBaseAttribute.AddAssumedEntitiesInternal(Microsoft.Xrm.Sdk.IOrganizationService)">
            <summary>
            Internal Implementation of Adds Assumed Entities.
            </summary>
            <param name="service">The service.</param>
        </member>
        <member name="M:DLaB.Xrm.Test.Assumptions.EntityDataAssumptionBaseAttribute.VerifyAssumption(Microsoft.Xrm.Sdk.IOrganizationService,Microsoft.Xrm.Sdk.Entity)">
            <summary>
            Throws an error if Entity is null and it's using a real CRM database
            -or-
            Throws an error if the CRM database is a local CRM database, and there are no serialized version of the files
            to deserialize
            </summary>
            <param name="service"></param>
            <param name="entity"></param>
        </member>
        <member name="M:DLaB.Xrm.Test.Assumptions.EntityDataAssumptionBaseAttribute.CreateForeignReferences(DLaB.Xrm.LocalCrm.LocalCrmDatabaseOrganizationService,Microsoft.Xrm.Sdk.Entity)">
            <summary>
            Creates all foreign references that don't exist.  This is usually due to the serialization grabAssumptionsbing more values than actually needed.
            </summary>
            <param name="service"></param>
            <param name="entity"></param>
        </member>
        <member name="T:DLaB.Xrm.Test.Assumptions.EntityDataAssumptionBaseAttribute.PrerequisiteAssumptionsAttribute">
            <summary>
            Lists the EntityDataAssumptions that are required by the decorated class.  These assumptions will be loaded automatically by the EntityDataAssumptionBase.
            </summary>
        </member>
        <member name="P:DLaB.Xrm.Test.Assumptions.EntityDataAssumptionBaseAttribute.PrerequisiteAssumptionsAttribute.Prerequisites">
            <summary>
            Gets or sets the prerequisites.
            </summary>
            <value>
            The prerequisites.
            </value>
        </member>
        <member name="M:DLaB.Xrm.Test.Assumptions.EntityDataAssumptionBaseAttribute.PrerequisiteAssumptionsAttribute.#ctor(System.Type[])">
            <summary>
            Initializes a new instance of the <see cref="T:DLaB.Xrm.Test.Assumptions.EntityDataAssumptionBaseAttribute.PrerequisiteAssumptionsAttribute" /> class.
            </summary>
            <param name="prerequisites">The prerequisites.</param>
        </member>
        <member name="T:DLaB.Xrm.Test.Assumptions.IAssumptionEntityType`2">
            <summary>
            Interface to allow for tying a non-generic attribute to a Entity
            </summary>
            <typeparam name="TAttribute">The type of the attribute.</typeparam>
            <typeparam name="TEntity">The type of the entity.</typeparam>
        </member>
        <member name="T:DLaB.Xrm.Test.Assumptions.MultipleEntityDataAssumptionAggregateBaseAttribute">
            <summary>
            Assumption Base Attribute that allows for combining multiple assumptions into one
            </summary>
        </member>
        <member name="M:DLaB.Xrm.Test.Assumptions.MultipleEntityDataAssumptionAggregateBaseAttribute.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:DLaB.Xrm.Test.Assumptions.MultipleEntityDataAssumptionAggregateBaseAttribute.Add(DLaB.Xrm.Test.Assumptions.MultipleEntityDataAssumptionBaseAttribute[])">
            <summary>
            Adds all assumptions defined for the given attributes to the current value.  Useful for combining multiple assumptions.
            </summary>
            <param name="attributes"></param>
        </member>
        <member name="M:DLaB.Xrm.Test.Assumptions.MultipleEntityDataAssumptionAggregateBaseAttribute.Add(DLaB.Xrm.Test.Assumptions.EntityDataAssumptionBaseAttribute[])">
            <summary>
            Adds all assumptions defined for the given attributes to the current value.  Useful for combining multiple assumptions.
            </summary>
            <param name="attributes"></param>
        </member>
        <member name="M:DLaB.Xrm.Test.Assumptions.MultipleEntityDataAssumptionAggregateBaseAttribute.GetAssumptions">
            <summary>
            Gets the assumptions.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.Assumptions.MultipleEntityDataAssumptionAggregateBaseAttribute.AddAssumedEntitiesInternal(Microsoft.Xrm.Sdk.IOrganizationService)">
            <summary>
            Returns the entities assumed to exist.
            </summary>
            <param name="service"></param>
            <returns></returns>
        </member>
        <member name="T:DLaB.Xrm.Test.Assumptions.MultipleEntityDataAssumptionBaseAttribute">
            <summary>
            Assumption Base Attribute that allows for combining multiple assumptions into one
            </summary>
        </member>
        <member name="M:DLaB.Xrm.Test.Assumptions.MultipleEntityDataAssumptionBaseAttribute.GetAssumptions">
            <summary>
            Gets the assumptions.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.Assumptions.MultipleEntityDataAssumptionBaseAttribute.RetrieveEntity(Microsoft.Xrm.Sdk.IOrganizationService)">
            <summary>
            Return the entity assumed to exist or null if not found.
            </summary>
            <param name="service"></param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.Assumptions.MultipleEntityDataAssumptionBaseAttribute.AddAssumedEntitiesInternal(Microsoft.Xrm.Sdk.IOrganizationService)">
            <summary>
            Returns the entities assumed to exist.
            </summary>
            <param name="service"></param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.Assumptions.MultipleEntityDataAssumptionBaseAttribute.GetAssumptionsInternal">
            <summary>
            Used to allow the Aggregate Multi-Entity Assumptions to be loaded
            </summary>
            <returns></returns>
        </member>
        <member name="T:DLaB.Xrm.Test.Builders.DLaBCrmEnvironmentBuilder">
            <summary>
            Class to simplify the simplest cases of creating entities without changing the defaults.  Use the CrmEnvironmentBuilderBase to provide application specific logic
            </summary>
        </member>
        <member name="P:DLaB.Xrm.Test.Builders.DLaBCrmEnvironmentBuilder.This">
            <summary>
            Returns the Instance
            </summary>
        </member>
        <member name="T:DLaB.Xrm.Test.Builders.CrmEnvironmentBuilderBase`1">
            <summary>
            Class to simplify the simplest cases of creating entities without changing the defaults.
            </summary>
        </member>
        <member name="P:DLaB.Xrm.Test.Builders.CrmEnvironmentBuilderBase`1.This">
            <summary>
            Gets the Instance.
            </summary>
            <value>
            The this.
            </value>
        </member>
        <member name="P:DLaB.Xrm.Test.Builders.CrmEnvironmentBuilderBase`1.EntityBuilders">
            <summary>
            Gets or sets the entity builders.
            </summary>
            <value>
            The entity builders.
            </value>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.CrmEnvironmentBuilderBase`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DLaB.Xrm.Test.Builders.CrmEnvironmentBuilderBase`1" /> class.
            </summary>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.CrmEnvironmentBuilderBase`1.ExceptEntities(DLaB.Xrm.Test.Id[])">
            <summary>
            Primarily Used in Conjuction with WithEntities&lt;TIdsStruct&gt; to allow for the exclusion of some Ids from being Created
            </summary>
            <param name="ids">The ids.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.CrmEnvironmentBuilderBase`1.ExceptEntities``1">
            <summary>
            Primarily Used in Conjuction with WithEntities&lt;TIdsStruct&gt; to allow for the exclusion of some Ids from being Created
            </summary>
            <typeparam name="TIdsStruct">The type of the ids structure.</typeparam>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.CrmEnvironmentBuilderBase`1.WithBuilder``1(DLaB.Xrm.Test.Id,System.Action{``0})">
            <summary>
            Allows for the specification of any fluent methods to the builder for the given entity
            </summary>
            <typeparam name="TBuilder">The type of the builder.</typeparam>
            <param name="id">The identifier.</param>
            <param name="action">The action.</param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.CrmEnvironmentBuilderBase`1.WithBuilder``1(System.Action{``0})">
            <summary>
            Allows for the specification of any fluent methods to the builder for the given type of entity
            </summary>
            <typeparam name="TBuilder">The type of the builder.</typeparam>
            <param name="action">The action.</param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.CrmEnvironmentBuilderBase`1.WithChildEntities(DLaB.Xrm.Test.Id,DLaB.Xrm.Test.Id[])">
            <summary>
            Adds the child entities to the parent.
            </summary>
            <param name="parent">The parent.</param>
            <param name="ids">The ids.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.CrmEnvironmentBuilderBase`1.WithEntities(DLaB.Xrm.Test.Id[])">
            <summary>
            Creates the Entities using the default Builder for the given entity type
            </summary>
            <param name="ids">The ids.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.CrmEnvironmentBuilderBase`1.WithEntities``1">
            <summary>
            Walks the Struct, Creating the Entities using the default Builder for each Id Defined in the Struct
            </summary>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.CrmEnvironmentBuilderBase`1.Create(Microsoft.Xrm.Sdk.IOrganizationService)">
            <summary>
            Creates all of the Ids defined by the builder, using the given Service
            </summary>
            <param name="service">The service.</param>
            <returns></returns>
        </member>
        <member name="T:DLaB.Xrm.Test.Builders.DLaBEntityBuilder`2">
            <summary>
            Abstract Entity builder for Creating Entities
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <typeparam name="TBuilder">The Derived Type</typeparam>
        </member>
        <member name="P:DLaB.Xrm.Test.Builders.DLaBEntityBuilder`2.This">
            <summary>
            Gets the Entity Builder of the derived Class.
            </summary>
        </member>
        <member name="P:DLaB.Xrm.Test.Builders.DLaBEntityBuilder`2.Attributes">
            <summary>
            Gets the attributes.
            </summary>
            <value>
            The attributes.
            </value>
        </member>
        <member name="P:DLaB.Xrm.Test.Builders.DLaBEntityBuilder`2.PostCreateAttributes">
            <summary>
            Gets the attributes set post create.
            </summary>
        </member>
        <member name="P:DLaB.Xrm.Test.Builders.DLaBEntityBuilder`2.Id">
            <summary>
            Gets or sets the Id of the Entity being created.
            </summary>
            <value>
            The identifier.
            </value>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.DLaBEntityBuilder`2.BuildInternal">
            <summary>
            Internal Build Method that gets called by the Build to create the entity
            </summary>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.DLaBEntityBuilder`2.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.DLaBEntityBuilder`2.AssertCorrectIdType(DLaB.Xrm.Test.Id)">
            <summary>
            It's very easy to attempt to create an entity using the wrong builder.  Call this method to ensure the type of the Id matches the type of the builder...
            </summary>
            <param name="id">The identifier.</param>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.DLaBEntityBuilder`2.WithAttributeValue(System.String,System.Object)">
            <summary>
            Defines that the entity should be built with the given attribute value
            </summary>
            <param name="attributeName">Name of the attribute.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.DLaBEntityBuilder`2.WithAttributeAssumption``1(System.String,DLaB.Xrm.Test.Assumptions.AssumedEntities)">
            <summary>
            Defines that the entity should be built with the given attribute value
            </summary>
            <param name="attributeName">Name of the attribute.</param>
            <param name="assumptions">The loaded entity assumptions</param>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.DLaBEntityBuilder`2.WithPostCreateAttributeValue(System.String,System.Object)">
            <summary>
            Defines that the entity should be set post creation
            </summary>
            <param name="attributeName">Name of the attribute.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.DLaBEntityBuilder`2.WithPostCreateAttributeAssumption``1(System.String,DLaB.Xrm.Test.Assumptions.AssumedEntities)">
            <summary>
            Defines that the entity should be built with the given attribute value
            </summary>
            <param name="attributeName">Name of the attribute.</param>
            <param name="assumptions">The loaded entity assumptions</param>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.DLaBEntityBuilder`2.WithPostCreate(`0)">
            <summary>
            Defines that the entity should be set post creation
            </summary>
            <param name="entity">The Attributes of the entity will be used to update the entity post create.</param>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.DLaBEntityBuilder`2.Build">
            <summary>
            Builds this instance, defaulting the Id if not populated.  Does not create it in CRM.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.DLaBEntityBuilder`2.Build(System.Boolean)">
            <summary>
            If creating in CRM, don't want to default the Id.
            </summary>
            <param name="defaultId">if set to <c>true</c> [default identifier].</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.DLaBEntityBuilder`2.Create(Microsoft.Xrm.Sdk.IOrganizationService,System.Boolean)">
            <summary>
            Creates the specified entity, setting populating the Id Property.
            </summary>
            <param name="service">The service.</param>
            <param name="runPostCreate">If true, PostCreate will be called directly after the create.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.DLaBEntityBuilder`2.CreateInternal(Microsoft.Xrm.Sdk.IOrganizationService,`0)">
            <summary>
            Just performs create.
            </summary>
            <param name="service">The service.</param>
            <param name="entity">Type: <see cref="T:Microsoft.Xrm.Sdk.Entity"></see>. An entity instance that contains the properties to set in the newly created record.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.DLaBEntityBuilder`2.PostCreate(Microsoft.Xrm.Sdk.IOrganizationService,`0)">
            <summary>
            Allows child classes to be able to cleanup other entities after record is created.
            Helpful when a plugin may already be creating the entity, and the auto-created version needs to get cleaned up.
            </summary>
            <param name="service">The service.</param>
            <param name="entity">The entity.</param>
        </member>
        <member name="T:DLaB.Xrm.Test.Builders.EntityBuilderManager">
            <summary>
            Manages what the default builder is for the Entity Type, and the specific builder by id
            </summary>
        </member>
        <member name="P:DLaB.Xrm.Test.Builders.EntityBuilderManager.Builders">
            <summary>
            The builder for each specific entity
            </summary>
            <value>
            The builders.
            </value>
        </member>
        <member name="P:DLaB.Xrm.Test.Builders.EntityBuilderManager.BuildersByEntityType">
            <summary>
            Manages the same list of Builders as the Builders Property, but by logical name
            </summary>
            <value>
            The type of the builders by entity.
            </value>
        </member>
        <member name="P:DLaB.Xrm.Test.Builders.EntityBuilderManager.DefaultBuilderConstructors">
            <summary>
            Contains constructors for the default builders of each entity type.  Whenever a new Builder is needed, this contains the constructor that will be invoked.
            </summary>
            <value>
            The builder for entity.
            </value>
        </member>
        <member name="P:DLaB.Xrm.Test.Builders.EntityBuilderManager.CustomBuilderFluentActions">
            <summary>
            Manages Custom Builder Fluent Actions.  Key is entity Logical Name.  Value is fluent actions to apply to Builder
            </summary>
            <value>
            The custom builder actions.
            </value>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.EntityBuilderManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DLaB.Xrm.Test.Builders.EntityBuilderManager" /> class.
            </summary>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.EntityBuilderManager.AddCustomAction(System.String,System.Action{System.Object})">
            <summary>
            Adds the custom fluent action if one doesn't already exist, and combines if one does already exist.
            </summary>
            <param name="logicalName">Name of the logical.</param>
            <param name="action">The action.</param>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.EntityBuilderManager.ApplyCustomAction``1(System.String,System.Action{``0})">
            <summary>
            Applies the custom action to all Builders for the given type.
            </summary>
            <typeparam name="TBuilder">The type of the builder.</typeparam>
            <param name="logicalName">Name of the logical.</param>
            <param name="action">The action.</param>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.EntityBuilderManager.ApplyCustomActions(System.String,System.Object)">
            <summary>
            Applies all custom fluent actions to the builder
            </summary>
            <param name="logicalName">Name of the logical.</param>
            <param name="builder">The builder.</param>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.EntityBuilderManager.Create(Microsoft.Xrm.Sdk.IOrganizationService)">
            <summary>
            Creates the specified entities in the correct Dependent Order, returning the entities created.
            </summary>
            <param name="service">The service.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.EntityBuilderManager.CreateEntity(Microsoft.Xrm.Sdk.IOrganizationService,DLaB.Xrm.Test.Builders.EntityBuilderManager.BuilderInfo,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.List{Microsoft.Xrm.Sdk.Entity})">
            <summary>
            Updates the Builder with any attributes set in the Id's Entity.
            </summary>
            <param name="service">The service.</param>
            <param name="info">The builder.</param>
            <param name="cyclicAttributes">The cyclic attributes.</param>
            <param name="postCreateUpdates">The post create updates.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.EntityBuilderManager.Get``1(DLaB.Xrm.Test.Id)">
            <summary>
            Gets the builder for the given Id, casting it to the given type T
            </summary>
            <typeparam name="T"></typeparam>
            <param name="id">The identifier.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.EntityBuilderManager.Get(DLaB.Xrm.Test.Id)">
            <summary>
            Gets the builder for the given Id
            </summary>
            <param name="id">The identifier.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.EntityBuilderManager.SetBuilderType``1(System.String)">
            <summary>
            Adds the builder as the default builder for the given entity type
            </summary>
            <typeparam name="TBuilder">The type of the builder.</typeparam>
            <param name="logicalName">Name of the logical.</param>
            <exception cref="T:System.Exception">
            </exception>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.EntityBuilderManager.Remove(DLaB.Xrm.Test.Id)">
            <summary>
            Removes the Builder specified by the Id
            </summary>
            <param name="id">The identifier.</param>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.EntityBuilderManager.GetGenericConstructor(System.String)">
            <summary>
            Creates a GenericEntityBuilder of the type of logical name being passed in.  Employs locking since BuilderForEntity is static
            </summary>
            <param name="logicalName">Name of the Entity to create a GenericEntityBuilder Constructor For.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.EntityBuilderManager.WithBuilderForEntityType``1(System.Action{``0})">
            <summary>
            Allows for the specification of any fluent methods to (all existing/future) builders for the given entity type
            </summary>
            <typeparam name="TBuilder">The type of the builder.</typeparam>
            <param name="action">The action.</param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.EntityBuilderManager.WithBuilderForEntity``1(DLaB.Xrm.Test.Id,System.Action{``0})">
            <summary>
            Allows for the specification of a particular entity to use a specific entity builder
            </summary>
            <typeparam name="TBuilder">The type of the builder.</typeparam>
            <param name="id">The identifier.</param>
            <param name="action">The action.</param>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="T:DLaB.Xrm.Test.Builders.Extensions">
            <summary>
            Extensions for Test Builders
            </summary>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.Extensions.CreateAndAddIfNotExists``1(System.Collections.Generic.Dictionary{System.Guid,``0},System.Guid,System.Func{``0})">
            <summary>
            Shortcut method to create the Builder and add it to the dictionary if not exists.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="id">The identifier.</param>
            <param name="createBuilder">The create builder.</param>
        </member>
        <member name="T:DLaB.Xrm.Test.Builders.GenericEntityBuilder`1">
            <summary>
            The Generic Entity Builder class.  If no Entity Builder exists, this class will be used by the Environment builder to create the Entity
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
        </member>
        <member name="T:DLaB.Xrm.Test.Builders.IAgnosticServiceBuilder">
            <summary>
            Interface for OrganizationServiceBuilder messages that get called by the TestMethodClassBase
            </summary>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.IAgnosticServiceBuilder.WithDefaultParentBu">
            <summary>
            Defaults the Parent BusinessUnit Id of all business units to the root BU if not already populated
            </summary>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.IAgnosticServiceBuilder.WithEntityNameDefaulted(System.Func{Microsoft.Xrm.Sdk.Entity,DLaB.Xrm.PrimaryFieldInfo,System.String})">
            <summary>Defaults the entity name of all created entities.</summary>
            <param name="getName">function to call to get the name for the given Entity and it's Primary Field Info</param>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.IAgnosticServiceBuilder.AssertIdNonEmptyOnCreate">
            <summary>
            Asserts that any create of an entity has the id populated.  Useful to ensure that all entities can be deleted after they have been created since the id is known.
            </summary>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.IAgnosticServiceBuilder.Build">
            <summary>Builds this IOrganizationService.</summary>
        </member>
        <member name="T:DLaB.Xrm.Test.Builders.IEntityBuilder`1">
            <summary>
            A generic Interface for Fluent Building of Entities
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.IEntityBuilder`1.Build">
            <summary>
            Builds this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.IEntityBuilder`1.Create(Microsoft.Xrm.Sdk.IOrganizationService,System.Boolean)">
            <summary>
            Creates the specified service.
            </summary>
            <param name="service">The service.</param>
            <param name="runPostCreate">If true, PostCreate will be called directly after the create.</param>
            <returns></returns>
        </member>
        <member name="T:DLaB.Xrm.Test.Builders.IEntityBuilder">
            <summary>
            An Interface for Fluent Building of Entities
            </summary>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.IEntityBuilder.Build">
            <summary>
            Builds this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.IEntityBuilder.Create(Microsoft.Xrm.Sdk.IOrganizationService,System.Boolean)">
            <summary>
            Combines the Building, Creating, and Post Creation of the Entity.
            </summary>
            <param name="service">The service.</param>
            <param name="runPostCreate">If true, PostCreate will be called directly after the create.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.IEntityBuilder.PostCreate(Microsoft.Xrm.Sdk.IOrganizationService,Microsoft.Xrm.Sdk.Entity)">
            <summary>
            Allows child classes to be able to cleanup other entities after record is created.
            Helpful when a plugin may already be creating the entity, and the auto-created version needs to get cleaned up.
            </summary>
            <param name="service">The service.</param>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.IEntityBuilder.WithAttributeValue(System.String,System.Object)">
            <summary>
            Allows for setting the given attribute of the entity when built
            </summary>
            <param name="attributeName">Name of the attribute.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:DLaB.Xrm.Test.Builders.N2NBuilder`1">
            <summary>
            Builder for Associate only Entities
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.N2NBuilder`1.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.N2NBuilder`1.#ctor(System.Guid)">
            <summary>
            Constructor
            </summary>
            <param name="id">Id</param>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.N2NBuilder`1.#ctor(DLaB.Xrm.Test.Id)">
            <summary>
            Constructor
            </summary>
            <param name="id">Id</param>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.N2NBuilder`1.BuildInternal">
            <summary>
            Builds the Entity
            </summary>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.N2NBuilder`1.CreateInternal(Microsoft.Xrm.Sdk.IOrganizationService,`0)">
            <summary>
            Creates the entity via associate request
            </summary>
            <param name="service"></param>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="T:DLaB.Xrm.Test.Builders.OrganizationServiceBuilder">
            <summary>
            Concrete Implementation of the OrganizationServiceBuilderBase
            </summary>
        </member>
        <member name="P:DLaB.Xrm.Test.Builders.OrganizationServiceBuilder.This">
            <summary>
            Gets the derived version of the class.
            </summary>
            <value>
            The this.
            </value>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.OrganizationServiceBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DLaB.Xrm.Test.Builders.OrganizationServiceBuilder" /> class.
            </summary>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.OrganizationServiceBuilder.#ctor(Microsoft.Xrm.Sdk.IOrganizationService)">
            <summary>
            Initializes a new instance of the <see cref="T:DLaB.Xrm.Test.Builders.OrganizationServiceBuilder" /> class.
            </summary>
            <param name="service">The service.</param>
        </member>
        <member name="T:DLaB.Xrm.Test.Builders.OrganizationServiceBuilderBase`1">
            <summary>
            Base class for Organization Service Builder
            </summary>
            <typeparam name="TDerived">The type of the derived.</typeparam>
        </member>
        <member name="P:DLaB.Xrm.Test.Builders.OrganizationServiceBuilderBase`1.This">
            <summary>
            Gets the Organization Service Builder of the derived Class.
            </summary>
            <value>
            The this.
            </value>
        </member>
        <member name="P:DLaB.Xrm.Test.Builders.OrganizationServiceBuilderBase`1.NewEntityDefaultIds">
            <summary>
            The Entity Ids used to populate Entities without any ids
            </summary>
            <value>
            The new entity default ids.
            </value>
        </member>
        <member name="P:DLaB.Xrm.Test.Builders.OrganizationServiceBuilderBase`1.EntityFilter">
            <summary>
            The Entities constrained by id to be retrieved when querying CRM
            </summary>
            <value>
            The new entity default ids.
            </value>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.OrganizationServiceBuilderBase`1.#ctor(Microsoft.Xrm.Sdk.IOrganizationService)">
            <summary>
            Initializes a new instance of the <see cref="T:DLaB.Xrm.Test.Builders.OrganizationServiceBuilderBase`1" /> class.
            </summary>
            <param name="service">The service.</param>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.OrganizationServiceBuilderBase`1.WithFakeAssociate(System.Action{Microsoft.Xrm.Sdk.IOrganizationService,System.String,System.Guid,Microsoft.Xrm.Sdk.Relationship,Microsoft.Xrm.Sdk.EntityReferenceCollection}[])">
            <summary>
            Adds the fake associate.
            </summary>
            <param name="action">The action.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.OrganizationServiceBuilderBase`1.WithFakeCreate(System.Func{Microsoft.Xrm.Sdk.IOrganizationService,Microsoft.Xrm.Sdk.Entity,System.Guid}[])">
            <summary>
            Adds the fake create.
            </summary>
            <param name="func">The function.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.OrganizationServiceBuilderBase`1.WithFakeDelete(System.Action{Microsoft.Xrm.Sdk.IOrganizationService,System.String,System.Guid}[])">
            <summary>
            Adds the fake delete.
            </summary>
            <param name="action">The action.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.OrganizationServiceBuilderBase`1.WithFakeDisassociate(System.Action{Microsoft.Xrm.Sdk.IOrganizationService,System.String,System.Guid,Microsoft.Xrm.Sdk.Relationship,Microsoft.Xrm.Sdk.EntityReferenceCollection}[])">
            <summary>
            Adds the fake disassociate.
            </summary>
            <param name="action">The action.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.OrganizationServiceBuilderBase`1.WithFakeExecute(System.Func{Microsoft.Xrm.Sdk.IOrganizationService,Microsoft.Xrm.Sdk.OrganizationRequest,Microsoft.Xrm.Sdk.OrganizationResponse}[])">
            <summary>
            Adds the fake execute.
            </summary>
            <param name="func">The function.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.OrganizationServiceBuilderBase`1.WithFakeRetrieveMultiple(System.Func{Microsoft.Xrm.Sdk.IOrganizationService,Microsoft.Xrm.Sdk.Query.QueryBase,Microsoft.Xrm.Sdk.EntityCollection}[])">
            <summary>
            Adds the fake retrieve multiple.
            </summary>
            <param name="func">The function.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.OrganizationServiceBuilderBase`1.WithFakeRetrieve(System.Func{Microsoft.Xrm.Sdk.IOrganizationService,System.String,System.Guid,Microsoft.Xrm.Sdk.Query.ColumnSet,Microsoft.Xrm.Sdk.Entity}[])">
            <summary>
            Adds the fake retrieve.
            </summary>
            <param name="func">The function.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.OrganizationServiceBuilderBase`1.WithFakeRetrieve(System.Func{Microsoft.Xrm.Sdk.IOrganizationService,System.String,System.Guid,Microsoft.Xrm.Sdk.Query.ColumnSet,System.Boolean},Microsoft.Xrm.Sdk.Entity)">
            <summary>
            Simplifies the WithFakeRetrieve to a boolean return value and the value to return.
            </summary>
            <param name="shouldFakeRetrieve"></param>
            <param name="fakedValue"></param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.OrganizationServiceBuilderBase`1.WithFakeUpdate(System.Action{Microsoft.Xrm.Sdk.IOrganizationService,Microsoft.Xrm.Sdk.Entity}[])">
            <summary>
            Adds the fake update.
            </summary>
            <param name="action">The action.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.OrganizationServiceBuilderBase`1.AssertIdNonEmptyOnCreate">
            <summary>
            Asserts that any create of an entity has the id populated.  Useful to ensure that all entities can be deleted after they have been created since the id is known.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.OrganizationServiceBuilderBase`1.IsReadOnly">
            <summary>
            Asserts failure whenever an action is requested that would perform an update (Create / Delete / Update) of some sort
            </summary>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.OrganizationServiceBuilderBase`1.WithBusinessUnitDeleteAsDeactivate">
            <summary>
            Changes the Delete of a business unit to be a deactivate.  Allows for normal Deletion of all entities by the Test builder framework
            </summary>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.OrganizationServiceBuilderBase`1.WithDefaultParentBu">
            <summary>
            Defaults the Parent BusinessUnitId of all business units to the root BU if not already populated
            </summary>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.OrganizationServiceBuilderBase`1.WithEntityFilter(DLaB.Xrm.Test.Id[])">
            <summary>
            Adds a condition to all RetrieveMultiple calls that constrains the results to only the entities with ids given for entities with their logical name in the Ids collection.
            Entity types not contained in the Ids collection will be unrestrained
            </summary>
            <param name="ids">The ids.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.OrganizationServiceBuilderBase`1.WithEntityFilter``1(System.Guid[])">
            <summary>
            Adds a condition to all RetrieveMultiple calls that constrains the results to only the entities with ids given for entities with their logical name matching the Type T.
            Entities of a Type other than "T" will not be constrainted
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ids">The entity ids.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.OrganizationServiceBuilderBase`1.WithEntityFilter(System.String,System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Adds a condition to all RetrieveMultiple calls that constrains the results to only the entities with ids given for entities with their logical name in the entityIds collection.
            Entities of a Type other than the given logicalName will not be constrainted
            </summary>
            <param name="logicalName">Entity Logical Name.</param>
            <param name="ids">The entity ids.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.OrganizationServiceBuilderBase`1.WithFakeAction``1(``0,System.String)">
            <summary>
            Fakes any call to the given action with the given action response.
            </summary>
            <typeparam name="T">The early bound action response type.</typeparam>
            <param name="response">The response to return</param>
            <param name="actionLogicalName">Required unless the OrganizationResponse type has a field of name "ActionLogicalName" that contains the logical name for the action.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.OrganizationServiceBuilderBase`1.WithFakeAction``2(System.Func{Microsoft.Xrm.Sdk.IOrganizationService,``0,``1},System.String)">
            <summary>
            Fakes any call to the given action with the given action response.
            </summary>
            <typeparam name="TRequest">The early bound action request type.</typeparam>
            <typeparam name="TResponse">The early bound action response type.</typeparam>
            <param name="actionFake">The function to be called when the action is being executed.</param>
            <param name="actionLogicalName">Required unless the OrganizationResponse type has a field of name "ActionLogicalName" that contains the logical name for the action.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.OrganizationServiceBuilderBase`1.WithFakeRetrieve(Microsoft.Xrm.Sdk.Entity)">
            <summary>
            Forces any retrieve call of the particular entity type to return the given entity.  Does not apply to any other calls i.e. RetrieveMultiple.
            </summary>
            <param name="entity">The entity to return.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.OrganizationServiceBuilderBase`1.WithFakeRetrieveMultiple(System.Func{Microsoft.Xrm.Sdk.IOrganizationService,Microsoft.Xrm.Sdk.Query.QueryBase,System.Boolean},Microsoft.Xrm.Sdk.EntityCollection)">
            <summary>
            Simplifies the WithFakeRetrieveMultiple to a boolean return value and the value to return.
            </summary>
            <param name="shouldFakeRetrieveMultiple"></param>
            <param name="fakedValue"></param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.OrganizationServiceBuilderBase`1.WithFakeRetrieveMultiple``1(System.Func{Microsoft.Xrm.Sdk.IOrganizationService,Microsoft.Xrm.Sdk.Query.QueryBase,System.Boolean},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Simplifies the WithFakeRetrieveMultiple to a boolean return value and the value to return.
            </summary>
            <param name="shouldFakeRetrieveMultiple"></param>
            <param name="fakedValue"></param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.OrganizationServiceBuilderBase`1.WithFakeRetrieveMultiple``1(System.Func{Microsoft.Xrm.Sdk.IOrganizationService,Microsoft.Xrm.Sdk.Query.QueryBase,System.Boolean},``0[])">
            <summary>
            Simplifies the WithFakeRetrieveMultiple to a boolean return value and the value to return.
            </summary>
            <param name="shouldFakeRetrieveMultiple"></param>
            <param name="fakedValue"></param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.OrganizationServiceBuilderBase`1.WithFakeRetrieveMultipleForEntity(System.String,Microsoft.Xrm.Sdk.EntityCollection)">
            <summary>
            Simplifies the WithFakeRetrieveMultiple by returning the given collection for the given logical name.
            </summary>
            <param name="logicalName">The logical name of the entity to fake the RetrieveMultiple for.</param>
            <param name="fakedValue">The value to return when the query is for the given entity type.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.OrganizationServiceBuilderBase`1.WithFakeRetrieveMultipleForEntity``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Simplifies the WithFakeRetrieveMultiple by returning the given collection for the given logical name.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fakedValue">The entities to return when the query is for the given entity type.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.OrganizationServiceBuilderBase`1.WithFakeRetrieveMultipleForEntity``1(``0[])">
            <summary>
            Simplifies the WithFakeRetrieveMultiple by returning the given collection for the given logical name.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fakedValue">The entities to return when the query is for the given entity type.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.OrganizationServiceBuilderBase`1.WithFakeSetStateForEntity(Microsoft.Xrm.Sdk.EntityReference,System.Action{Microsoft.Crm.Sdk.Messages.SetStateRequest})">
            <summary>
            Performs custom function for SetState of entity
            </summary>
            <param name="entityToFakeSetStateFor">The entity to fake set state for.</param>
            <param name="setStateAction">The set state function.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.OrganizationServiceBuilderBase`1.WithFakeUpdateForEntity(Microsoft.Xrm.Sdk.EntityReference,System.Action{Microsoft.Xrm.Sdk.Entity})">
            <summary>
            Performs custom action for update, rather than default update
            </summary>
            <param name="entityToMock">The entity to mock.</param>
            <param name="action">The action.</param>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.OrganizationServiceBuilderBase`1.WithEntityNameDefaulted(System.Func{Microsoft.Xrm.Sdk.Entity,DLaB.Xrm.PrimaryFieldInfo,System.String},DLaB.Xrm.IEntityHelperConfig)">
            <summary>
            Defaults the entity name of all created entities.
            </summary>
            <param name="getName">function to call to get the name for the given Entity and it's Primary Field Info</param>
            <param name="config">Entity Help settings to define primary attributes</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.OrganizationServiceBuilderBase`1.WithIdsDefaultedForCreate(DLaB.Xrm.Test.Id[])">
            <summary>
            When an entity is attempted to be created without an id, and an Id was passed in for that particular entity type, the Guid of the Id will be used to populate the entity
            </summary>
            <param name="ids">The ids.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.OrganizationServiceBuilderBase`1.WithIdsDefaultedForCreate(System.Boolean,DLaB.Xrm.Test.Id[])">
            <summary>
            When an entity is attempted to be created without an id, and an Id was passed in for that particular entity type, the Guid of the Id will be used to populate the entity
            </summary>
            <param name="ignoreContextCreation">Since OrganizationServiceContext.SaveChanges will populate ids if they aren't already populated, controls whether an error should be thrown when this occurs.</param>
            <param name="ids">The ids.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.OrganizationServiceBuilderBase`1.WithIdsDefaultedForCreate(System.Collections.Generic.IEnumerable{DLaB.Xrm.Test.Id},System.Boolean)">
            <summary>
            When an entity is attempted to be created without an id, and an Id was passed in for that particular entity type, the Guid of the Id will be used to populate the entity
            </summary>
            <param name="ids">The ids.</param>
            <param name="ignoreContextCreation">Since OrganizationServiceContext.SaveChanges will populate ids if they aren't already populated, controls whether an error should be thrown when this occurs.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.OrganizationServiceBuilderBase`1.WithLocalOptionSetsRetrievedFromEnum(System.Nullable{System.Int32})">
            <summary>
            Fakes out calls to RetrieveAttribute Requests, using enums to generate the OptionSetMetaData.  Userful for mocking out any calls to determine the text values of an optionset.
            </summary>
            <param name="defaultLangaugeCode">The default langauge code.  Defaults to reading DefaultLanguageCode from the config, or 1033 if not found</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.OrganizationServiceBuilderBase`1.WithNoCreates">
            <summary>
            Causes the Organization Service to throw an exception if an attempt is made to create an entity
            </summary>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.OrganizationServiceBuilderBase`1.WithReturnedEntities(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{Microsoft.Xrm.Sdk.Entity}})">
            <summary>
            Defines the entities that will be returned when the particular entity type is queried for
            </summary>
            <param name="entities">The entities.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.OrganizationServiceBuilderBase`1.WithReturnedEntities(Microsoft.Xrm.Sdk.IOrganizationService,Microsoft.Xrm.Sdk.Query.QueryBase,System.String,Microsoft.Xrm.Sdk.Entity[])">
            <summary>
            Specifies that the returned entities are returned whenever the given entity type is queried for.
            </summary>
            <param name="s">The s.</param>
            <param name="qb">The qb.</param>
            <param name="logicalName">Name of the logical.</param>
            <param name="entities">The entities.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.OrganizationServiceBuilderBase`1.WithWebResourcePulledFromPath(System.String,System.String)">
            <summary>
            Fakes RetrieveMultiples that are requesting a WebResource, to read the file from the given path.  Useful when settings are stored in a config web resource, and so can be tested with local modifications.
            </summary>
            <param name="webResourceName">Name of the web resource.</param>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.OrganizationServiceBuilderBase`1.Build">
            <summary>
            Builds this IOrganizationService.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.OrganizationServiceBuilderBase`1.DefaultIdForEntity(Microsoft.Xrm.Sdk.Entity)">
            <summary>
            Defaults the id an any entity created using the Dictionary string, without an already defined Guid, to the default Id.  Doesn't actually create the Entity.
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.OrganizationServiceBuilderBase`1.GetPrimaryFieldInfo(System.String,DLaB.Xrm.IEntityHelperConfig)">
            <summary>
            Gets the primary field information.
            </summary>
            <param name="logicalName">Logical name of the entity.</param>
            <param name="config">Entity Help settings to define primary attributes</param>
            <returns></returns>
        </member>
        <member name="T:DLaB.Xrm.Test.Builders.PluginExecutionContextBuilder">
            <summary>
            Derived Version of the PluginExecutionContextBuilderBase
            </summary>
        </member>
        <member name="P:DLaB.Xrm.Test.Builders.PluginExecutionContextBuilder.This">
            <summary>
            Gets the Plugin Execution Context of the derived Class.
            </summary>
            <value>
            The this.
            </value>
        </member>
        <member name="T:DLaB.Xrm.Test.Builders.PluginExecutionContextBuilderBase`1">
            <summary>
            Abstract Builder to allow for Derived Types to created
            </summary>
            <typeparam name="TDerived">The type of the derived.</typeparam>
        </member>
        <member name="P:DLaB.Xrm.Test.Builders.PluginExecutionContextBuilderBase`1.This">
            <summary>
            Gets the derived version of the class.
            </summary>
            <value>
            The this.
            </value>
        </member>
        <member name="P:DLaB.Xrm.Test.Builders.PluginExecutionContextBuilderBase`1.Context">
            <summary>
            Gets or sets the context.
            </summary>
            <value>
            The context.
            </value>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.PluginExecutionContextBuilderBase`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DLaB.Xrm.Test.Builders.PluginExecutionContextBuilderBase`1" /> class.
            </summary>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.PluginExecutionContextBuilderBase`1.IsExecutingOffline(System.Boolean)">
            <summary>
            Sets the IsExecutingOffline value of the Context
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.PluginExecutionContextBuilderBase`1.IsOfflinePlayback(System.Boolean)">
            <summary>
            Sets the IsOfflinePlayback value of the Context
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.PluginExecutionContextBuilderBase`1.IsInTransaction(System.Boolean)">
            <summary>
            Sets the IsInTransaction value of the Context
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.PluginExecutionContextBuilderBase`1.WithBusinessUnit(System.Guid)">
            <summary>
            Sets the Business Unit Id of the Context
            </summary>
            <param name="businessUnitId"></param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.PluginExecutionContextBuilderBase`1.WithCorrelationId(System.Guid)">
            <summary>
            Sets the CorrelationId of the Context
            </summary>
            <param name="id">The correlationId.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.PluginExecutionContextBuilderBase`1.WithCurrentUser(Microsoft.Xrm.Sdk.IOrganizationService)">
            <summary>
            Using the WhoAmIRequest, populates the UserId and InitiatingUserId of the context with the current executing user.
            </summary>
            <param name="service">The service.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.PluginExecutionContextBuilderBase`1.WithDepth(System.Int32)">
            <summary>
            Depth of the plugin context
            </summary>
            <param name="depth">The depth.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.PluginExecutionContextBuilderBase`1.WithFirstRegisteredEvent(DLaB.Xrm.Plugin.IRegisteredEventsPlugin,System.Func{DLaB.Xrm.Plugin.RegisteredEvent,System.Boolean})">
            <summary>
            Sets the registered event for the context to the first registered event of the plugin. Throws an exception if more than one event is found.
            </summary>
            <param name="plugin">The plugin.</param>
            <param name="predicate">Optional predicate based on the RegisteredEvents of the plugin.</param>
            <returns></returns>
            <exception cref="T:System.Exception">Plugin  + plugin.GetType().FullName +  does not contain any registered events!  Unable to set the registered event of the context.</exception>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.PluginExecutionContextBuilderBase`1.WithFirstRegisteredEvent(Microsoft.Xrm.Sdk.IPlugin,System.Func{DLaB.Xrm.Plugin.RegisteredEvent,System.Boolean})">
            <summary>
            Sets the registered event for the context to the first registered event of the plugin. Throws an exception if more than one event is found.
            </summary>
            <param name="plugin">The plugin.  Must contain a property with the name RegisteredEvents</param>
            <param name="predicate">Optional predicate based on the RegisteredEvents of the plugin.</param>
            <returns></returns>
            <exception cref="T:System.Exception">Plugin  + plugin.GetType().FullName +  does not contain any registered events!  Unable to set the registered event of the context.</exception>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.PluginExecutionContextBuilderBase`1.WithInitiatingUser(System.Guid)">
            <summary>
            Sets the initiating user for the context.  The initiaiting User Id is the id of user that actually triggered the plugin, rather than the user the plugin is executing as
            </summary>
            <param name="id">The identifier.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.PluginExecutionContextBuilderBase`1.WithInputParameter(System.String,System.Object)">
            <summary>
            Adds the input parameter to the context's InputParameters collection.
            </summary>
            <param name="name">The name.</param>
            <param name="parameter">The parameter.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.PluginExecutionContextBuilderBase`1.WithInputParameters(System.Object[])">
            <summary>
            Key Value Pairs of input parameters to add to the context
            </summary>
            <param name="nameValuePairs">The name value pairs.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">The list of arguments must be an even number!;nameValuePairs</exception>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.PluginExecutionContextBuilderBase`1.WithInputRequest(Microsoft.Xrm.Sdk.OrganizationRequest)">
            <summary>
            Adds the parameters in the request to the Input Parameters
            </summary>
            <param name="request">An Org Request</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.PluginExecutionContextBuilderBase`1.WithIsolationMode(DLaB.Xrm.Plugin.IsolationMode)">
            <summary>
            Sets the IsolationMode of the Context.  This does not actually prevent Sandbox calls from being made.
            </summary>
            <param name="mode">The mode.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.PluginExecutionContextBuilderBase`1.WithIsolationMode(System.Int32)">
            <summary>
            Sets the IsolationMode of the Context.  This does not actually prevent Sandbox calls from being made.
            </summary>
            <param name="mode">The mode.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.PluginExecutionContextBuilderBase`1.WithMode(System.Int32)">
            <summary>
            Async vs Sync
            </summary>
            <param name="mode">0 = Sync, 1 = Async</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.PluginExecutionContextBuilderBase`1.WithOperation(System.Guid,System.DateTime)">
            <summary>
            Sets the Operation of the context
            </summary>
            <param name="id">Operation Id</param>
            <param name="createdOn">Operation Created On</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.PluginExecutionContextBuilderBase`1.WithOrg(System.Guid,System.String)">
            <summary>
            Sets the Org of the context
            </summary>
            <param name="id">Organization Id</param>
            <param name="orgName">Organization Name</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.PluginExecutionContextBuilderBase`1.WithOutputParameter(System.String,System.Object)">
            <summary>
            Adds the input parameter to the context's InputParameters collection.
            </summary>
            <param name="name">The name.</param>
            <param name="parameter">The parameter.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.PluginExecutionContextBuilderBase`1.WithOutputParameters(System.Object[])">
            <summary>
            Key Value Pairs of input parameters to add to the context
            </summary>
            <param name="nameValuePairs">The name value pairs.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">The list of arguments must be an even number!;nameValuePairs</exception>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.PluginExecutionContextBuilderBase`1.WithOwningExt(Microsoft.Xrm.Sdk.EntityReference)">
            <summary>
            Sets the owning extension for the context.
            </summary>
            <param name="owningExtension">The owning extension.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.PluginExecutionContextBuilderBase`1.WithParentContext(Microsoft.Xrm.Sdk.IPluginExecutionContext)">
            <summary>
            Sets the parent context for the context.
            </summary>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.PluginExecutionContextBuilderBase`1.WithPrimaryEntityId(System.Guid)">
            <summary>
            Sets the primary entity identifier for the context.
            </summary>
            <param name="guid">The unique identifier.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.PluginExecutionContextBuilderBase`1.WithPrimaryEntityName(System.String)">
            <summary>
            Sets the primary entity name for the context.
            </summary>
            <param name="logicalName">Primary Entity Logical Name.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.PluginExecutionContextBuilderBase`1.WithRegisteredEvent(DLaB.Xrm.Plugin.RegisteredEvent)">
            <summary>
            Sets the registered event for the context.
            </summary>
            <param name="event">The event.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.PluginExecutionContextBuilderBase`1.WithRegisteredEvent(System.Int32,System.String,System.String)">
            <summary>
            Sets the registered event for the context.
            </summary>
            <param name="stage"></param>
            <param name="messageName"></param>
            <param name="entityLogicalName"></param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.PluginExecutionContextBuilderBase`1.WithRegisteredEvent(DLaB.Xrm.Plugin.IRegisteredEventsPlugin)">
            <summary>
            Sets the registered event for the context to the registered event of the plugin.  Throws an exception if more than one event is found.  Use WithFirstRegisteredEvent if the first event was intended
            </summary>
            <param name="plugin">The plugin.</param>
            <returns></returns>
            <exception cref="T:System.Exception">
            Plugin does not contain any registered events!  Unable to set the registered event of the context.
            or
            Plugin contains more than one registered event!  Unable to determine what registered event to use for the context.
            </exception>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.PluginExecutionContextBuilderBase`1.WithRegisteredEvent(Microsoft.Xrm.Sdk.IPlugin)">
            <summary>
            Sets the registered event for the context to the registered event of the plugin.  Throws an exception if more than one event is found.  Use WithFirstRegisteredEvent if the first event was intended
            </summary>
            <param name="plugin">The plugin.</param>
            <returns></returns>
            <exception cref="T:System.Exception">
            Plugin does not contain any registered events!  Unable to set the registered event of the context.
            or
            Plugin contains more than one registered event!  Unable to determine what registered event to use for the context.
            </exception>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.PluginExecutionContextBuilderBase`1.WithSecondaryEntityName(System.String)">
            <summary>
            Sets the secondary entity name for the context.
            </summary>
            <param name="logicalName">Secondary Entity Logical Name.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.PluginExecutionContextBuilderBase`1.WithSharedVariable(System.String,System.Object)">
            <summary>
            Adds the variable to the context's SharedVariables collection.
            </summary>
            <param name="name">The name.</param>
            <param name="parameter">The parameter.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.PluginExecutionContextBuilderBase`1.WithSharedVariables(System.Object[])">
            <summary>
            Key Value Pairs of variables to add to the context's SharedVariables collection.
            </summary>
            <param name="nameValuePairs">The name value pairs.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">The list of arguments must be an even number!;nameValuePairs</exception>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.PluginExecutionContextBuilderBase`1.WithTarget``1(``0)">
            <summary>
            Sets the target.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="target">The target.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.PluginExecutionContextBuilderBase`1.WithTarget(Microsoft.Xrm.Sdk.EntityReference)">
            <summary>
            Sets the target.
            </summary>
            <param name="target">The target.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.PluginExecutionContextBuilderBase`1.WithTarget(DLaB.Xrm.Test.Id)">
            <summary>
            Sets the target.
            </summary>
            <param name="id">The target.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.PluginExecutionContextBuilderBase`1.WithTarget``1(DLaB.Xrm.Test.Id{``0})">
            <summary>
            Sets the target.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="id">The target.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.PluginExecutionContextBuilderBase`1.WithTargetInternal(Microsoft.Xrm.Sdk.EntityReference)">
            <summary>
            Sets the target internal.
            </summary>
            <param name="entityRef">The entity reference.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.PluginExecutionContextBuilderBase`1.WithUser(System.Guid)">
            <summary>
            Sets the user for the context.  The user is the user the plugin is currently executing as, rather than the user that actually triggered the plugin
            </summary>
            <param name="id">The identifier.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.PluginExecutionContextBuilderBase`1.WithPreImage``1(``0,System.String)">
            <summary>
            Sets the pre image using the default PreImage key by default.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="image">The image.</param>
            <param name="imageKey">The image key.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.PluginExecutionContextBuilderBase`1.WithPreOperation(System.String,System.String)">
            <summary>
            Sets the Pre-operation event for the context.
            </summary>
            <param name="messageName"></param>
            <param name="entityLogicalName">Utilizes the PrimaryEntityName if not specified</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.PluginExecutionContextBuilderBase`1.WithPreValidation(System.String,System.String)">
            <summary>
            Sets the Pre-validation event for the context.
            </summary>
            <param name="messageName"></param>
            <param name="entityLogicalName">Utilizes the PrimaryEntityName if not specified</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.PluginExecutionContextBuilderBase`1.WithPostOperation(System.String,System.String)">
            <summary>
            Sets the Post-operation event for the context.
            </summary>
            <param name="messageName"></param>
            <param name="entityLogicalName">Utilizes the PrimaryEntityName if not specified</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.PluginExecutionContextBuilderBase`1.WithPostImage``1(``0,System.String)">
            <summary>
            Sets the post image using the default PostImage key by default.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="image">The image.</param>
            <param name="imageKey">The image key.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.PluginExecutionContextBuilderBase`1.Build">
            <summary>
            Builds this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="T:DLaB.Xrm.Test.Builders.ServiceProviderBuilder">
            <summary>
            Builder for creating Service Provider
            </summary>
        </member>
        <member name="P:DLaB.Xrm.Test.Builders.ServiceProviderBuilder.This">
            <summary>
            Gets the Service Provider Builder of the derived Class.
            </summary>
            <value>
            The this.
            </value>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.ServiceProviderBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DLaB.Xrm.Test.Builders.ServiceProviderBuilder" /> class.
            </summary>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.ServiceProviderBuilder.#ctor(Microsoft.Xrm.Sdk.IOrganizationService,Microsoft.Xrm.Sdk.IPluginExecutionContext)">
            <summary>
            Initializes a new instance of the <see cref="T:DLaB.Xrm.Test.Builders.ServiceProviderBuilder" /> class.
            </summary>
            <param name="service">The service.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.ServiceProviderBuilder.#ctor(Microsoft.Xrm.Sdk.IOrganizationService,Microsoft.Xrm.Sdk.IPluginExecutionContext,DLaB.Xrm.Test.ITestLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:DLaB.Xrm.Test.Builders.ServiceProviderBuilder" /> class.
            </summary>
            <param name="service">The service.</param>
            <param name="context">The context.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.ServiceProviderBuilder.#ctor(Microsoft.Xrm.Sdk.IOrganizationService,Microsoft.Xrm.Sdk.IPluginExecutionContext,Microsoft.Xrm.Sdk.ITracingService)">
            <summary>
            Initializes a new instance of the <see cref="T:DLaB.Xrm.Test.Builders.ServiceProviderBuilder" /> class.
            </summary>
            <param name="service">The service.</param>
            <param name="context">The context.</param>
            <param name="trace">The tracing service.</param>
        </member>
        <member name="T:DLaB.Xrm.Test.Builders.ServiceProviderBuilderBase`1">
            <summary>
            Abstract Builder to allow for Derived Types to be created
            </summary>
            <typeparam name="TDerived">The type of the derived.</typeparam>
        </member>
        <member name="P:DLaB.Xrm.Test.Builders.ServiceProviderBuilderBase`1.This">
            <summary>
            Gets the derived version of the class.
            </summary>
            <value>
            The this.
            </value>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.ServiceProviderBuilderBase`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DLaB.Xrm.Test.Builders.ServiceProviderBuilderBase`1" /> class.
            </summary>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.ServiceProviderBuilderBase`1.#ctor(Microsoft.Xrm.Sdk.IOrganizationService,Microsoft.Xrm.Sdk.IPluginExecutionContext)">
            <summary>
            Initializes a new instance of the <see cref="T:DLaB.Xrm.Test.Builders.ServiceProviderBuilderBase`1" /> class.
            </summary>
            <param name="service">The service.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.ServiceProviderBuilderBase`1.#ctor(Microsoft.Xrm.Sdk.IOrganizationService,Microsoft.Xrm.Sdk.IPluginExecutionContext,DLaB.Xrm.Test.ITestLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:DLaB.Xrm.Test.Builders.ServiceProviderBuilderBase`1" /> class.
            </summary>
            <param name="service">The service.</param>
            <param name="context">The context.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.ServiceProviderBuilderBase`1.#ctor(Microsoft.Xrm.Sdk.IOrganizationService,Microsoft.Xrm.Sdk.IPluginExecutionContext,Microsoft.Xrm.Sdk.ITracingService)">
            <summary>
            Initializes a new instance of the <see cref="T:DLaB.Xrm.Test.Builders.ServiceProviderBuilderBase`1" /> class.
            </summary>
            <param name="service">The service.</param>
            <param name="context">The context.</param>
            <param name="trace">The tracing service.</param>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.ServiceProviderBuilderBase`1.WithContext(Microsoft.Xrm.Sdk.IPluginExecutionContext)">
            <summary>
            Causes the Build Service provider to have the given context.
            </summary>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.ServiceProviderBuilderBase`1.WithoutClone``1">
            <summary>
            The build method will clone all services.  This call will prevent the given service from being cloned on build.
            </summary>
            <typeparam name="TService"></typeparam>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.ServiceProviderBuilderBase`1.WithoutClone(System.Type)">
            <summary>
            The build method will clone all services.  This call will prevent the given service from being cloned on build.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.ServiceProviderBuilderBase`1.WithService(Microsoft.Xrm.Sdk.IOrganizationService)">
            <summary>
            Causes the Build Service provider to have an IOrganizationServiceFactory that returns the given service.
            </summary>
            <param name="service">The service.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.ServiceProviderBuilderBase`1.WithService(Microsoft.Xrm.Sdk.IOrganizationService,System.Guid,System.Boolean)">
            <summary>
            Causes the Build Service provider to have an IOrganizationServiceFactory that returns the given service.
            </summary>
            <param name="service">The service.</param>
            <param name="userId">The user identifier.</param>
            <param name="setWhoAmIUserId">if set to <c>true</c> wraps service with a WhoAmI of the current user.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.ServiceProviderBuilderBase`1.WithService``1(``0)">
            <summary>
            Causes the Build Service provider to have the given service.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="service">The service.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.ServiceProviderBuilderBase`1.Build">
            <summary>
            Builds a Cloned version of the Service Provider.
            </summary>
            <returns></returns>
        </member>
        <member name="T:DLaB.Xrm.Test.Builders.WorkflowInvokerBuilder">
            <summary>
            Default Workflow Builder Implementation.  
            </summary>
        </member>
        <member name="P:DLaB.Xrm.Test.Builders.WorkflowInvokerBuilder.This">
            <summary>
            Gets the Workflow Invoker Builder of the derived Class.
            </summary>
            <value>
            The this.
            </value>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.WorkflowInvokerBuilder.#ctor(System.Activities.Activity)">
            <summary>
            Initializes a new instance of the <see cref="T:DLaB.Xrm.Test.Builders.WorkflowInvokerBuilder"/> class.
            </summary>
            <param name="workflow">The workflow to invoke.</param>
        </member>
        <member name="T:DLaB.Xrm.Test.Builders.WorkflowInvokerBuilderBase`1">
            <summary>
            Abstract Builder to allow for Derived Types to be created
            </summary>
            <typeparam name="TDerived">The type of the derived.</typeparam>
        </member>
        <member name="P:DLaB.Xrm.Test.Builders.WorkflowInvokerBuilderBase`1.This">
            <summary>
            Gets the derived version of the class.
            </summary>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.WorkflowInvokerBuilderBase`1.#ctor(System.Activities.Activity)">
            <summary>
            Initializes a new instance of the <see cref="T:DLaB.Xrm.Test.Builders.WorkflowInvokerBuilder"/> class.
            </summary>
            <param name="workflow">The workflow to invoke.</param>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.WorkflowInvokerBuilderBase`1.#ctor(System.Activities.Activity,DLaB.Xrm.Test.ITestLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:DLaB.Xrm.Test.Builders.WorkflowInvokerBuilder" /> class.
            </summary>
            <param name="workflow">The workflow to invoke.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.WorkflowInvokerBuilderBase`1.GetGenericTypePropertyValue(System.Object,System.Type,System.String)">
            <summary>
            Reflectively gets the value of the Generic Property.  Returns null if the expectedClassName or propertyName are different or not found
            </summary>
            <param name="obj">The object.</param>
            <param name="expectedType">Expected Type of the obj.</param>
            <param name="propertyName">Name of the property.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.WorkflowInvokerBuilderBase`1.WithService(Microsoft.Xrm.Sdk.IOrganizationService)">
            <summary>
            Defines the Service of the Context passed into the Invoked Workflow
            </summary>
            <param name="service">The service.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.WorkflowInvokerBuilderBase`1.WithService(Microsoft.Xrm.Sdk.ITracingService)">
            <summary>
            Defines the TracingService of the Context passed into the Invoked Workflow
            </summary>
            <param name="service">The service.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.WorkflowInvokerBuilderBase`1.WithContext(Microsoft.Xrm.Sdk.Workflow.IWorkflowContext)">
            <summary>
            Defines the Workflow Context of the Activity Context passed into the Invoked Workflow.
            </summary>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.WorkflowInvokerBuilderBase`1.Build">
            <summary>
            Builds this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.Builders.WorkflowInvokerBuilderBase`1.InvokeWorkflow(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Invokes the workflow, populating the InArguments.
            </summary>
            <param name="inputParams">The input parameters.</param>
            <returns></returns>
        </member>
        <member name="T:DLaB.Xrm.Test.EntityDependency">
            <summary>
            Manages which entities are dependent on which other entities.  This is then used to determine the order in which the entities must be deleted
            NOTE: It utilizes the properties of the earlybound entity classes, so if the entity is not an earlybound type, it probably won't work.
            </summary>
        </member>
        <member name="P:DLaB.Xrm.Test.EntityDependency.Mapper">
            <summary>
            Gets Singleton Mapper.  This exists as a singleton if multiple unit tests are run at one time, the Entity Dependency Map structure can be resused from previous tests
            </summary>
        </member>
        <member name="P:DLaB.Xrm.Test.EntityDependency.EntityCreationOrder">
            <summary>
            Gets the LogicalNames of Entities, in the order in which they can safely be created without causing an error caused by a relationship constraint i.e. Create entity without linked entities existing
            </summary>
            <value>
            The entity deletion order.
            </value>
        </member>
        <member name="P:DLaB.Xrm.Test.EntityDependency.EntityDeletionOrder">
            <summary>
            Gets the LogicalNames of Entities, in the order in which they can safely be deleted without causing an error caused by a relationship constraint i.e. Delete Contact before Opprotunity.
            </summary>
            <value>
            The entity deletion order.
            </value>
        </member>
        <member name="P:DLaB.Xrm.Test.EntityDependency.Log">
            <summary>
            Gets the log of the structuring of the DepedencyOrder
            </summary>
            <value>
            The log.
            </value>
        </member>
        <member name="M:DLaB.Xrm.Test.EntityDependency.Add(System.String)">
            <summary>
            Adds the specified logical name to the collection of entities that are mapped.  Entities are cached so no work is performed when an entity type is added a second time
            </summary>
            <param name="logicalName">Name of the logical.</param>
        </member>
        <member name="M:DLaB.Xrm.Test.EntityDependency.SingleThreadAdd(System.String)">
            <summary>
            Runs in the Context of a lock, and therefor can contain non thread safe calls.
            </summary>
            <param name="logicalName">Name of the logical.</param>
        </member>
        <member name="M:DLaB.Xrm.Test.EntityDependency.PopulateNewOrder(System.Collections.Generic.LinkedList{DLaB.Xrm.Test.EntityDependency.EntityDependencyNodeInfo},DLaB.Xrm.Test.EntityDependency.EntityDependencyNodeInfo)">
            <summary>
            Recursively Populates the new order.
            </summary>
            <param name="newOrder">The new order.</param>
            <param name="type">The type.</param>
            <exception cref="T:System.ArgumentException">Cyclic dependency found.</exception>
        </member>
        <member name="M:DLaB.Xrm.Test.EntityDependency.GetEntityCreationOrder">
            <summary>
            Gets the entity creation order.
            </summary>
            <returns></returns>
        </member>
        <member name="P:DLaB.Xrm.Test.EntityDependency.EntityDependencyNodeInfo.Dependencies">
            <summary>
            Dictionary with the list of attributes whose value must exist before the entity does, keyed by logical name of the type of attribute
            </summary>
            <value>
            The dependents.
            </value>
        </member>
        <member name="P:DLaB.Xrm.Test.EntityDependency.EntityDependencyNodeInfo.IsCurrentlyBeingProcessed">
            <summary>
            Gets or sets a value indicating whether this instance is currently being processed.
            </summary>
            <value>
            <c>true</c> if this instance is currently being processed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:DLaB.Xrm.Test.EntityDependency.EntityDependencyNodeInfo.DependsOn(DLaB.Xrm.Test.EntityDependency.EntityDependencyNodeInfo)">
            <summary>
            Returns true if the Entity Dependency Info depends on given Entity Dependency Info.
            </summary>
            <param name="nodeInfo">The info to check to see if it is a dependency.</param>
            <returns></returns>
        </member>
        <member name="P:DLaB.Xrm.Test.EntityDependency.EntityDependencyRelationship.IsCurrentlyCyclic">
            <summary>
            Gets or sets a value indicating whether this instance is currently cyclic.  Cyclic Attributes will not be included in the create, but then updated post create
            </summary>
            <value>
            <c>true</c> if this instance is currently cyclic; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:DLaB.Xrm.Test.EntityDependency.EntityDependencyRelationship.IsRequired">
            <summary>
            Required Dependencies have to exist before the child does.
            </summary>
            <value>
            <c>true</c> if this instance is required; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:DLaB.Xrm.Test.EntityDependencyInfo">
            <summary>
            Contains the logical name of an entity and it's list of CyclicAttributes 
            </summary>
        </member>
        <member name="P:DLaB.Xrm.Test.EntityDependencyInfo.LogicalName">
            <summary>
            Gets the name of the logical.
            </summary>
            <value>
            The name of the logical.
            </value>
        </member>
        <member name="P:DLaB.Xrm.Test.EntityDependencyInfo.CyclicAttributes">
            <summary>
            Gets the cyclic attributes.
            </summary>
            <value>
            The cyclic attributes.
            </value>
        </member>
        <member name="M:DLaB.Xrm.Test.EntityDependencyInfo.#ctor(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:DLaB.Xrm.Test.EntityDependencyInfo" /> class.
            </summary>
            <param name="name">The name.</param>
            <param name="cyclicAttributes">The cyclic attributes.</param>
        </member>
        <member name="T:DLaB.Xrm.Test.Exceptions.CreationFailureException">
            <summary>
            Exception Type for when an EnvironmentBuilder.Create action is performed and an exception occurs
            /// </summary>
        </member>
        <member name="P:DLaB.Xrm.Test.Exceptions.CreationFailureException.Message">
            <summary>
            Gets a message that describes the current exception.
            </summary>
        </member>
        <member name="M:DLaB.Xrm.Test.Exceptions.CreationFailureException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DLaB.Xrm.Test.Exceptions.CreationFailureException"/> class.
            </summary>
        </member>
        <member name="M:DLaB.Xrm.Test.Exceptions.CreationFailureException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DLaB.Xrm.Test.Exceptions.CreationFailureException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:DLaB.Xrm.Test.Exceptions.CreationFailureException.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:DLaB.Xrm.Test.Exceptions.CreationFailureException"/> class.
            </summary>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:DLaB.Xrm.Test.Exceptions.CreationFailureException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:DLaB.Xrm.Test.Exceptions.CreationFailureException"/> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:DLaB.Xrm.Test.Exceptions.NotConfiguredException">
            <summary>
            Exception Type for when a unit test action is performed, that is depedent on a configuration that is not configured
            </summary>
        </member>
        <member name="M:DLaB.Xrm.Test.Exceptions.NotConfiguredException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DLaB.Xrm.Test.Exceptions.NotConfiguredException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:DLaB.Xrm.Test.Exceptions.NotConfiguredException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:DLaB.Xrm.Test.Exceptions.NotConfiguredException"/> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:DLaB.Xrm.Test.Extensions">
            <summary>
            Exteion Class for Xrm Tests
            </summary>
        </member>
        <member name="M:DLaB.Xrm.Test.Extensions.GetIdFields``1">
            <summary>
            Returns the Guid Fields declared by the given Struct Type
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.Extensions.GetExecutedQueryExpressions(System.Action{Microsoft.Xrm.Sdk.IOrganizationService})">
            <summary>
            Executes the given action, returning a list of Query Expressions that would have been executed against the server.
            If the action does something with the results of the query expression, it most likely will fail. i.e. retrieves an entity,
            then uses that entity's id to update another entity
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.Extensions.AddOrEnqueue``2(System.Collections.Generic.Dictionary{``0,System.Collections.Generic.Queue{``1}},``0,``1)">
            <summary>
            Looks up the queue for the given key, enqueuing the value if the queue is found, or creating a new queue and enqueuing
            the value to that queue.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dict"></param>
            <param name="key">The key value to lookup and enqeue the value to the queue of</param>
            <param name="value">Value to enqueue</param>
        </member>
        <member name="M:DLaB.Xrm.Test.Extensions.AddOrEnqueue``2(System.Collections.Generic.Dictionary{``0,System.Collections.Generic.Queue{``1}},``0,``1[])">
            <summary>
            Looks up the queue for the given key, enqueuing the values if the queue is found, or creating a new queue and enqueuing
            the values to that queue.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dict"></param>
            <param name="key">The key value to lookup and enqeue the values to the queue of</param>
            <param name="values">Values to enqueue</param>
        </member>
        <member name="M:DLaB.Xrm.Test.Extensions.AddOrEnqueue``2(System.Collections.Generic.Dictionary{``0,System.Collections.Generic.Queue{``1}},``0,System.Collections.Generic.Dictionary{``0,System.Collections.Generic.List{``1}})">
            <summary>
            Looks up the queue for the given key, enqueuing the values if the queue is found, or creating a new queue and enqueuing
            the values to that queue.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dict"></param>
            <param name="key">The key value to lookup and add the values to the list of</param>
            <param name="dictionaryList">Values to enqueue</param>
        </member>
        <member name="M:DLaB.Xrm.Test.Extensions.AddOrAppend(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.Guid}},DLaB.Xrm.Test.Id[])">
            <summary>
            Looks up the list for the given key, adding the value if the list is found, or creating a new list and adding
            the value to that list if the list is not found.
            </summary>
            <param name="dict"></param>
            <param name="ids"></param>
        </member>
        <member name="M:DLaB.Xrm.Test.Extensions.AddOrAppend``1(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.Guid}},System.Guid[])">
            <summary>
            Used the Entity Logical Name of the Entity Type to lookup the list in the dictionary, and 
            adds the given values to the list, 
            or 
            creates a new list and adds the values to that list if the list isn't found
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="dict"></param>
            <param name="guids">Values to add to the list</param>
        </member>
        <member name="M:DLaB.Xrm.Test.Extensions.AddOrAppend``2(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.Guid}})">
            <summary>
            Used the Entity Logical Name of the Entity Type to lookup the list in the dictionary, and 
            adds all static properties of the given struct to the list, 
            or 
            creates a new list and adds the values to that list if the list isn't found
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TStruct"></typeparam>
            <param name="dict"></param>
        </member>
        <member name="M:DLaB.Xrm.Test.Extensions.AddOrEnqueue(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.Queue{System.Guid}},DLaB.Xrm.Test.Id[])">
            <summary>
            Looks up the queue for the given key, enqueuing the values if the queue is found, or creating a new queue and enqueuing
            the values to that queue.
            </summary>
            <param name="dict"></param>
            <param name="ids">The Ids to Enqueue</param>
        </member>
        <member name="M:DLaB.Xrm.Test.Extensions.AddOrEnqueue``1(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.Queue{System.Guid}},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.Guid}})">
            <summary>
            Looks up the queue given the EntityLogical name of the TEntity, enqueuing the values if the queue is found, or creating a new queue and enqueuing
            the values to that queue.
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="dict"></param>
            <param name="dictionaryList">Values to enqueue</param>
        </member>
        <member name="M:DLaB.Xrm.Test.Extensions.Reload``1(``0,Microsoft.Xrm.Sdk.IOrganizationService)">
            <summary>
            Reloads the attributes from CRM
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
            <param name="service"></param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.Extensions.SetValueIfNull``2(``0,System.Linq.Expressions.Expression{System.Func{``0,Microsoft.Xrm.Sdk.OptionSetValue}},System.Nullable{``1},System.Boolean)">
            <summary>
            Assigns the OptionSetProperty if the attribute name of the property is not already in the 
            Attributes collection, and the enumValue is not null if set to Null is false
            </summary>
            <param name="entity"></param>
            <param name="propertyExpression">In the form of e =&gt; e.OptionSetProperty</param>
            <param name="enumValue"></param>
            <param name="setToNull"></param>
        </member>
        <member name="M:DLaB.Xrm.Test.Extensions.SetValueIfNull``1(``0,System.Linq.Expressions.Expression{System.Func{``0,Microsoft.Xrm.Sdk.EntityReference}},Microsoft.Xrm.Sdk.EntityReference)">
            <summary>
            Assigns the EntityReference if the attribute name of the property is not already in the 
            Attributes collection, and the EntityReference is not null and the entity reference id is not empty
            </summary>
            <param name="entity"></param>
            <param name="propertyExpression">In the form of e =&gt; e.OptionSetProperty</param>
            <param name="entityReference"></param>
        </member>
        <member name="M:DLaB.Xrm.Test.Extensions.SetValueIfNull``1(``0,System.Linq.Expressions.Expression{System.Func{``0,Microsoft.Xrm.Sdk.EntityReference}},Microsoft.Xrm.Sdk.Entity)">
            <summary>
            Assigns the OptionSetProperty if the attribute name of the property is not already in the 
            Attributes collection, and the enumValue is not null
            </summary>
            <param name="entity"></param>
            <param name="propertyExpression">In the form of e =&gt; e.OptionSetProperty</param>
            <param name="value"></param>
        </member>
        <member name="M:DLaB.Xrm.Test.Extensions.SetValueIfNull``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},``1,System.Boolean)">
            <summary>
            Assigns the Attribute if the attribute name of the property is not already in the 
            Attributes collection, and the value passed in is not null if set to null is false
            </summary>
            <param name="entity"></param>
            <param name="propertyExpression">In the form of e =&gt; e.OptionSetProperty</param>
            <param name="value"></param>
            <param name="setToNull"></param>
        </member>
        <member name="M:DLaB.Xrm.Test.Extensions.ContainsAllFieldsInEntity``1(``0,``0)">
            <summary>
            Determines whether the current entity's field set contains at least the entire set of the given entity's field set
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity">The entity.</param>
            <param name="compareEntity">The compare entity.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.Extensions.Associate``2(Microsoft.Xrm.Sdk.IOrganizationService,DLaB.Xrm.Test.Id{``0},System.String,DLaB.Xrm.Test.Id{``1}[])">
            <summary>
            Creates a link between records.
            </summary>
            <param name="service">The Service</param>
            <param name="entity">The record to which the related records are associated.</param>
            <param name="relationshipLogicalName">The name of the relationship to be used to create the link.</param>
            <param name="ids">Microsoft.Xrm.Sdk.EntityReferenceCollection. A collection of entity references (references to records) to be associated.</param>
        </member>
        <member name="M:DLaB.Xrm.Test.Extensions.Associate(Microsoft.Xrm.Sdk.IOrganizationService,DLaB.Xrm.Test.Id,System.String,DLaB.Xrm.Test.Id[])">
            <summary>
            Creates a link between records.
            </summary>
            <param name="service">The Service</param>
            <param name="entity">The record to which the related records are associated.</param>
            <param name="relationshipLogicalName">The name of the relationship to be used to create the link.</param>
            <param name="ids">Microsoft.Xrm.Sdk.EntityReferenceCollection. A collection of entity references (references to records) to be associated.</param>
        </member>
        <member name="M:DLaB.Xrm.Test.Extensions.Delete(Microsoft.Xrm.Sdk.IOrganizationService,DLaB.Xrm.Test.Id)">
            <summary>
            Deletes the specified entity
            </summary>
            <param name="service">The service.</param>
            <param name="entity">The entity to be deleted.</param>
        </member>
        <member name="M:DLaB.Xrm.Test.Extensions.Delete``1(Microsoft.Xrm.Sdk.IOrganizationService,DLaB.Xrm.Test.Id{``0})">
            <summary>
            Deletes the specified entity
            </summary>
            <param name="service">The service.</param>
            <param name="entity">The entity to be deleted.</param>
        </member>
        <member name="M:DLaB.Xrm.Test.Extensions.DeleteBusinessUnit(Microsoft.Xrm.Sdk.IOrganizationService,System.Guid)">
            <summary>
            Handles deleting the business unit by first disabling it.
            </summary>
            <param name="service">The service.</param>
            <param name="businessUnitId">The business unit identifier.</param>
        </member>
        <member name="M:DLaB.Xrm.Test.Extensions.Disassociate``2(Microsoft.Xrm.Sdk.IOrganizationService,DLaB.Xrm.Test.Id{``0},System.String,DLaB.Xrm.Test.Id{``1}[])">
            <summary>
            Deletes a link between records.
            </summary>
            <param name="service">The Service</param>
            <param name="entity">The record to which the related records are associated.</param>
            <param name="relationshipLogicalName">The name of the relationship to be used to delete the link.</param>
            <param name="ids">Microsoft.Xrm.Sdk.EntityReferenceCollection. A collection of entity references (references to records) to be disassociated.</param>
        </member>
        <member name="M:DLaB.Xrm.Test.Extensions.Disassociate(Microsoft.Xrm.Sdk.IOrganizationService,DLaB.Xrm.Test.Id,System.String,DLaB.Xrm.Test.Id[])">
            <summary>
            Deletes a link between records.
            </summary>
            <param name="service">The Service</param>
            <param name="entity">The record to which the related records are associated.</param>
            <param name="relationshipLogicalName">The name of the relationship to be used to delete the link.</param>
            <param name="ids">Microsoft.Xrm.Sdk.EntityReferenceCollection. A collection of entity references (references to records) to be disassociated.</param>
        </member>
        <member name="M:DLaB.Xrm.Test.Extensions.GetEntity``1(Microsoft.Xrm.Sdk.IOrganizationService,DLaB.Xrm.Test.Id{``0})">
            <summary>
            Retrieves the Entity for the given Id, with all columns
            </summary>
            <typeparam name="T">An early bound Entity Type</typeparam>
            <param name="service">open IOrganizationService</param>
            <param name="id">Typed Id</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.Extensions.GetEntity``1(Microsoft.Xrm.Sdk.IOrganizationService,DLaB.Xrm.Test.Id{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Retrieves the Entity for the given Id, with the columns specified in the anonymousTypeInitializer
            </summary>
            <typeparam name="T">An early bound Entity Type</typeparam>
            <param name="service">open IOrganizationService</param>
            <param name="id">Typed Id</param>
            <param name="anonymousTypeInitializer">An Anonymous Type Initializer where the properties of the anonymous
            type are the column names to add</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.Extensions.IsLocalCrmService(Microsoft.Xrm.Sdk.IOrganizationService)">
            <summary>
            Determines whether the giving serivce is a Local Crm Service.
            </summary>
            <param name="service">The service.</param>
            <returns></returns> 
        </member>
        <member name="M:DLaB.Xrm.Test.Extensions.GetOrganizationKey(Microsoft.Xrm.Sdk.IOrganizationService)">
            <summary>
            Returns a unique string key for the given IOrganizationService
            If the service is remote, the uri will be used, including the org Name
            If the service is on the server (i.e. plugin), the org id will be used
            </summary>
            <param name="service"></param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.Extensions.MockOrDefault(Microsoft.Xrm.Sdk.IOrganizationService,System.String,System.Guid,Microsoft.Xrm.Sdk.Query.ColumnSet,Microsoft.Xrm.Sdk.Entity)">
            <summary>
            Will return the mocked entity, when the Id of the entity is searched for in a Retrieve, and all Columns in the columnset
            are present in the mocked entity.
            </summary>
            <param name="service"></param>
            <param name="logicalName"></param>
            <param name="id"></param>
            <param name="set"></param>
            <param name="mockedEntity"></param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.Extensions.MockOrDefault(Microsoft.Xrm.Sdk.IOrganizationService,Microsoft.Xrm.Sdk.Query.QueryBase,System.Action{Microsoft.Xrm.Sdk.IOrganizationService},Microsoft.Xrm.Sdk.Entity)">
            <summary>
            Uses the methodToMock if the call should be mocked.  If the Query Expression in the qb matches the QueryExpression generated by methodToMock,
            the mocked Entity will be returned, else the Query will execute as normal.
            </summary>
            <param name="s">The service.</param>
            <param name="qb">The Query Base.</param>
            <param name="methodToMock">The method to mock.</param>
            <param name="mockedEntity">The mocked entity.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.Extensions.MockOrDefault(Microsoft.Xrm.Sdk.IOrganizationService,Microsoft.Xrm.Sdk.Query.QueryBase,System.Func{Microsoft.Xrm.Sdk.Query.QueryExpression,System.Boolean},Microsoft.Xrm.Sdk.Entity)">
            <summary>
            Uses useMock to determine if the call should be mocked.  If useMock returns true,
            the mocked Entity will be returned, else the Query will execute as normal.
            </summary>
            <param name="s">The service.</param>
            <param name="qb">The Query Base.</param>
            <param name="useMock">Func to determine if the given Query Expression should be mocked.</param>
            <param name="mockedEntity">The mocked entity.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.Extensions.MockOrDefault(Microsoft.Xrm.Sdk.IOrganizationService,Microsoft.Xrm.Sdk.Query.QueryBase,System.Action{Microsoft.Xrm.Sdk.IOrganizationService},System.Collections.Generic.IEnumerable{Microsoft.Xrm.Sdk.Entity})">
            <summary>
            Uses the methodtoMock to if the call should be mocked.  If the Query Expression in the qb matches the QueryExpression generated by methodToMock,
            the mocked entities will be returned, else the Query will execute as normal.
            </summary>
            <param name="s">The service.</param>
            <param name="qb">The Query Base.</param>
            <param name="methodToMock">The method to mock.</param>
            <param name="mockedEntities">The mocked entities to return.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.Extensions.MockOrDefault(Microsoft.Xrm.Sdk.IOrganizationService,Microsoft.Xrm.Sdk.Query.QueryBase,System.Func{Microsoft.Xrm.Sdk.Query.QueryExpression,System.Boolean},System.Collections.Generic.IEnumerable{Microsoft.Xrm.Sdk.Entity})">
            <summary>
            Uses useMock to determine if the call should be mocked.  If useMock returns true,
            the mocked entities will be returned, else the Query will execute as normal.
            </summary>
            <param name="s">The service.</param>
            <param name="qb">The Query Base.</param>
            <param name="useMock">Func to determine if the given Query Expression should be mocked.</param>
            <param name="mockedEntities">The mocked entities.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.Extensions.MockOrDefault(Microsoft.Xrm.Sdk.IOrganizationService,Microsoft.Xrm.Sdk.Query.QueryBase,System.Action{Microsoft.Xrm.Sdk.IOrganizationService},Microsoft.Xrm.Sdk.Entity[])">
            <summary>
            Uses the methodtoMock to if the call should be mocked.  If the Query Expression in the qb matches the QueryExpression generated by methodToMock,
            the mocked entities will be returned, else the Query will execute as normal.
            </summary>
            <param name="s">The service.</param>
            <param name="qb">The Query Base.</param>
            <param name="methodToMock">The method to mock.</param>
            <param name="mockedEntities">The mocked entities to return.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.Extensions.MockOrDefault(Microsoft.Xrm.Sdk.IOrganizationService,Microsoft.Xrm.Sdk.Query.QueryBase,System.Func{Microsoft.Xrm.Sdk.Query.QueryExpression,System.Boolean},Microsoft.Xrm.Sdk.Entity[])">
            <summary>
            Uses useMock to determine if the call should be mocked.  If useMock returns true,
            the mocked entities will be returned, else the Query will execute as normal.
            </summary>
            <param name="s">The service.</param>
            <param name="qb">The Query Base.</param>
            <param name="useMock">Func to determine if the given Query Expression should be mocked.</param>
            <param name="mockedEntities">The mocked entities.</param>
        </member>
        <member name="M:DLaB.Xrm.Test.Extensions.GetRequest``1(System.IServiceProvider)">
            <summary>
            Loads the given OrganizationRequest from the input parameters of the IPluginExecutionContext.
            </summary>
            <param name="provider"></param>
            <typeparam name="T">Organization Response</typeparam>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.Extensions.GetResponse``1(System.IServiceProvider)">
            <summary>
            Loads the given OrganizationResponse from the output parameters of the IPluginExecutionContext.
            </summary>
            <param name="provider"></param>
            <typeparam name="T">Organization Response</typeparam>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.Extensions.GetFake``1(System.IServiceProvider)">
            <summary>
            Retrieves the Fake Service from the Service Provider
            </summary>
            <typeparam name="TFake">The Fake Service to retrieve.  Must implement IServiceFaked&lt;&gt;></typeparam>
            <param name="provider">The Provider</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.Extensions.GetFakedInterface(System.Type)">
            <summary>
            Gets the generic type of the first IServiceFaked interface defined in the type hierarchy
            </summary>
            <param name="T">The Type</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.Extensions.ThrowIfNull(System.Object,System.String)">
            <summary>
            Shortcut for throwing a ArgumentNullException
            </summary>
            <param name="data">The data.</param>
            <param name="name">The name.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:DLaB.Xrm.Test.Extensions.GetValue(System.Reflection.FieldInfo)">
            <summary>
            Gets the Id value of the field.  It is very easy to declare an Id&lt;Entity&gt;, but this isn't valid
            This will make the error much more readable and understandable
            </summary>
            <param name="field">The field.</param>
            <returns></returns>
        </member>
        <member name="T:DLaB.Xrm.Test.FakeExecutionContext">
            <summary>
            Fake Execution Context that implements IExecutionContext
            </summary>
        </member>
        <member name="P:DLaB.Xrm.Test.FakeExecutionContext.Mode">
            <summary>
            Gets or sets the mode.
            </summary>
            <value>
            The mode.
            </value>
        </member>
        <member name="P:DLaB.Xrm.Test.FakeExecutionContext.IsolationMode">
            <summary>
            Gets or sets the isolation mode.
            </summary>
            <value>
            The isolation mode.
            </value>
        </member>
        <member name="P:DLaB.Xrm.Test.FakeExecutionContext.Depth">
            <summary>
            Gets or sets the depth.
            </summary>
            <value>
            The depth.
            </value>
        </member>
        <member name="P:DLaB.Xrm.Test.FakeExecutionContext.MessageName">
            <summary>
            Gets or sets the name of the message.
            </summary>
            <value>
            The name of the message.
            </value>
        </member>
        <member name="P:DLaB.Xrm.Test.FakeExecutionContext.PrimaryEntityName">
            <summary>
            Gets or sets the name of the primary entity.
            </summary>
            <value>
            The name of the primary entity.
            </value>
        </member>
        <member name="P:DLaB.Xrm.Test.FakeExecutionContext.RequestId">
            <summary>
            Gets or sets the request identifier.
            </summary>
            <value>
            The request identifier.
            </value>
        </member>
        <member name="P:DLaB.Xrm.Test.FakeExecutionContext.SecondaryEntityName">
            <summary>
            Gets or sets the name of the secondary entity.
            </summary>
            <value>
            The name of the secondary entity.
            </value>
        </member>
        <member name="P:DLaB.Xrm.Test.FakeExecutionContext.InputParameters">
            <summary>
            Gets or sets the input parameters.
            </summary>
            <value>
            The input parameters.
            </value>
        </member>
        <member name="P:DLaB.Xrm.Test.FakeExecutionContext.OutputParameters">
            <summary>
            Gets or sets the output parameters.
            </summary>
            <value>
            The output parameters.
            </value>
        </member>
        <member name="P:DLaB.Xrm.Test.FakeExecutionContext.SharedVariables">
            <summary>
            Gets or sets the shared variables.
            </summary>
            <value>
            The shared variables.
            </value>
        </member>
        <member name="P:DLaB.Xrm.Test.FakeExecutionContext.UserId">
            <summary>
            Gets or sets the user identifier.
            </summary>
            <value>
            The user identifier.
            </value>
        </member>
        <member name="P:DLaB.Xrm.Test.FakeExecutionContext.InitiatingUserId">
            <summary>
            Gets or sets the initiating user identifier.
            </summary>
            <value>
            The initiating user identifier.
            </value>
        </member>
        <member name="P:DLaB.Xrm.Test.FakeExecutionContext.BusinessUnitId">
            <summary>
            Gets or sets the business unit identifier.
            </summary>
            <value>
            The business unit identifier.
            </value>
        </member>
        <member name="P:DLaB.Xrm.Test.FakeExecutionContext.OrganizationId">
            <summary>
            Gets or sets the organization identifier.
            </summary>
            <value>
            The organization identifier.
            </value>
        </member>
        <member name="P:DLaB.Xrm.Test.FakeExecutionContext.OrganizationName">
            <summary>
            Gets or sets the name of the organization.
            </summary>
            <value>
            The name of the organization.
            </value>
        </member>
        <member name="P:DLaB.Xrm.Test.FakeExecutionContext.PrimaryEntityId">
            <summary>
            Gets or sets the primary entity identifier.
            </summary>
            <value>
            The primary entity identifier.
            </value>
        </member>
        <member name="P:DLaB.Xrm.Test.FakeExecutionContext.PreEntityImages">
            <summary>
            Gets or sets the pre entity images.
            </summary>
            <value>
            The pre entity images.
            </value>
        </member>
        <member name="P:DLaB.Xrm.Test.FakeExecutionContext.PostEntityImages">
            <summary>
            Gets or sets the post entity images.
            </summary>
            <value>
            The post entity images.
            </value>
        </member>
        <member name="P:DLaB.Xrm.Test.FakeExecutionContext.OwningExtension">
            <summary>
            Gets or sets the owning extension.
            </summary>
            <value>
            The owning extension.
            </value>
        </member>
        <member name="P:DLaB.Xrm.Test.FakeExecutionContext.CorrelationId">
            <summary>
            Gets or sets the correlation identifier.
            </summary>
            <value>
            The correlation identifier.
            </value>
        </member>
        <member name="P:DLaB.Xrm.Test.FakeExecutionContext.IsExecutingOffline">
            <summary>
            Gets or sets a value indicating whether this instance is executing offline.
            </summary>
            <value>
            <c>true</c> if this instance is executing offline; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:DLaB.Xrm.Test.FakeExecutionContext.IsOfflinePlayback">
            <summary>
            Gets or sets a value indicating whether this instance is offline playback.
            </summary>
            <value>
            <c>true</c> if this instance is offline playback; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:DLaB.Xrm.Test.FakeExecutionContext.IsInTransaction">
            <summary>
            Gets or sets a value indicating whether this instance is in transaction.
            </summary>
            <value>
            <c>true</c> if this instance is in transaction; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:DLaB.Xrm.Test.FakeExecutionContext.OperationId">
            <summary>
            Gets or sets the operation identifier.
            </summary>
            <value>
            The operation identifier.
            </value>
        </member>
        <member name="P:DLaB.Xrm.Test.FakeExecutionContext.OperationCreatedOn">
            <summary>
            Gets or sets the operation created on.
            </summary>
            <value>
            The operation created on.
            </value>
        </member>
        <member name="M:DLaB.Xrm.Test.FakeExecutionContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DLaB.Xrm.Test.FakeExecutionContext" /> class.
            </summary>
        </member>
        <member name="M:DLaB.Xrm.Test.FakeExecutionContext.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.FakeExecutionContext.CloneReferenceValues(DLaB.Xrm.Test.FakeExecutionContext)">
            <summary>
            Clones the reference values.
            </summary>
            <param name="clone">The clone.</param>
        </member>
        <member name="T:DLaB.Xrm.Test.FakeIOrganizationService">
            <summary>
            Class that uses a real OrganizationServiceProxy under the covers, but allows for injection of
            different code for faking data in the database.
             
            Example Use Case that will return a new empty system user for queryexpression that is for System Users
            else, executes the query and returns the results as normal:                
            using (var proxy = GetOrganizationServiceProxy())
            {
                var service = new FakeIOrganizationService(proxy)
                {
                    RetrieveMultipleFunc = (s, qb) => { 
                        if(((qb) as QueryExpression).EntityName == SystemUser.EntityLogicalName)
                        {
                            var c = new EntityCollection();
                            c.Entities.Add(new SystemUser());
                            return c;
                        }
                        else
                        {
                            return s.RetrieveMultiple(qb);    
                        }
                    }
                };
            }
            </summary>
        </member>
        <member name="P:DLaB.Xrm.Test.FakeIOrganizationService.AssociateAction">
            <summary>
            Gets or sets the associate action.
            </summary>
            <value>
            The associate action.
            </value>
        </member>
        <member name="P:DLaB.Xrm.Test.FakeIOrganizationService.AssociateActions">
            <summary>
            Gets or sets the associate actions.
            </summary>
            <value>
            The associate actions.
            </value>
        </member>
        <member name="P:DLaB.Xrm.Test.FakeIOrganizationService.CreateFunc">
            <summary>
            Gets or sets the create function.
            </summary>
            <value>
            The create function.
            </value>
        </member>
        <member name="P:DLaB.Xrm.Test.FakeIOrganizationService.CreateFuncs">
            <summary>
            Gets or sets the create funcs.
            </summary>
            <value>
            The create funcs.
            </value>
        </member>
        <member name="P:DLaB.Xrm.Test.FakeIOrganizationService.DeleteAction">
            <summary>
            Gets or sets the delete action.
            </summary>
            <value>
            The delete action.
            </value>
        </member>
        <member name="P:DLaB.Xrm.Test.FakeIOrganizationService.DeleteActions">
            <summary>
            Gets or sets the delete actions.
            </summary>
            <value>
            The delete actions.
            </value>
        </member>
        <member name="P:DLaB.Xrm.Test.FakeIOrganizationService.DisassociateAction">
            <summary>
            Gets or sets the disassociate action.
            </summary>
            <value>
            The disassociate action.
            </value>
        </member>
        <member name="P:DLaB.Xrm.Test.FakeIOrganizationService.DisassociateActions">
            <summary>
            Gets or sets the disassociate actions.
            </summary>
            <value>
            The disassociate actions.
            </value>
        </member>
        <member name="P:DLaB.Xrm.Test.FakeIOrganizationService.ExecuteFunc">
            <summary>
            Gets or sets the execute function.
            </summary>
            <value>
            The execute function.
            </value>
        </member>
        <member name="P:DLaB.Xrm.Test.FakeIOrganizationService.ExecuteFuncs">
            <summary>
            Gets or sets the execute funcs.
            </summary>
            <value>
            The execute funcs.
            </value>
        </member>
        <member name="P:DLaB.Xrm.Test.FakeIOrganizationService.RetrieveMultipleFunc">
            <summary>
            Gets or sets the retrieve multiple function.
            </summary>
            <value>
            The retrieve multiple function.
            </value>
        </member>
        <member name="P:DLaB.Xrm.Test.FakeIOrganizationService.RetrieveMultipleFuncs">
            <summary>
            Gets or sets the retrieve multiple funcs.
            </summary>
            <value>
            The retrieve multiple funcs.
            </value>
        </member>
        <member name="P:DLaB.Xrm.Test.FakeIOrganizationService.RetrieveFunc">
            <summary>
            Gets or sets the retrieve function.
            </summary>
            <value>
            The retrieve function.
            </value>
        </member>
        <member name="P:DLaB.Xrm.Test.FakeIOrganizationService.RetrieveFuncs">
            <summary>
            Gets or sets the retrieve funcs.
            </summary>
            <value>
            The retrieve funcs.
            </value>
        </member>
        <member name="P:DLaB.Xrm.Test.FakeIOrganizationService.UpdateAction">
            <summary>
            Gets or sets the update action.
            </summary>
            <value>
            The update action.
            </value>
        </member>
        <member name="P:DLaB.Xrm.Test.FakeIOrganizationService.UpdateActions">
            <summary>
            Gets or sets the update actions.
            </summary>
            <value>
            The update actions.
            </value>
        </member>
        <member name="P:DLaB.Xrm.Test.FakeIOrganizationService.ExecutionTracingEnabled">
            <summary>
            Gets or sets a value indicating whether [execution tracing enabled].
            </summary>
            <value>
              <c>true</c> if [execution tracing enabled]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:DLaB.Xrm.Test.FakeIOrganizationService.RedirectExecuteRequestsToOrganizationServiceRequest">
            <summary>
            Changes calls to Execute with a RetrieveMultipleRequest to be a RetrieveMultple Call
            </summary>
            <value>
            <c>true</c> if [redirect execute retrieve multiple to retrieve multiple]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:DLaB.Xrm.Test.FakeIOrganizationService.ActualService">
            <summary>
            Reflectively walks the Service Path to find the first IOrganizationService that is not a FakeIOrganizationService
            Returns the highest level FakeIOrganizationService if every Service is of type FakeIOrganizationService
            </summary>
        </member>
        <member name="M:DLaB.Xrm.Test.FakeIOrganizationService.#ctor(Microsoft.Xrm.Sdk.IOrganizationService)">
            <summary>
            Initializes a new instance of the <see cref="T:DLaB.Xrm.Test.FakeIOrganizationService" /> class.
            </summary>
            <param name="service">The service.</param>
        </member>
        <member name="M:DLaB.Xrm.Test.FakeIOrganizationService.#ctor(Microsoft.Xrm.Sdk.IOrganizationService,DLaB.Xrm.Test.ITestLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:DLaB.Xrm.Test.FakeIOrganizationService" /> class.
            </summary>
            <param name="service">The service.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:DLaB.Xrm.Test.FakeIOrganizationService.Associate(System.String,System.Guid,Microsoft.Xrm.Sdk.Relationship,Microsoft.Xrm.Sdk.EntityReferenceCollection)">
            <summary>
            Creates a link between records.
            </summary>
            <param name="entityName">Name of the entity.</param>
            <param name="entityId">The entity identifier.</param>
            <param name="relationship">The relationship.</param>
            <param name="relatedEntities">The related entities.</param>
        </member>
        <member name="M:DLaB.Xrm.Test.FakeIOrganizationService.Create(Microsoft.Xrm.Sdk.Entity)">
            <summary>
            Creates the specified entity.
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.FakeIOrganizationService.Delete(System.String,System.Guid)">
            <summary>
            Deletes the specified entity.
            </summary>
            <param name="entityName">Name of the entity.</param>
            <param name="id">The identifier.</param>
        </member>
        <member name="M:DLaB.Xrm.Test.FakeIOrganizationService.Disassociate(System.String,System.Guid,Microsoft.Xrm.Sdk.Relationship,Microsoft.Xrm.Sdk.EntityReferenceCollection)">
            <summary>
            Removes a link between records.
            </summary>
            <param name="entityName">Name of the entity.</param>
            <param name="entityId">The entity identifier.</param>
            <param name="relationship">The relationship.</param>
            <param name="relatedEntities">The related entities.</param>
        </member>
        <member name="M:DLaB.Xrm.Test.FakeIOrganizationService.Execute(Microsoft.Xrm.Sdk.OrganizationRequest)">
            <summary>
            Executes the specified request.
            </summary>
            <param name="request">The request.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.FakeIOrganizationService.CallOrganizationServiceRequestForExecuteRequest(Microsoft.Xrm.Sdk.OrganizationRequest)">
            <summary>
            Rather than having to define mocks seperately for both RetrieveREquest and Retrieve, this will map the call to the correct OrganizationService Method.
            </summary>
            <param name="request">The request.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.FakeIOrganizationService.Retrieve(System.String,System.Guid,Microsoft.Xrm.Sdk.Query.ColumnSet)">
            <summary>
            Retrieves the specified entity name.
            </summary>
            <param name="entityName">Name of the entity.</param>
            <param name="id">The identifier.</param>
            <param name="columnSet">The column set.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.FakeIOrganizationService.RetrieveMultiple(Microsoft.Xrm.Sdk.Query.QueryBase)">
            <summary>
            Retrieves the entities defined by the Query.
            </summary>
            <param name="query">The query.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.FakeIOrganizationService.Update(Microsoft.Xrm.Sdk.Entity)">
            <summary>
            Updates the specified entity.
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="T:DLaB.Xrm.Test.FakeOrganizationServiceFactory">
            <summary>
            A Fake that implements IOrganizationServiceFactory
            </summary>
        </member>
        <member name="P:DLaB.Xrm.Test.FakeOrganizationServiceFactory.Services">
            <summary>
            Gets the services key'd by User Id.
            </summary>
            <value>
            The services.
            </value>
        </member>
        <member name="M:DLaB.Xrm.Test.FakeOrganizationServiceFactory.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DLaB.Xrm.Test.FakeOrganizationServiceFactory"/> class.
            </summary>
        </member>
        <member name="M:DLaB.Xrm.Test.FakeOrganizationServiceFactory.#ctor(Microsoft.Xrm.Sdk.IOrganizationService)">
            <summary>
            Initializes a new instance of the <see cref="T:DLaB.Xrm.Test.FakeOrganizationServiceFactory"/> class.
            </summary>
            <param name="service">The service.</param>
        </member>
        <member name="M:DLaB.Xrm.Test.FakeOrganizationServiceFactory.#ctor(System.Collections.Generic.Dictionary{System.Guid,Microsoft.Xrm.Sdk.IOrganizationService})">
            <summary>
            Initializes a new instance of the <see cref="T:DLaB.Xrm.Test.FakeOrganizationServiceFactory"/> class.
            </summary>
            <param name="services">The services.</param>
        </member>
        <member name="M:DLaB.Xrm.Test.FakeOrganizationServiceFactory.CreateOrganizationService(System.Nullable{System.Guid})">
            <summary>
            Creates the organization service.
            </summary>
            <param name="userId">The user identifier.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.FakeOrganizationServiceFactory.SetService(System.Nullable{System.Guid},Microsoft.Xrm.Sdk.IOrganizationService)">
            <summary>
            Sets the service for the given user.
            </summary>
            <param name="userId">The user identifier.</param>
            <param name="service">The service.</param>
        </member>
        <member name="T:DLaB.Xrm.Test.FakePluginExecutionContext">
            <summary>
            
            </summary>
        </member>
        <member name="P:DLaB.Xrm.Test.FakePluginExecutionContext.Stage">
            <summary>
            Gets or sets the stage.
            </summary>
            <value>
            The stage.
            </value>
        </member>
        <member name="P:DLaB.Xrm.Test.FakePluginExecutionContext.ParentContext">
            <summary>
            Gets or sets the parent context.
            </summary>
            <value>
            The parent context.
            </value>
        </member>
        <member name="M:DLaB.Xrm.Test.FakePluginExecutionContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DLaB.Xrm.Test.FakePluginExecutionContext"/> class.
            </summary>
        </member>
        <member name="M:DLaB.Xrm.Test.FakePluginExecutionContext.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="T:DLaB.Xrm.Test.FakeServiceProvider">
            <summary>
            A Fake that implements IServiceProvider
            </summary>
        </member>
        <member name="P:DLaB.Xrm.Test.FakeServiceProvider.TypesToSkipCloning">
            <summary>
            Used during cloning to skip cloning the types in the HashSet
            </summary>
        </member>
        <member name="M:DLaB.Xrm.Test.FakeServiceProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DLaB.Xrm.Test.FakeServiceProvider"/> class.
            </summary>
        </member>
        <member name="M:DLaB.Xrm.Test.FakeServiceProvider.GetService(System.Type)">
            <summary>
            Gets the service.
            </summary>
            <param name="serviceType">Type of the service.</param>
            <returns></returns>
            <exception cref="T:System.Exception">No Service Found For Type:  + serviceType.FullName</exception>
        </member>
        <member name="M:DLaB.Xrm.Test.FakeServiceProvider.AddService(System.Type,System.Object)">
            <summary>
            Adds the object as the service to be returned when GetService is called.
            </summary>
            <param name="serviceType">Type of the service.</param>
            <param name="service">The service.</param>
        </member>
        <member name="M:DLaB.Xrm.Test.FakeServiceProvider.AddService``1(``0)">
            <summary>
            Adds the object as the service to be returned when GetService is called.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="service">The service.</param>
        </member>
        <member name="M:DLaB.Xrm.Test.FakeServiceProvider.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="T:DLaB.Xrm.Test.FakeTraceService">
            <summary>
            Tracing Service that allows for Faking and implement the ITracingService
            </summary>
        </member>
        <member name="P:DLaB.Xrm.Test.FakeTraceService.Traces">
            <summary>
            Gets or sets the traces.
            </summary>
            <value>
            The traces.
            </value>
        </member>
        <member name="P:DLaB.Xrm.Test.FakeTraceService.TraceAction">
            <summary>
            Gets or sets the trace action.
            </summary>
            <value>
            The trace action.
            </value>
        </member>
        <member name="M:DLaB.Xrm.Test.FakeTraceService.#ctor(DLaB.Xrm.Test.ITestLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:DLaB.Xrm.Test.FakeTraceService" /> class.
            </summary>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:DLaB.Xrm.Test.FakeTraceService.#ctor(DLaB.Xrm.Test.ITestLogger,System.Action{System.String,System.Object[]})">
            <summary>
            Initializes a new instance of the <see cref="T:DLaB.Xrm.Test.FakeTraceService" /> class.
            </summary>
            <param name="logger">The logger.</param>
            <param name="traceAction">The trace action.</param>
        </member>
        <member name="M:DLaB.Xrm.Test.FakeTraceService.Trace(System.String,System.Object[])">
            <summary>
            Traces the specified format.
            </summary>
            <param name="format">The format.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:DLaB.Xrm.Test.FakeTraceService.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.FakeTraceService.CloneReferenceValues(DLaB.Xrm.Test.FakeTraceService)">
            <summary>
            Clones the reference values.
            </summary>
            <param name="clone">The clone.</param>
        </member>
        <member name="T:DLaB.Xrm.Test.FakeWorkflowContext">
            <summary>
            A Fake that implements IExecutionContext
            </summary>
        </member>
        <member name="P:DLaB.Xrm.Test.FakeWorkflowContext.StageName">
            <summary>
            Gets or sets the name of the stage.
            </summary>
            <value>
            The name of the stage.
            </value>
        </member>
        <member name="P:DLaB.Xrm.Test.FakeWorkflowContext.WorkflowCategory">
            <summary>
            Gets or sets the workflow category.
            </summary>
            <value>
            The workflow category.
            </value>
        </member>
        <member name="P:DLaB.Xrm.Test.FakeWorkflowContext.WorkflowMode">
            <summary>
            Gets or sets the workflow mode.
            </summary>
            <value>
            The workflow mode.
            </value>
        </member>
        <member name="P:DLaB.Xrm.Test.FakeWorkflowContext.ParentContext">
            <summary>
            Gets or sets the parent context.
            </summary>
            <value>
            The parent context.
            </value>
        </member>
        <member name="M:DLaB.Xrm.Test.FakeWorkflowContext.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="T:DLaB.Xrm.Test.Id">
            <summary>
            A Helper Class for Easily converting to and from EntityReferences, Logical Names, Ids, and Entities
            </summary>
        </member>
        <member name="P:DLaB.Xrm.Test.Id.EntityId">
            <summary>
            Gets the Entity.Id.
            </summary>
            <value>
            The entity identifier.
            </value>
        </member>
        <member name="P:DLaB.Xrm.Test.Id.LogicalName">
            <summary>
            Gets the logicalname of the entity.
            </summary>
            <value>
            The logicalname of the entity.
            </value>
        </member>
        <member name="P:DLaB.Xrm.Test.Id.EntityReference">
            <summary>
            Gets the entity reference.
            </summary>
            <value>
            The entity reference.
            </value>
        </member>
        <member name="P:DLaB.Xrm.Test.Id.Entity">
            <summary>
            Gets or sets the entity.
            </summary>
            <value>
            The entity.
            </value>
        </member>
        <member name="P:DLaB.Xrm.Test.Id.Item(System.String)">
            <summary>
            Provides an index for Entity.Attribute values
            </summary>
            <value>
            </value>
            <param name="attributeName">Name of the attribute.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.Id.#ctor(System.String,System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:DLaB.Xrm.Test.Id"/> class.
            </summary>
            <param name="logicalName">Name of the logical.</param>
            <param name="entityId">The entity identifier.</param>
            <exception cref="T:System.Exception">\Entity\ is not a valid entityname.  Ids must be be of a valid Early Bound Type, ie Contact, Opportunity, etc... !  + entityId</exception>
        </member>
        <member name="M:DLaB.Xrm.Test.Id.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DLaB.Xrm.Test.Id"/> class.
            </summary>
            <param name="logicalName">Name of the logical.</param>
            <param name="entityId">The entity identifier.</param>
        </member>
        <member name="M:DLaB.Xrm.Test.Id.GetIds``1">
            <summary>
            Enumerates all of the Ids in a struct
            </summary>
            <typeparam name="T">The Struct</typeparam>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.Id.GetIdsForType``1">
            <summary>
            Returns the Ids Struct from a type as a dynamic object.  This allows for a base class to use the Ids defined by the child class.
            </summary>
            <typeparam name="T">The Type to lookup the ids struct for.</typeparam>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.Id.GetIdsForType(System.Type)">
            <summary>
            Returns the Ids Struct from the given type as a dynamic object.
            </summary>
            <param name="type">The Type to lookup the ids struct for.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.Id.op_Implicit(DLaB.Xrm.Test.Id)~Microsoft.Xrm.Sdk.EntityReference">
            <summary>
            Performs an implicit conversion from <see cref="T:DLaB.Xrm.Test.Id"/> to <see cref="P:DLaB.Xrm.Test.Id.EntityReference"/>.
            </summary>
            <param name="id">The identifier.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:DLaB.Xrm.Test.Id.op_Implicit(DLaB.Xrm.Test.Id)~System.Guid">
            <summary>
            Performs an implicit conversion from <see cref="T:DLaB.Xrm.Test.Id"/> to <see cref="T:System.Guid"/>.
            </summary>
            <param name="id">The identifier.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:DLaB.Xrm.Test.Id.op_Implicit(DLaB.Xrm.Test.Id)~System.Activities.InArgument{Microsoft.Xrm.Sdk.EntityReference}">
            <summary>
            Performs an implicit conversion from <see cref="T:DLaB.Xrm.Test.Id"/> to <see cref="T:System.Activities.InArgument`1"/>.
            </summary>
            <param name="id">The identifier.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:DLaB.Xrm.Test.Id.op_Implicit(DLaB.Xrm.Test.Id)~System.String">
            <summary>
            Performs an implicit conversion from <see cref="T:DLaB.Xrm.Test.Id"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="id">The identifier.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:DLaB.Xrm.Test.Id.op_Implicit(Microsoft.Xrm.Sdk.Entity)~DLaB.Xrm.Test.Id">
            <summary>
            Performs an implicit conversion from <see cref="T:DLaB.Xrm.Test.Id" /> to <see cref="T:System.String" />.
            </summary>
            <param name="entity">The entity.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:DLaB.Xrm.Test.Id.Inject(Microsoft.Xrm.Sdk.Entity)">
            <summary>
            Adds the all Attributes (except for the id if it is not empty), formatted values, and key attributes to the current entity.
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:DLaB.Xrm.Test.Id.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:DLaB.Xrm.Test.Id`1">
            <summary>
            A Typed version of the Id class.  Allows for easily converting to and from EntityReferences, Logical Names, Ids, and Entities
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
        </member>
        <member name="P:DLaB.Xrm.Test.Id`1.Entity">
            <summary>
            Gets or sets the entity.
            </summary>
            <value>
            The entity.
            </value>
        </member>
        <member name="M:DLaB.Xrm.Test.Id`1.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:DLaB.Xrm.Test.Id`1"/> class.
            </summary>
            <param name="entityId">The entity identifier.</param>
        </member>
        <member name="M:DLaB.Xrm.Test.Id`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DLaB.Xrm.Test.Id`1"/> class.
            </summary>
            <param name="entityId">The entity identifier.</param>
        </member>
        <member name="M:DLaB.Xrm.Test.Id`1.op_Implicit(DLaB.Xrm.Test.Id{`0})~`0">
            <summary>
            Performs an implicit conversion from <see cref="T:DLaB.Xrm.Test.Id" /> to <see cref="T:System.String" />.
            </summary>
            <param name="entity">The entity.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="T:DLaB.Xrm.Test.IdExtensions">
            <summary>
            Extensions that help to distinguish between methods that accept both EntityReference and Entity
            </summary>
        </member>
        <member name="M:DLaB.Xrm.Test.IdExtensions.Delete``1(Microsoft.Xrm.Sdk.IOrganizationService,DLaB.Xrm.Test.Id{``0})">
            <summary>
            Deletes the Specified Entity
            </summary>
            <typeparam name="T"></typeparam>
            <param name="service"></param>
            <param name="id"></param>
        </member>
        <member name="T:DLaB.Xrm.Test.IServiceFaked`1">
            <summary>
            Used to determine the interface that the given type is stored in the service provider as
            </summary>
            <typeparam name="TService"></typeparam>
        </member>
        <member name="T:DLaB.Xrm.Test.IFakeService">
            <summary>
            Service used to constrain the 
            </summary>
        </member>
        <member name="T:DLaB.Xrm.Test.IPathFinder">
            <summary>
            Defines an interface for getting a path
            </summary>
        </member>
        <member name="M:DLaB.Xrm.Test.IPathFinder.GetPath">
            <summary>
            Gets the path.
            </summary>
            <returns></returns>
        </member>
        <member name="T:DLaB.Xrm.Test.ITestFrameworkProvider">
            <summary>
            Defines an Interface for a test framework provider.  This is needed to be able to interact with different Test Frameworks
            </summary>
        </member>
        <member name="P:DLaB.Xrm.Test.ITestFrameworkProvider.TestMethodAttributeType">
            <summary>
            Gets the type of the attribute used to define a test method.
            </summary>
            <value>
            the type of the attribute used to define a test method.
            </value>
        </member>
        <member name="M:DLaB.Xrm.Test.ITestFrameworkProvider.GetFailedException(System.String)">
            <summary>
            Exception to throw when a custom Assertion has failed.  MsTest: AssertFailedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.ITestFrameworkProvider.GetInconclusiveException(System.String)">
            <summary>
            Exception to throw when a custom Assertion is inconclusive.  MsTest: AssertInconclusiveException.  
            </summary>
            <returns></returns>
        </member>
        <member name="T:DLaB.Xrm.Test.ITestLogger">
            <summary>
            Allows for abstraction of logging to the Test Framework
            </summary>
        </member>
        <member name="M:DLaB.Xrm.Test.ITestLogger.WriteLine(System.String)">
            <summary>
            Adds a line of text to the output.
            
            </summary>
            <param name="message">The message</param>
        </member>
        <member name="M:DLaB.Xrm.Test.ITestLogger.WriteLine(System.String,System.Object[])">
            <summary>
            Formats a line of text and adds it to the output.
            
            </summary>
            <param name="format">The message format</param><param name="args">The format arguments</param>
        </member>
        <member name="T:DLaB.Xrm.Test.PatherFinderProjectOfType">
            <summary>
            Defines the path of a project
            </summary>
        </member>
        <member name="M:DLaB.Xrm.Test.PatherFinderProjectOfType.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DLaB.Xrm.Test.PatherFinderProjectOfType"/> class.
            </summary>
            <param name="type">The type.</param>
            <param name="projectRelativePath">The project relative path.</param>
        </member>
        <member name="M:DLaB.Xrm.Test.PatherFinderProjectOfType.GetPath">
            <summary>
            Gets the path.
            </summary>
            <returns></returns>
        </member>
        <member name="T:DLaB.Xrm.Test.PathFinderAbsolute">
            <summary>
            Defines the Abolute Path
            </summary>
        </member>
        <member name="M:DLaB.Xrm.Test.PathFinderAbsolute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DLaB.Xrm.Test.PathFinderAbsolute"/> class.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:DLaB.Xrm.Test.PathFinderAbsolute.GetPath">
            <summary>
            Gets the path.
            </summary>
            <returns></returns>
        </member>
        <member name="T:DLaB.Xrm.Test.Settings.NamespaceSetting">
            <summary>
            Defines a Path to the assembly given the namespace
            </summary>
        </member>
        <member name="P:DLaB.Xrm.Test.Settings.NamespaceSetting.Assembly">
            <summary>
            Gets or sets the assembly.
            </summary>
            <value>
            The assembly.
            </value>
            <exception cref="T:DLaB.Xrm.Test.Exceptions.NotConfiguredException"></exception>
        </member>
        <member name="P:DLaB.Xrm.Test.Settings.NamespaceSetting.Namespace">
            <summary>
            Gets or sets the namespace.
            </summary>
            <value>
            The namespace.
            </value>
            <exception cref="T:DLaB.Xrm.Test.Exceptions.NotConfiguredException"></exception>
        </member>
        <member name="P:DLaB.Xrm.Test.Settings.NamespaceSetting.IsConfigured">
            <summary>
            Gets or sets a value indicating whether this instance is configured.
            </summary>
            <value>
            <c>true</c> if this instance is configured; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:DLaB.Xrm.Test.Settings.NamespaceSetting.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DLaB.Xrm.Test.Settings.NamespaceSetting"/> class.
            </summary>
            <param name="notConfiguredMessage">The not configured message.</param>
        </member>
        <member name="M:DLaB.Xrm.Test.Settings.NamespaceSetting.ConfigureAssembly``1">
            <summary>
            Configures the assembly.
            </summary>
        </member>
        <member name="T:DLaB.Xrm.Test.Settings.NamespaceSetting`1">
            <summary>
            Generic Namespace Setting
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:DLaB.Xrm.Test.Settings.NamespaceSetting`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DLaB.Xrm.Test.Settings.NamespaceSetting`1"/> class.
            </summary>
            <param name="notConfiguredMessage">The not configured message.</param>
        </member>
        <member name="M:DLaB.Xrm.Test.Settings.NamespaceSetting`1.ConfigureDerivedAssembly``1">
            <summary>
            Configures the assembly, requiring that TDerivedClass be derived from T
            </summary>
            <typeparam name="TDerivedClass">The type of the class.</typeparam>
            <exception cref="T:System.Exception">Must pass in a derived type from  + typeof(T).AssemblyQualifiedName</exception>
        </member>
        <member name="T:DLaB.Xrm.Test.Settings.PathSetting">
            <summary>
            Defines a Path Setting
            </summary>
        </member>
        <member name="P:DLaB.Xrm.Test.Settings.PathSetting.Value">
            <summary>
            Gets the value.
            </summary>
            <value>
            The value.
            </value>
            <exception cref="T:DLaB.Xrm.Test.Exceptions.NotConfiguredException"></exception>
        </member>
        <member name="P:DLaB.Xrm.Test.Settings.PathSetting.IsConfigured">
            <summary>
            Gets or sets a value indicating whether this instance is configured.
            </summary>
            <value>
            <c>true</c> if this instance is configured; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:DLaB.Xrm.Test.Settings.PathSetting.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DLaB.Xrm.Test.Settings.PathSetting"/> class.
            </summary>
            <param name="notConfiguredMessage">The not configured message.</param>
        </member>
        <member name="M:DLaB.Xrm.Test.Settings.PathSetting.Configure(DLaB.Xrm.Test.IPathFinder)">
            <summary>
            Configures the Web Resources Path.
            </summary>
            <param name="finder"></param>
        </member>
        <member name="T:DLaB.Xrm.Test.Settings.SourceControlProviderSetting">
            <summary>
            The Source Control Provider Setting
            </summary>
        </member>
        <member name="P:DLaB.Xrm.Test.Settings.SourceControlProviderSetting.Value">
            <summary>
            Gets the SourceControlProvider.
            </summary>
            <value>
            The value.
            </value>
            <exception cref="T:DLaB.Xrm.Test.Exceptions.NotConfiguredException"></exception>
        </member>
        <member name="P:DLaB.Xrm.Test.Settings.SourceControlProviderSetting.IsConfigured">
            <summary>
            Gets or sets a value indicating whether this instance is configured.
            </summary>
            <value>
            <c>true</c> if this instance is configured; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:DLaB.Xrm.Test.Settings.SourceControlProviderSetting.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DLaB.Xrm.Test.Settings.SourceControlProviderSetting"/> class.
            </summary>
            <param name="notConfiguredMessage">The not configured message.</param>
        </member>
        <member name="M:DLaB.Xrm.Test.Settings.SourceControlProviderSetting.Configure(DLaB.Common.VersionControl.ISourceControlProvider)">
            <summary>
            The Source Control Provider
            </summary>
            <param name="provider"></param>
        </member>
        <member name="M:DLaB.Xrm.Test.Settings.SourceControlProviderSetting.ConfigureNone">
            <summary>
            The Source Control Provider
            </summary>
        </member>
        <member name="M:DLaB.Xrm.Test.Settings.SourceControlProviderSetting.ConfigureTfs">
            <summary>
            The Source Control Provider
            </summary>
        </member>
        <member name="T:DLaB.Xrm.Test.Settings.TestFrameworkProviderSettings">
            <summary>
            Handles mapping calls to the actual Test Framework Provider
            </summary>
        </member>
        <member name="P:DLaB.Xrm.Test.Settings.TestFrameworkProviderSettings.Value">
            <summary>
            Gets the TestFrameworkProvider.
            </summary>
            <value>
            The value.
            </value>
            <exception cref="T:DLaB.Xrm.Test.Exceptions.NotConfiguredException"></exception>
        </member>
        <member name="P:DLaB.Xrm.Test.Settings.TestFrameworkProviderSettings.IsConfigured">
            <summary>
            Gets or sets a value indicating whether this instance is configured.
            </summary>
            <value>
            <c>true</c> if this instance is configured; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:DLaB.Xrm.Test.Settings.TestFrameworkProviderSettings.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DLaB.Xrm.Test.Settings.TestFrameworkProviderSettings"/> class.
            </summary>
            <param name="notConfiguredMessage">The not configured message.</param>
        </member>
        <member name="M:DLaB.Xrm.Test.Settings.TestFrameworkProviderSettings.Configure(DLaB.Xrm.Test.ITestFrameworkProvider)">
            <summary>
            The Unit Test Framework Provider
            </summary>
            <param name="provider"></param>
        </member>
        <member name="T:DLaB.Xrm.Test.TestActionTimer">
            <summary>
            Timer class for timing actions during a test
            </summary>
        </member>
        <member name="P:DLaB.Xrm.Test.TestActionTimer.Logger">
            <summary>
            Gets the logger.
            </summary>
            <value>
            The logger.
            </value>
        </member>
        <member name="M:DLaB.Xrm.Test.TestActionTimer.#ctor(DLaB.Xrm.Test.ITestLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:DLaB.Xrm.Test.TestActionTimer"/> class.
            </summary>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:DLaB.Xrm.Test.TestActionTimer.Time(System.Action,System.String)">
            <summary>
            Times the given action, and writes the message with the elapsed milliseconds to the trace listeners in
            the System.Diagnostics.Debug.Listeners collection.
            </summary>
            <param name="actionToTime"></param>
            <param name="actionDescription"></param>
        </member>
        <member name="M:DLaB.Xrm.Test.TestActionTimer.Time(System.Action,System.String,System.Object[])">
            <summary>
            Times the given action, and writes the message with the elapsed milliseconds to the trace listeners in
            the System.Diagnostics.Debug.Listeners collection.
            </summary>
            <param name="actionToTime"></param>
            <param name="actionDescriptionFormat"></param>
            <param name="values">Used for a String.Format.  The ElapsedMilliseconds will be added to the end of the array</param>
        </member>
        <member name="M:DLaB.Xrm.Test.TestActionTimer.Time``2(System.Func{``0,``1},``0,System.String,System.Object[])">
            <summary>
            This overload was created so that lamda expressions wouldn't cause the debugger to break within the hidden methods
            Times the given action, and writes the message with the elapsed milliseconds to the trace listeners in
            the System.Diagnostics.Debug.Listeners collection.
            </summary>
            <param name="actionToTime"></param>
            <param name="entity">Entity to pass to actionToTime</param>
            <param name="actionDescriptionFormat"></param>
            <param name="values">Used for a String.Format.  The ElapsedMilliseconds will be added to the end of the array</param>
        </member>
        <member name="T:DLaB.Xrm.Test.TestBase">
            <summary>
            Base Test class to create the Organization Service Proxy defined by the config, as well as other values
            </summary>
        </member>
        <member name="P:DLaB.Xrm.Test.TestBase.OrgName">
            <summary>
            Gets or sets the name of the org.
            </summary>
            <value>
            The name of the org.
            </value>
        </member>
        <member name="P:DLaB.Xrm.Test.TestBase.UseLocalCrmDatabase">
            <summary>
            Gets or sets a value indicating whether [use local CRM database].
            </summary>
            <value>
            <c>true</c> if [use local CRM database]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:DLaB.Xrm.Test.TestBase.GetOrganizationService(System.String,System.Guid)">
            <summary>
            Gets the organization service.
            </summary>
            <param name="organizationName">Name of the organization.</param>
            <param name="impersonationUserId">The impersonation user identifier.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.TestBase.GetConfiguredLocalDatabaseInfo(System.String,System.Guid)">
            <summary>
            Returns a local Crm Database Info from the TestSettings
            </summary>
            <param name="databaseKey">Key to Use</param>
            <param name="impersonationUserId">Impersonation User</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.TestBase.LoadUserUnitTestSettings">
            <summary>
            Loads the user unit test settings in a multi-thread safe manner, verifying that it is loaded once only.
            </summary>
        </member>
        <member name="M:DLaB.Xrm.Test.TestBase.GetType(System.String)">
            <summary>
            Gets the Entity type based on the entity logical name.
            </summary>
            <param name="entityLogicalName">Name of the entity logical.</param>
            <returns></returns>
        </member>
        <member name="T:DLaB.Xrm.Test.TestMethodClassBaseDLaB">
            <summary>
            A Default Unit Test Class that handles Auto-wiring up creation of the IOrganizationService, and creation/deletion of data, and assumptions
            </summary>
        </member>
        <member name="P:DLaB.Xrm.Test.TestMethodClassBaseDLaB.EnableServiceExecutionTracing">
            <summary>
            Sets whether tracing of the FakeIOrganizationService is enabled
            </summary>
        </member>
        <member name="P:DLaB.Xrm.Test.TestMethodClassBaseDLaB.MultiThreadPostDeletion">
            <summary>
            Enables multi threaded deletion.
            Should only need to be turned off if an entity type that is being deleted, has a reference to itself that requires it
            to be deleted in a particular order
            </summary>
        </member>
        <member name="P:DLaB.Xrm.Test.TestMethodClassBaseDLaB.AssertCrm">
            <summary>
            Gets or sets the assert CRM.
            </summary>
            <value>
            The assert CRM.
            </value>
        </member>
        <member name="P:DLaB.Xrm.Test.TestMethodClassBaseDLaB.Logger">
            <summary>Gets or sets the logger.</summary>
            <value>The logger.</value>
        </member>
        <member name="P:DLaB.Xrm.Test.TestMethodClassBaseDLaB.Logs">
            <summary>
            List of Logs that have been recorded.  This includes both internal TestMethodClassBase Logs, and any logs logged with the Logger
            </summary>
        </member>
        <member name="M:DLaB.Xrm.Test.TestMethodClassBaseDLaB.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DLaB.Xrm.Test.TestMethodClassBaseDLaB"/> class.
            </summary>
        </member>
        <member name="M:DLaB.Xrm.Test.TestMethodClassBaseDLaB.InitializeEntityIds">
            <summary>
            By default attempts to load entities from internal type with static Id properties
            </summary>
        </member>
        <member name="P:DLaB.Xrm.Test.TestMethodClassBaseDLaB.AssumedEntities">
            <summary>
            Populated with Entities that are loaded as a result of using EntityDataAssumption Attributes on the Test Method Class.
            Loaded before GetIOrganizationService() and InitializeTestData(service)
            </summary>
        </member>
        <member name="P:DLaB.Xrm.Test.TestMethodClassBaseDLaB.EntityIdsByLogicalName">
            <summary>
            Populated with EntityLogical name keys, and list of ids.  Default Implementation of Cleanup methods will delete
            all entities in the dictionary, GetEntityReference will use it to populate Entities
            </summary>
        </member>
        <member name="P:DLaB.Xrm.Test.TestMethodClassBaseDLaB.EntityIds">
            <summary>
            Will get populated at the very beginning of Test
            </summary>
        </member>
        <member name="M:DLaB.Xrm.Test.TestMethodClassBaseDLaB.CleanupTestData(Microsoft.Xrm.Sdk.IOrganizationService,System.Boolean)">
            <summary>
            Cleanups the test data.
            </summary>
            <param name="service">The service.</param>
            <param name="shouldExist">if set to <c>true</c> [should exist].</param>
        </member>
        <member name="M:DLaB.Xrm.Test.TestMethodClassBaseDLaB.CleanupDataPreInitialization(Microsoft.Xrm.Sdk.IOrganizationService)">
            <summary>
            Data is assumed to not be there, so use DeleteIfExists
            </summary>
            <param name="service"></param>
        </member>
        <member name="M:DLaB.Xrm.Test.TestMethodClassBaseDLaB.CleanupDataPostInitialization(Microsoft.Xrm.Sdk.IOrganizationService)">
            <summary>
            Data is assumed to be there, so use TryDelete
            </summary>
            <param name="service"></param>
        </member>
        <member name="M:DLaB.Xrm.Test.TestMethodClassBaseDLaB.LoadConfigurationSettings">
            <summary>
            Loads the configuration settings.
            </summary>
        </member>
        <member name="M:DLaB.Xrm.Test.TestMethodClassBaseDLaB.Test(Microsoft.Xrm.Sdk.IOrganizationService)">
            <summary>
            The actual test to run, where the required data has already been initialized
            </summary>
            <param name="service"></param>
        </member>
        <member name="M:DLaB.Xrm.Test.TestMethodClassBaseDLaB.GetUnitTestName(System.Int32)">
            <summary>
            Used by the default implementation of GetIOrganizationService to insert a unit test name for any entity
            created by the MockIOrganization
            </summary>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.TestMethodClassBaseDLaB.InitializeTestData(Microsoft.Xrm.Sdk.IOrganizationService)">
            <summary>
            Method to populate the data in the CRM Database to setup a clean test
            </summary>
            <param name="service"></param>
        </member>
        <member name="M:DLaB.Xrm.Test.TestMethodClassBaseDLaB.GetOrganizationServiceBuilder(Microsoft.Xrm.Sdk.IOrganizationService)">
            <summary>
            Gets the organization service builder that will be used to 
            </summary>
            <param name="service">The service.</param>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.TestMethodClassBaseDLaB.GetIOrganizationService">
            <summary>
            Gets either the Local Crm Organization Service, or the real connection to CRM, depending on the UnitTestSettings.user.config settings.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DLaB.Xrm.Test.TestMethodClassBaseDLaB.Test(DLaB.Xrm.Test.ITestLogger)">
            <summary>
            Executes the Unit Test
            </summary>
            <param name="logger">The logger.</param>
        </member>
        <member name="T:DLaB.Xrm.Test.TestSettings">
            <summary>
            Defines the TestSettings for the Test framework
            </summary>
        </member>
        <member name="P:DLaB.Xrm.Test.TestSettings.AssumptionXmlPath">
            <summary>
            Assumption Xml allows an easy way to define assuming particular Entities exist when hitting a real CRM instance, and to download and utilize the same entities when using a local Crm 
            </summary>
            <value>
            The assumption XML path.
            </value>
        </member>
        <member name="P:DLaB.Xrm.Test.TestSettings.EarlyBound">
            <summary>
            Defines the namespace of the EarlyBound entities so entities can be discovered to model the Local CRM
            </summary>
            <value>
            The early bound.
            </value>
        </member>
        <member name="P:DLaB.Xrm.Test.TestSettings.EntityBuilder">
            <summary>
            Defines the namespace of Entity Builders.  This can then be used to determine what builder to use for a particular entity
            </summary>
            <value>
            The entity builder.
            </value>
        </member>
        <member name="P:DLaB.Xrm.Test.TestSettings.UserTestConfigPath">
            <summary>
            The User Test Config Path specifies a config path to be loaded into the current Unit Test's app.Config at runtime.  This allows multiple Unit Testing projects to all use the same config settings.
            </summary>
            <value>
            The user test configuration path.
            </value>
        </member>
        <member name="P:DLaB.Xrm.Test.TestSettings.WebResourcePath">
            <summary>
            Gets the web resource path.  This allows unit tests that pull a settings file, to read the value from the WebResource, rather than having to Fake it out.
            </summary>
            <value>
            The web resource path.
            </value>
        </member>
        <member name="P:DLaB.Xrm.Test.TestSettings.SourceControlProvider">
            <summary>
            Gets the source control provider which implements ISourceControlProvider
            </summary>
            <value>
            The test framework provider.
            </value>
        </member>
        <member name="P:DLaB.Xrm.Test.TestSettings.TestFrameworkProvider">
            <summary>
            Gets the test framework provider which implements ITestFrameworkProvider
            </summary>
            <value>
            The test framework provider.
            </value>
        </member>
        <member name="T:DLaB.Xrm.Test.TraceParams">
            <summary>
            Class for being able to access the Trace Params before being traced
            </summary>
        </member>
        <member name="P:DLaB.Xrm.Test.TraceParams.Format">
            <summary>
            Gets or sets the format.
            </summary>
            <value>
            The format.
            </value>
        </member>
        <member name="P:DLaB.Xrm.Test.TraceParams.Args">
            <summary>
            Gets or sets the arguments.
            </summary>
            <value>
            The arguments.
            </value>
        </member>
        <member name="P:DLaB.Xrm.Test.TraceParams.Trace">
            <summary>
            Gets or sets the trace.
            </summary>
            <value>
            The trace.
            </value>
        </member>
        <member name="M:DLaB.Xrm.Test.TraceParams.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:DLaB.Xrm.Test.TraceParams"/> class.
            </summary>
            <param name="format">The format.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="T:NMemory.Concurrency.DeadlockManagementStrategy">
            <summary>
            Specifies the strategy of deadlock management
            </summary>
        </member>
        <member name="F:NMemory.Concurrency.DeadlockManagementStrategy.DeadlockDetection">
            <summary>
            Deadlock detection
            </summary>
        </member>
        <member name="F:NMemory.Concurrency.DeadlockManagementStrategy.DeadlockPrevention">
            <summary>
            Deadlock prevention
            </summary>
        </member>
        <member name="T:NMemory.Concurrency.Locks.ILockFactory">
            <summary>
            Represents a factory that is able to instantiate <c>ILock</c> objects
            </summary>
        </member>
        <member name="T:NMemory.Constraints.IConstraint">
            <summary>
                Defines functionality for constraint against database entities.
            </summary>
        </member>
        <member name="T:NMemory.Constraints.IConstraint`1">
            <summary>
                Defines functionality for constraint against database entities.
            </summary>
            <typeparam name="TEntity"> The type of the entity. </typeparam>
        </member>
        <member name="M:NMemory.Constraints.IConstraint`1.Apply(`0,NMemory.Execution.IExecutionContext)">
            <summary>
                Apply the constraint on an entity.
            </summary>
            <param name="entity"> The entity to apply the constraint on. </param>
            <param name="context"> The execution context. </param>
        </member>
        <member name="T:NMemory.Database">
            <summary>
            Represents an NMemory database instance.
            </summary>
        </member>
        <member name="M:NMemory.Database.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NMemory.Database" /> class.
            </summary>
        </member>
        <member name="M:NMemory.Database.#ctor(NMemory.Modularity.IDatabaseComponentFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:NMemory.Database" /> class with the specified database engine factory..
            </summary>
            <param name="databaseComponentFactory">The database component factory.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="databaseComponentFactory"/> is null.</exception>
        </member>
        <member name="P:NMemory.Database.StoredProcedures">
            <summary>
            Gets the collection of stored procedures contained by the database
            </summary>
        </member>
        <member name="P:NMemory.Database.Tables">
            <summary>
            Gets the collection of tables contained by the database.
            </summary>
            <value>
            A collection of tables.
            </value>
        </member>
        <member name="P:NMemory.Database.DatabaseEngine">
            <summary>
            Gets the database engine.
            </summary>
            <value>
            The database engine.
            </value>
        </member>
        <member name="F:NMemory.Exceptions.ErrorCode.GenericError">
            <summary>
            The generic error
            </summary>
        </member>
        <member name="F:NMemory.Exceptions.ErrorCode.ExistingKeyFound">
            <summary>
            The existing key found
            </summary>
        </member>
        <member name="F:NMemory.Exceptions.ErrorCode.TransactionHasAlreadyStarted">
            <summary>
            The transaction has already started
            </summary>
        </member>
        <member name="F:NMemory.Exceptions.ErrorCode.RelationError">
            <summary>
            Relation error
            </summary>
        </member>
        <member name="T:NMemory.Execution.Optimization.JoinGroup">
            <summary>
            Provides factory method for GroupJoin in order to
            achieve type impeance.
            </summary>
        </member>
        <member name="T:NMemory.Execution.Optimization.Rewriters.IndexAccessRewriter">
            <summary>
            Rewrites constant->member index access expression to constant expression.
            </summary>
        </member>
        <member name="T:NMemory.Execution.Optimization.Rewriters.InnerJoinLogicalRewriter">
            <summary>
            Searches for SelectMany based inner join calls and replaces it with Join call
            </summary>
        </member>
        <member name="T:NMemory.Execution.Optimization.Rewriters.OuterJoinLogicalRewriter">
            <summary>
            Searches for SelectMany based outer join calls and replaces it with GroupJoin call
            </summary>
        </member>
        <member name="T:NMemory.Execution.Optimization.Rewriters.QueryableRewriter">
            <summary>
            Represents an expression rewriter that replaces <see cref="T:System.Linq.Queryable"/> 
            extension method calls with corresponding <see cref="T:System.Linq.Enumerable"/>  
            extension method calls
            </summary>
        </member>
        <member name="M:NMemory.Execution.Optimization.Rewriters.QueryableRewriter.FindGenericType(System.Type,System.Type)">
            <summary>
            Finds the concrete type of the specified generic type definition.
            For example, if definition is IEnumerable&gt;&lt;, than the type IList&gt;string&lt;>
            returns IEnumerable&gt;string&lt;
            </summary>
            <param name="definition">The generic type definition.</param>
            <param name="type">The type.</param>
            <returns>The generic type of the definition.</returns>
        </member>
        <member name="T:NMemory.Execution.Optimization.Rewriters.TableAccessRewriter">
            <summary>
            Rewrites all kind of table access expression to constant expression.
            </summary>
        </member>
        <member name="P:NMemory.Indexes.Index`2.SupportsIntervalSearch">
            <summary>
            Gets a value that indicates whether the index structure supports interval search.
            </summary>
        </member>
        <member name="T:NMemory.Modularity.IDatabaseComponentFactory">
            <summary>
            Provides functionality to instantiate the components of a database engine.
            </summary>
        </member>
        <member name="M:NMemory.Modularity.IDatabaseComponentFactory.CreateConcurrencyManager">
            <summary>
            Creates a concurrency manager that handles the concurrent access of transactions.
            </summary>
            <returns>A concurrency manager.</returns>
        </member>
        <member name="M:NMemory.Modularity.IDatabaseComponentFactory.CreateQueryCompiler">
            <summary>
            Creates a query compiler that optimizes and compiles database queries.
            </summary>
            <returns>A query compiler.</returns>
        </member>
        <member name="M:NMemory.Modularity.IDatabaseComponentFactory.CreateQueryExecutor">
            <summary>
            Creates a query executor that executes compiled queries.
            </summary>
            <returns>A query executor.</returns>
        </member>
        <member name="M:NMemory.Modularity.IDatabaseComponentFactory.CreateTransactionHandler">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:NMemory.Modularity.IDatabaseComponentFactory.CreateLoggingPort">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:NMemory.Modularity.IDatabaseComponentFactory.CreateServiceProvider">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:NMemory.StoredProcedures.StoredProcedure`1">
            <summary>
                Represents a stored procedure that returns with a result set.
            </summary>
            <typeparam name="T">
                The type of the result set elements.
            </typeparam>
        </member>
        <member name="T:NMemory.Tables.ConstraintCollection`1">
            <summary>
                Represents a collection of contraints.
            </summary>
            <typeparam name="T"> 
                The type of the entity the constraints are applied on. 
            </typeparam>
        </member>
        <member name="M:NMemory.Tables.ConstraintCollection`1.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:NMemory.Tables.ConstraintCollection`1"/> class.
            </summary>
        </member>
        <member name="M:NMemory.Tables.ConstraintCollection`1.Apply(`0,NMemory.Execution.IExecutionContext)">
            <summary>
                Applys all contraints on the specified entity.
            </summary>
            <param name="entity"> The entity. </param>
            <param name="context"> The execution context. </param>
        </member>
        <member name="M:NMemory.Tables.ConstraintCollection`1.Add(NMemory.Constraints.IConstraint{`0})">
            <summary>
                Adds a table constraint.
            </summary>
            <param name="constraint">
                The constraint. Note that you must not share this constraint instance across 
                multiple tables.
            </param>
        </member>
        <member name="M:NMemory.Tables.ConstraintCollection`1.Add(NMemory.Constraints.IConstraintFactory{`0})">
            <summary>
                Adds a table constraint.
            </summary>
            <param name="constraintFactory"> 
                The constraint factory that instantiates a dedicated constraint instance for
                this table.
                </param>
        </member>
        <member name="T:NMemory.Tables.DefaultTable`2">
            <summary>
                Represents a database table.
            </summary>
            <typeparam name="TEntity">
                The type of the entities contained by the table
            </typeparam>
            <typeparam name="TPrimaryKey">
                The type of the primary key of the entities.
            </typeparam>
        </member>
        <member name="M:NMemory.Tables.DefaultTable`2.#ctor">
            <summary>
                Prevents a default instance of the <see cref="T:NMemory.Tables.DefaultTable`2" /> 
                class from being created.
            </summary>
        </member>
        <member name="M:NMemory.Tables.DefaultTable`2.InsertCore(`0,NMemory.Transactions.Transaction)">
            <summary>
                Core implementation of an entity insert.
            </summary>
            <param name="entity">
                The entity that contains the primary key of the entity to be deleted.
            </param>
            <param name="transaction">
                The transaction within which the update operation executes.
            </param>
        </member>
        <member name="M:NMemory.Tables.DefaultTable`2.UpdateCore(System.Linq.Expressions.Expression,NMemory.Execution.IUpdater{`0},NMemory.Transactions.Transaction)">
            <summary>
                Core implementation of a bulk entity update.
            </summary>
            <param name="expression">
                A query expression that represents the entities to be updated.
            </param>
            <param name="updater">
                An expression that represents the update mechanism.
            </param>
            <param name="transaction">
                The transaction within which the update operation is executed.
            </param>
            <returns>
                The updated entities.
            </returns>
        </member>
        <member name="M:NMemory.Tables.DefaultTable`2.DeleteCore(System.Linq.Expressions.Expression,NMemory.Transactions.Transaction)">
            <summary>
                Core implementation of an entity delete.
            </summary>
            <param name="expression">
                The expression to compile
            </param>
            <param name="transaction">
                The transaction within which the delete operation is executed.
            </param>
        </member>
        <member name="T:NMemory.Tables.IBulkTable`1">
            <summary>
            Defines bulk operations for a table.
            </summary>
            <typeparam name="TEntity">The type of the entities contained by the table.</typeparam>
        </member>
        <member name="M:NMemory.Tables.IBulkTable`1.Update(NMemory.Linq.TableQuery{`0},System.Linq.Expressions.Expression{System.Func{`0,`0}},NMemory.Transactions.Transaction)">
            <summary>
            Updates the entities.
            </summary>
            <param name="query">A query expression that represents the entities to be updated.</param>
            <param name="updater">An expression that represents the update logic.</param>
            <param name="transaction">The transaction within which the update operation is executed.</param>
            <returns>The updated entities</returns>
        </member>
        <member name="M:NMemory.Tables.IBulkTable`1.Delete(NMemory.Linq.TableQuery{`0},NMemory.Transactions.Transaction)">
            <summary>
            Deletes entities.
            </summary>
            <param name="query">The query that represents the entities to be deleted.</param>
            <param name="transaction">The transaction within which the delete operation is executed.</param>
            <returns>The count of the deleted entities.</returns>
        </member>
        <member name="M:NMemory.Tables.IReflectionTable.Insert(System.Object)">
            <summary>
            Inserts a new entity into the table.
            </summary>
            <param name="entity">An entity that contains the property values of the new entity.</param>
        </member>
        <member name="M:NMemory.Tables.IReflectionTable.Update(System.Object)">
            <summary>
            Updates the properties of an entity contained by the table.
            </summary>
            <param name="entity">An entity that contains the primary key of the entity to be updated and the new property values.</param>
        </member>
        <member name="M:NMemory.Tables.IReflectionTable.Delete(System.Object)">
            <summary>
            Deletes an entity from the table.
            </summary>
            <param name="entity">An entity that contains the primary key of the entity to be deleted.</param>
        </member>
        <member name="T:NMemory.Tables.ITable">
            <summary>
                Defines an interface for database tables.
            </summary>
        </member>
        <member name="P:NMemory.Tables.ITable.Database">
            <summary>
                Gets the database that contains the table.
            </summary>
        </member>
        <member name="P:NMemory.Tables.ITable.EntityType">
            <summary>
                Gets the type of the entities contained in the table.
            </summary>
        </member>
        <member name="P:NMemory.Tables.ITable.PrimaryKeyIndex">
            <summary>
                Gets the primary key index of the table.
            </summary>
        </member>
        <member name="P:NMemory.Tables.ITable.Indexes">
            <summary>
                Gets the indexes of the table.
            </summary>
        </member>
        <member name="E:NMemory.Tables.ITable.IndexChanged">
            <summary>
                Occurs when the indexes of the table are changed.
            </summary>
        </member>
        <member name="P:NMemory.Tables.ITable.Count">
            <summary>
                Gets the number of entities contained in the table.
            </summary>
        </member>
        <member name="T:NMemory.Tables.ITable`1">
            <summary>
                Defines an interface for database tables.
            </summary>
            <typeparam name="TEntity">
                The type of the entities contained by the table.
            </typeparam>
        </member>
        <member name="P:NMemory.Tables.ITable`1.PrimaryKeyIndex">
            <summary>
                Gets the primary key index of the table.
            </summary>
        </member>
        <member name="M:NMemory.Tables.ITable`1.Insert(`0)">
            <summary>
                Inserts a new entity into the table.
            </summary>
            <param name="entity">
                An entity that contains the property values of the new entity.
            </param>
        </member>
        <member name="M:NMemory.Tables.ITable`1.Insert(`0,NMemory.Transactions.Transaction)">
            <summary>
                Inserts a new entity into the table.
            </summary>
            <param name="entity">
                An entity that contains the property values of the new entity.
            </param>
            <param name="transaction">
                The transaction within which the insert operation executes.
            </param>
        </member>
        <member name="M:NMemory.Tables.ITable`1.Update(`0)">
            <summary>
                Updates the properties of the specified entity contained by the table.
            </summary>
            <param name="entity">
                An entity that contains the primary key of the entity to be updated and the new
                property values.
            </param>
        </member>
        <member name="M:NMemory.Tables.ITable`1.Update(`0,NMemory.Transactions.Transaction)">
            <summary>
                Updates the properties of the specified contained by the table.
            </summary>
            <param name="entity">
                An entity that contains the primary key of the entity to be updated and the new
                property values.
            </param>
            <param name="transaction">
                The transaction within which the update operation executes.
            </param>
        </member>
        <member name="M:NMemory.Tables.ITable`1.Delete(`0)">
            <summary>
                Deletes an entity from the table.
            </summary>
            <param name="entity">
                An entity that contains the primary key of the entity to be deleted.
            </param>
        </member>
        <member name="M:NMemory.Tables.ITable`1.Delete(`0,NMemory.Transactions.Transaction)">
            <summary>
                Deletes an entity from the table.
            </summary>
            <param name="entity">
                An entity that contains the primary key of the entity to be deleted.
            </param>
            <param name="transaction">
                The transaction within which the delete operation executes.
            </param>
        </member>
        <member name="P:NMemory.Tables.ITable`1.Contraints">
            <summary>
                Gets the collection of contraints registered to table.
            </summary>
            <value>
                The contraints.
            </value>
        </member>
        <member name="T:NMemory.Tables.ITable`2">
            <summary>
                Defines an interface for database tables.
            </summary>
            <typeparam name="TEntity">
                The type of the entities contained by the table.
            </typeparam>
            <typeparam name="TPrimaryKey">
                The type of the primary key of the entities.
            </typeparam>
        </member>
        <member name="P:NMemory.Tables.ITable`2.PrimaryKeyIndex">
            <summary>
                Gets the primary key index of the table.
            </summary>
        </member>
        <member name="M:NMemory.Tables.ITable`2.Update(`1,`0)">
            <summary>
                Updates the properties of the specified entity contained by the table.
            </summary>
            <param name="key">
                The primary key of the entity to be updated.
            </param>
            <param name="entity">
                An entity that contains the new property values.
            </param>
        </member>
        <member name="M:NMemory.Tables.ITable`2.Update(`1,`0,NMemory.Transactions.Transaction)">
            <summary>
                Updates the properties of the specified entity contained by the table.
            </summary>
            <param name="key">
                The primary key of the entity to be updated.
            </param>
            <param name="entity">
                An entity that contains the new property values.
            </param>
            <param name="transaction">
                The transaction within which the update operation is executed.
            </param>
        </member>
        <member name="M:NMemory.Tables.ITable`2.Delete(`1)">
            <summary>
                Deletes an entity from the table.
            </summary>
            <param name="key">
                The primary key of the entity to be deleted.
            </param>
        </member>
        <member name="M:NMemory.Tables.ITable`2.Delete(`1,NMemory.Transactions.Transaction)">
            <summary>
                Deletes an entity from the table.
            </summary>
            <param name="key">
                The primary key of the entity to be deleted.
            </param>
            <param name="transaction">
                The transaction within which the update operation is executed.
            </param>
        </member>
        <member name="T:NMemory.Tables.Relation`4">
            <summary>
                Represents a relation between two database tables.
            </summary>
            <typeparam name="TPrimary">
                The type of the entities of the referred table.
            </typeparam>
            <typeparam name="TPrimaryKey">
                The type of the primary key.
            </typeparam>
            <typeparam name="TForeign">
                The type of the entities of the referring table.
            </typeparam>
            <typeparam name="TForeignKey">
                The type of the foreign key.
            </typeparam>
        </member>
        <member name="T:NMemory.Tables.RelationOptions">
            <summary>
                Represents options of a relation.
            </summary>
        </member>
        <member name="M:NMemory.Tables.RelationOptions.#ctor(System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:NMemory.Tables.RelationOptions"/> class.
            </summary>
            <param name="cascadedDeletion">
                if set to <c>true</c> cascaded deletion will be enabled
            </param>
        </member>
        <member name="P:NMemory.Tables.RelationOptions.CascadedDeletion">
            <summary>
                Gets a value that indicates whether the deletion of a referred (primary) entity
                should result in the deletion of the referring (foreign) entities.
            </summary>
            <value>
              <c>true</c> if enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:NMemory.Tables.TableCollection">
            <summary>
                Represents a collection of the tables of the database.
            </summary>
        </member>
        <member name="M:NMemory.Tables.TableCollection.GetAllTables">
            <summary>
                Returns all database tables.
            </summary>
            <returns> A list of the tables. </returns>
        </member>
        <member name="M:NMemory.Tables.TableCollection.GetAllRelations">
            <summary>
                Returns all database table relations.
            </summary>
            <returns> A list of the table relations. </returns>
        </member>
        <member name="M:NMemory.Tables.TableCollection.Create``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},NMemory.Tables.IdentitySpecification{``0})">
            <summary>
                Initializes a database table.
            </summary>
            <typeparam name="TEntity">
                Specifies the type of the entities of the table.
            </typeparam>
            <typeparam name="TPrimaryKey">
                Specifies the type of the primary key of the entities.
            </typeparam>
            <param name="primaryKey">
                An expression that represents the primary key of the entities.
            </param>
            <param name="identitySpecification">
                An IdentitySpecification to set an identity field.
            </param>
            <returns>
                An Table that represents the defined table object.
            </returns>
        </member>
        <member name="M:NMemory.Tables.TableCollection.Create``2(NMemory.Indexes.IKeyInfo{``0,``1},NMemory.Tables.IdentitySpecification{``0})">
            <summary>
                Initializes a database table.
            </summary>
            <typeparam name="TEntity">
                Specifies the type of the entities of the table.
             </typeparam>
            <typeparam name="TPrimaryKey">
                Specifies the type of the primary key of the entities.
             </typeparam>
            <param name="primaryKey">
                An IKeyInfo object that represents the primary key of the entities.
            </param>
            <param name="identitySpecification">
                An IdentitySpecification to set an identity field.
            </param>
            <returns>
                The table.
            </returns>
        </member>
        <member name="M:NMemory.Tables.TableCollection.CreateRelation``4(NMemory.Indexes.IUniqueIndex{``0,``1},NMemory.Indexes.IIndex{``2,``3},System.Func{``3,``1},System.Func{``1,``3},NMemory.Tables.RelationOptions)">
            <summary>
                Creates a relation between two tables.
            </summary>
            <typeparam name="TPrimary">
                The type of the entities of the primary table.
            </typeparam>
            <typeparam name="TPrimaryKey">
                The type of the primary key of the entities of the primary table.
            </typeparam>
            <typeparam name="TForeign">
                The type of the entities of the foreign table.
            </typeparam>
            <typeparam name="TForeignKey">
                Type type of the foreign key of the foreign table.
            </typeparam>
            <param name="primaryIndex">
                An IIndex that specifies the primary key.
            </param>
            <param name="foreignIndex">
                An IIndex that specifies the foreign key.
            </param>
            <param name="convertForeignToPrimary">
                A function to convert a foreign key to the corresponding primary key.
            </param>
            <param name="convertPrimaryToForeign">
                A function to convert a primary key to the corresponding foreign key.
            </param>
            <param name="relationOptions"></param>
            <returns>
                The relation.
            </returns>
        </member>
        <member name="T:NMemory.Tables.Table`2">
            <summary>
                Represents a database table.
            </summary>
            <typeparam name="TEntity">
                The type of the entities contained by the table
            </typeparam>
            <typeparam name="TPrimaryKey">
                The type of the primary key of the entities.
            </typeparam>
        </member>
        <member name="M:NMemory.Tables.Table`2.#ctor(NMemory.Modularity.IDatabase,NMemory.Indexes.IKeyInfo{`0,`1},NMemory.Tables.IdentitySpecification{`0})">
            <summary>
                Initializes a new instance of the <see cref="T:NMemory.Tables.Table`2"/> 
                class.
            </summary>
            <param name="database"> The database. </param>
            <param name="primaryKey"> The primary key. </param>
            <param name="identitySpecification"> The identity specification. </param>
        </member>
        <member name="M:NMemory.Tables.Table`2.#ctor">
            <summary>
                Prevents a default instance of the <see cref="T:NMemory.Tables.Table`2" /> class from
                being created.
            </summary>
        </member>
        <member name="E:NMemory.Tables.Table`2.IndexChanged">
            <summary>
            Occurs when the indexes of the table are changed.
            </summary>
        </member>
        <member name="M:NMemory.Tables.Table`2.Insert(`0)">
            <summary>
                Inserts the specified entity.
            </summary>
            <param name="entity"> The entity. </param>
        </member>
        <member name="M:NMemory.Tables.Table`2.Insert(`0,NMemory.Transactions.Transaction)">
            <summary>
                Inserts the specified entity.
            </summary>
            <param name="entity"> The entity. </param>
            <param name="transaction"> The transaction. </param>
        </member>
        <member name="M:NMemory.Tables.Table`2.InsertCore(`0,NMemory.Transactions.Transaction)">
            <summary>
                Core implementation of an entity insert.
            </summary>
            <param name="entity">
                The entity that contains the primary key of the entity to be deleted.
            </param>
            <param name="transaction">
                The transaction within which the update operation executes.
            </param>
        </member>
        <member name="M:NMemory.Tables.Table`2.Update(`0)">
            <summary>
                Updates the properties of the specified entity contained by the table.
            </summary>
            <param name="entity">
                An entity that contains the primary key of the entity to be updated and the new
                property values.
            </param>
        </member>
        <member name="M:NMemory.Tables.Table`2.Update(`0,NMemory.Transactions.Transaction)">
            <summary>
                Updates the properties of the specified contained by the table.
            </summary>
            <param name="entity">
                An entity that contains the primary key of the entity to be updated and the new
                property values.
            </param>
            <param name="transaction">
                The transaction within which the update operation executes.
            </param>
        </member>
        <member name="M:NMemory.Tables.Table`2.Update(`1,`0)">
            <summary>
                Updates the properties of the specified entity contained by the table.
            </summary>
            <param name="key">
                The primary key of the entity to be updated.
            </param>
            <param name="entity">
                An entity that contains the new property values.
            </param>
        </member>
        <member name="M:NMemory.Tables.Table`2.Update(`1,`0,NMemory.Transactions.Transaction)">
            <summary>
                Updates the properties of the specified entity contained by the table.
            </summary>
            <param name="key">
                The primary key of the entity to be updated.
            </param>
            <param name="entity">
                An entity that contains the new property values.
            </param>
            <param name="transaction">
                The transaction within which the update operation is executed.
            </param>
        </member>
        <member name="M:NMemory.Tables.Table`2.NMemory#Tables#IBulkTable{TEntity}#Update(NMemory.Linq.TableQuery{`0},System.Linq.Expressions.Expression{System.Func{`0,`0}},NMemory.Transactions.Transaction)">
            <summary>
                Updates the entities.
            </summary>
            <param name="query">
                The query expression that represents the entities to be updated.
            </param>
            <param name="updater">
                The expression that represents the update logic.
            </param>
            <param name="transaction">
                The transaction within which the update operation is executed.
            </param>
            <returns>
                The updated entities.
            </returns>
        </member>
        <member name="M:NMemory.Tables.Table`2.UpdateCore(System.Linq.Expressions.Expression,NMemory.Execution.IUpdater{`0},NMemory.Transactions.Transaction)">
            <summary>
                Core implementation of a bulk entity update.
            </summary>
            <param name="expression">
                The query expression that represents the entities to be updated.
            </param>
            <param name="updater">
                The updater.
            </param>
            <param name="transaction">
                The transaction within which the update operation is executed.
            </param>
            <returns> The updated entities. </returns>
        </member>
        <member name="M:NMemory.Tables.Table`2.Delete(`0)">
            <summary>
                Deletes an entity from the table.
            </summary>
            <param name="entity">
                An entity that contains the primary key of the entity to be deleted.
            </param>
        </member>
        <member name="M:NMemory.Tables.Table`2.Delete(`0,NMemory.Transactions.Transaction)">
            <summary>
                Deletes an entity from the table.
            </summary>
            <param name="entity">
                The entity to be deleted.
            </param>
            <param name="transaction">
                The transaction within which the update operation is executed.
            </param>
        </member>
        <member name="M:NMemory.Tables.Table`2.Delete(`1)">
            <summary>
                Deletes an entity from the table.
            </summary>
            <param name="key">
                The primary key of the entity to be deleted.
            </param>
        </member>
        <member name="M:NMemory.Tables.Table`2.Delete(`1,NMemory.Transactions.Transaction)">
            <summary>
                Deletes an entity from the table.
            </summary>
            <param name="key">
                The primary key of the entity to be deleted.
            </param>
            <param name="transaction">
                The transaction within which the update operation is executed.
            </param>
        </member>
        <member name="M:NMemory.Tables.Table`2.NMemory#Tables#IBulkTable{TEntity}#Delete(NMemory.Linq.TableQuery{`0},NMemory.Transactions.Transaction)">
            <summary>
                Deletes entities.
            </summary>
            <param name="query">
                The query that represents the entities to be deleted.
            </param>
            <param name="transaction">
                The transaction within which the delete operation is executed.
            </param>
            <returns>
                The count of the deleted entities.
            </returns>
        </member>
        <member name="M:NMemory.Tables.Table`2.DeleteCore(System.Linq.Expressions.Expression,NMemory.Transactions.Transaction)">
            <summary>
                Core implementation of a bulk entity delete.
            </summary>
            <param name="expression">
                A query expression that represents the entities to be deleted.
            </param>
            <param name="transaction">
                The transaction within which the delete operation is executed.
            </param>
            <returns>
                The count of deleted entities.
            </returns>
        </member>
        <member name="P:NMemory.Tables.Table`2.Count">
            <summary>
            Gets the number of entities contained by the table.
            </summary>
        </member>
        <member name="M:NMemory.Tables.Table`2.CreateIndex``1(NMemory.Indexes.IIndexFactory,System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
                Creates a new index.
            </summary>
            <typeparam name="TKey">
                The type of the index key.
            </typeparam>
            <param name="indexFactory">
                The index factory.
            </param>
            <param name="keySelector">
                The expression representing the definition of the index key.
            </param>
            <returns>
                The index.
            </returns>
        </member>
        <member name="M:NMemory.Tables.Table`2.CreateIndex``1(NMemory.Indexes.IIndexFactory,NMemory.Indexes.IKeyInfo{`0,``0})">
            <summary>
                Creates a new index.
            </summary>
            <typeparam name="TKey"> The type of the index key. </typeparam>
            <param name="indexFactory"> The index factory. </param>
            <param name="keyInfo"> The definition of the index key. </param>
            <returns> The index. </returns>
        </member>
        <member name="M:NMemory.Tables.Table`2.CreateUniqueIndex``1(NMemory.Indexes.IIndexFactory,System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
                Creates a new unique index.
            </summary>
            <typeparam name="TUniqueKey">
                The type of the unique index key.
            </typeparam>
            <param name="indexFactory">
                The index factory.
            </param>
            <param name="keySelector">
                The expression representing the definition of the index key.
            </param>
            <returns>
                The unique index. 
            </returns>
        </member>
        <member name="M:NMemory.Tables.Table`2.CreateUniqueIndex``1(NMemory.Indexes.IIndexFactory,NMemory.Indexes.IKeyInfo{`0,``0})">
            <summary>
                Creates a new unique index.
            </summary>
            <typeparam name="TUniqueKey">
                The type of the unqiue index key.
            </typeparam>
            <param name="indexFactory">
                The index factory.
            </param>
            <param name="keyInfo">
                The definition of the index key
            </param>
            <returns> The unique index. </returns>
        </member>
        <member name="P:NMemory.Tables.Table`2.Indexes">
            <summary>
                Gets the indexes of the table.
            </summary>
        </member>
        <member name="P:NMemory.Tables.Table`2.PrimaryKeyIndex">
            <summary>
                Gets the primary key index of the table.
            </summary>
        </member>
        <member name="P:NMemory.Tables.Table`2.NMemory#Tables#ITable{TEntity}#PrimaryKeyIndex">
            <summary>
                Gets the index of the primary key.
            </summary>
            <value>
                The index of the primary key.
            </value>
        </member>
        <member name="P:NMemory.Tables.Table`2.NMemory#Tables#ITable#PrimaryKeyIndex">
            <summary>
                Gets the index of the primary key.
            </summary>
            <value>
                The index of the primary key.
            </value>
        </member>
        <member name="M:NMemory.Tables.Table`2.NMemory#Tables#IReflectionTable#Update(System.Object)">
            <summary>
            Updates the properties of an entity contained by the table.
            </summary>
            <param name="entity">An entity that contains the primary key of the entity to be updated and the new property values.</param>
        </member>
        <member name="M:NMemory.Tables.Table`2.NMemory#Tables#IReflectionTable#Insert(System.Object)">
            <summary>
            Inserts a new entity into the table.
            </summary>
            <param name="entity">An entity that contains the property values of the new entity.</param>
        </member>
        <member name="M:NMemory.Tables.Table`2.NMemory#Tables#IReflectionTable#Delete(System.Object)">
            <summary>
            Deletes an entity from the table.
            </summary>
            <param name="entity">An entity that contains the primary key of the entity to be deleted.</param>
        </member>
        <member name="M:NMemory.Tables.Table`2.ToString">
            <summary>
                Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
                A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:NMemory.Tables.Table`2.CreateStoredEntity">
            <summary>
                Creates an entity that is meant to be stored in the table.
            </summary>
            <returns>
                The entity.
            </returns>
        </member>
    </members>
</doc>
